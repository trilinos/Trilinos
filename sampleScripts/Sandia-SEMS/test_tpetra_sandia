#!/bin/bash -e

#
# Global config
#

set -o pipefail

# Determine current machine.

MACHINE=""
HOSTNAME=$(hostname)
PROCESSOR=`uname -p`

if [[ "$HOSTNAME" =~ (white|ride).* ]]; then
  MACHINE=white
  module load git
fi

if [[ "$HOSTNAME" =~ .*bowman.* ]]; then
  MACHINE=bowman
  module load git
fi

if [[ "$HOSTNAME" =~ n.* ]]; then # Warning: very generic name
  if [[ "$PROCESSOR" = "aarch64" ]]; then
    MACHINE=sullivan
    module load git
  fi
fi

if [[ "$HOSTNAME" =~ node.* ]]; then # Warning: very generic name
  if [[ "$MACHINE" = "" ]]; then
    MACHINE=shepard
    module load git
  fi
fi

if [[ "$HOSTNAME" =~ apollo ]]; then
  MACHINE=apollo
  module load sems-git
fi

if [[ "$HOSTNAME" =~ sullivan ]]; then
  MACHINE=sullivan
  module load git
fi

if [ ! -z "$SEMS_MODULEFILES_ROOT" ]; then
  if [[ "$MACHINE" = "" ]]; then
    MACHINE=sems
    module load sems-git
  fi  
fi

if [[ "$MACHINE" = "" ]]; then
  echo "Unrecognized machine" >&2
  exit 1
fi

echo "Running on machine: $MACHINE"

GCC_WARNING_FLAGS="-Wall,-Wshadow,-pedantic,-Wsign-compare,-Wtype-limits,-Wignored-qualifiers,-Wempty-body,-Wclobbered,-Wuninitialized"
IBM_WARNING_FLAGS="-Wall,-Wshadow,-pedantic,-Wsign-compare,-Wtype-limits,-Wuninitialized"
CLANG_WARNING_FLAGS="-Wall,-Wshadow,-pedantic,-Wsign-compare,-Wtype-limits,-Wuninitialized"
INTEL_WARNING_FLAGS="-Wall,-Wshadow,-pedantic,-Wsign-compare,-Wtype-limits,-Wuninitialized"
CUDA_WARNING_FLAGS="-Wall,-Wshadow,-pedantic,-Wsign-compare,-Wtype-limits,-Wuninitialized"
PGI_WARNING_FLAGS=""

# Default. Machine specific can override.
DEBUG=False
ARGS=""
BUILD_LIST=""
DRYRUN=False
COFNIGURE_ONLY=False
BUILD_ONLY=False
TEST_SCRIPT=False

PRINT_HELP=False
OPT_FLAG=""
CXX_FLAGS_EXTRA=""
LD_FLAGS_EXTRA=""
KOKKOS_ARCH=""
KOKKOS_OPTIONS=""
KOKKOS_CUDA_OPTIONS=""
TRILINOS_PATH=""

#
# Handle arguments.
#

while [[ $# > 0 ]]
do
  key="$1"

  case $key in
    --trilinos-path*)
      TRILINOS_PATH="${key#*=}"
      ;;
    --build-list*)
      BUILD_LIST="${key#*=}"
      ;;
    --debug*)
      DEBUG=True
      ;;
    --configure-only*)
      CONFIGURE_ONLY=True
      ;;
    --build-only*)
      BUILD_ONLY=True
      ;;
    --test-script*)
      TEST_SCRIPT=True
      ;;
    --dry-run*)
      DRYRUN=True
      ;;
    --spot-check*)
      SPOT_CHECK=True
      ;;
    --kokkos-arch*)
      KOKKOS_ARCH="${key#*=}"
      ;;
    --opt-flag*)
      OPT_FLAG="${key#*=}"
      ;;
    --kokkos-options*)
      KOKKOS_OPTIONS="--kokkos-options=${key#*=}"
      ;;
    --kokkos-cuda-options*)
      KOKKOS_CUDA_OPTIONS="--kokkos-cuda-options=${key#*=}"
      ;;
    --with-complex)
      export JENKINS_DO_COMPLEX=ON
      ;;
    --cxxflags-extra*)
      CXX_FLAGS_EXTRA="${key#*=}"
      ;;
    --ldflags-extra*)
      LD_FLAGS_EXTRA="${key#*=}"
      ;;
    --help*)
      PRINT_HELP=True
      ;;
    *)
      # args, just append
      ARGS="$ARGS $1"
      ;;
  esac

  shift
done

if [ "$PRINT_HELP" = "True" ]; then
  echo "test_all_sandia <ARGS> <OPTIONS>:"
  echo "--kokkos-path=/Path/To/Kokkos: Path to the Kokkos root directory"
  echo "    Defaults to root repo containing this script"
  echo "--debug: Run tests in debug. Defaults to False"
  echo "--test-script: Test this script, not Kokkos"
  echo "--skip-hwloc: Do not do hwloc tests"
  echo "--num=N: Number of jobs to run in parallel"
  echo "--spot-check: Minimal test set to issue pull request"
  echo "--dry-run: Just print what would be executed"
  echo "--build-only: Just do builds, don't run anything"
  echo "--opt-flag=FLAG: Optimization flag (default: -O3)"
  echo "--cxxflags-extra=FLAGS: Extra flags to be added to CXX_FLAGS"
  echo "--ldflags-extra=FLAGS: Extra flags to be added to LD_FLAGS"
  echo "--arch=ARCHITECTURE: overwrite architecture flags"
  echo "--with-cuda-options=OPT: set KOKKOS_CUDA_OPTIONS"
  echo "--build-list=BUILD,BUILD,BUILD..."
  echo "    Provide a comma-separated list of builds instead of running all builds"
  echo "    Valid items:"
  echo "      OpenMP, Pthread, Qthreads, Serial, OpenMP_Serial, Pthread_Serial"
  echo "      Qthreads_Serial, Cuda_OpenMP, Cuda_Pthread, Cuda_Serial"
  echo ""

  echo "ARGS: list of expressions matching compilers to test"
  echo "  supported compilers sems"
  for COMPILER_DATA in "${COMPILERS[@]}"; do
    ARR=($COMPILER_DATA)
    COMPILER=${ARR[0]}
    echo "    $COMPILER"
  done
  echo ""

  echo "Examples:"
  echo "  Run all tests"
  echo "  % test_all_sandia"
  echo ""
  echo "  Run all gcc tests"
  echo "  % test_all_sandia gcc"
  echo ""
  echo "  Run all gcc/4.8.4 and all intel tests"
  echo "  % test_all_sandia gcc/4.8.4 intel"
  echo ""
  echo "  Run all tests in debug"
  echo "  % test_all_sandia --debug"
  echo ""
  echo "  Run gcc/4.8.4 and only do OpenMP and OpenMP_Serial builds"
  echo "  % test_all_sandia gcc/4.8.4 --build-list=OpenMP,OpenMP_Serial"
  echo ""
  echo "If you want to kill the tests, do:"
  echo "  hit ctrl-z"
  echo "  % kill -9 %1"
  echo
  exit 0
fi

SCRIPT_TRILINOS_ROOT=$( cd "$( dirname "$0" )" && cd ../.. && pwd )

# Set trilinos path.
if [ -z "$TRILINOS_PATH" ]; then
  TRILINOS_PATH=$SCRIPT_TRILINOS_ROOT
else
  # Ensure KOKKOS_PATH is abs path.
  TRILINOS_PATH=$( cd $TRILINOS_PATH && pwd )
fi

UNCOMMITTED=`cd ${TRILINOS_PATH}; git status --porcelain 2>/dev/null`
if ! [ -z "$UNCOMMITTED" ]; then
  echo "WARNING!! THE FOLLOWING CHANGES ARE UNCOMMITTED!! :"
  echo "$UNCOMMITTED"
  echo ""
fi

GITSTATUS=`cd ${TRILINOS_PATH}; git log -n 1 --format=oneline`
echo "Repository Status: " ${GITSTATUS}
echo ""
echo ""

# Set Backends
if [[ "$BUILD_LIST" =~ OpenMP ]]; then
  export JENKINS_DO_OPENMP=ON
else
  export JENKINS_DO_OPENMP=OFF    
fi

if [[ "$BUILD_LIST" =~ Cuda ]]; then
  export JENKINS_DO_CUDA=ON
  export OMPI_CXX=${TRILINOS_PATH}/packages/kokkos/bin/nvcc_wrapper
else
  unset OMPI_CXX
  export JENKINS_DO_CUDA=OFF    
fi

if [[ "$BUILD_LIST" =~ Pthread ]]; then
  export JENKINS_DO_PTHREAD=ON
else
  export JENKINS_DO_PTHREAD=OFF    
fi

if [[ "$BUILD_LIST" =~ Serial ]]; then
  export JENKINS_DO_SERIAL=ON
else
  export JENKINS_DO_SERIAL=OFF    
fi

export JENKINS_DO_TESTS=ON
export JENKINS_DO_EXAMPLES=ON

#
# Machine specific config.
#

if [ "$MACHINE" = "sems" ]; then
  source /projects/sems/modulefiles/utils/sems-modules-init.sh
 
  module purge
  module load sems-env
  module load kokkos-env

  module load sems-gcc/5.3.0,kokkos-cuda/8.0.44,sems-openmpi/1.10.1,sems-hdf5/1.8.12/base,sems-netcdf/4.4.1/exo

  if [ -z "$KOKKOS_ARCH" ]; then
    KOKKOS_ARCH="SNB"
  fi

  if [ -z "$BUILD_LIST" ]; then
    BUILD_LIST="OpenMP"
    export JENKINS_DO_OPENMP=ON
  fi
  
  export OMP_NUM_THREADS=2
  
  export JENKINS_ARCH=${KOKKOS_ARCH}
  export ARCH_C_FLAG="-mavx"
  export BLAS_LIBRARIES="-lblas"
  export LAPACK_LIBRARIES="-llapack"
  
  DATE=$(date +"%Y_%m_%d_%H.%M.%S")
  mkdir TestSEMS_${DATE}
  cd TestSEMS_${DATE}
  source ${TRILINOS_PATH}/sampleScripts/Sandia-SEMS/configure-testbeds-jenkins &> configure.out
  make -j 32 &> build.out
  ctest &> test.out
  cd ..

elif [ "$MACHINE" = "white" ]; then
  source /etc/profile.d/modules.sh
  SKIP_HWLOC=True

  module purge
  module load devpack/openmpi/1.10.4/gcc/5.4.0/cuda/8.0.44

  if [ -z "$KOKKOS_ARCH" ]; then
    KOKKOS_ARCH="Power8;Pascal60"
  fi

  if [ -z "$BUILD_LIST" ]; then
    BUILD_LIST="Cuda;OpenMP"
    export JENKINS_DO_CUDA=ON
    export JENKINS_DO_OPENMP=ON
    export OMPI_CXX=${TRILINOS_PATH}/packages/kokkos/bin/nvcc_wrapper
  fi
  
  export OMP_NUM_THREADS=2
  
  export JENKINS_ARCH=${KOKKOS_ARCH}
  export ARCH_C_FLAG="-mcpu=power8"
  export BLAS_LIBRARIES="${BLAS_ROOT}/lib/libblas.a;gfortran;gomp"
  export LAPACK_LIBRARIES="${LAPACK_ROOT}/lib/liblapack.a;gfortran;gomp"
  
  DATE=$(date +"%Y_%m_%d_%H.%M.%S")
  mkdir TestWhite_${DATE}
  cd TestWhite_${DATE}
  source ${TRILINOS_PATH}/sampleScripts/Sandia-SEMS/configure-testbeds-jenkins &> configure.out
  make -j 32 &> build.out
  ctest &> test.out
  cd ..

elif [ "$MACHINE" = "bowman" ]; then
  echo "Bowman"
elif [ "$MACHINE" = "sullivan" ]; then
  echo "Sullivan"
elif [ "$MACHINE" = "shepard" ]; then
  echo "Shepard"
elif [ "$MACHINE" = "apollo" ]; then
  source /projects/sems/modulefiles/utils/sems-modules-init.sh
 
  module purge
  module load sems-env
  module load kokkos-env

  module load "sems-gcc/5.3.0 kokkos-cuda/8.0.44 sems-openmpi/1.10.1 sems-cmake/3.5.2 sems-hdf5/1.8.12/base sems-netcdf/4.4.1/exo"

  if [ -z "$KOKKOS_ARCH" ]; then
    KOKKOS_ARCH="SNB;Pascal60"
    export 
  fi

  if [ -z "$BUILD_LIST" ]; then
    BUILD_LIST="OpenMP"
    export JENKINS_DO_OPENMP=ON
  fi
  
  export OMP_NUM_THREADS=2
  
  export JENKINS_ARCH=${KOKKOS_ARCH}
  export JENKINS_ARCH_C_FLAG="-mavx"
  export BLAS_LIBRARIES="-lblas"
  export LAPACK_LIBRARIES="-llapack"
  
  DATE=$(date +"%Y_%m_%d_%H.%M.%S")
  mkdir TestApollo_${DATE}
  cd TestApollo_${DATE}
  source ${TRILINOS_PATH}/sampleScripts/Sandia-SEMS/configure-testbeds-jenkins &> configure.out
  make -j 32 &> build.out
  ctest &> test.out
  cd ..
else
  echo "Unhandled machine $MACHINE" >&2
  exit 1
fi
