#
# Configuration .ini File
# =======================
#
# This file is organized by sections [section_name] where each section defines
# a set of key-value pairs.  Keys and values can be separated by ':' or "=" delimiters
# and both keys and values can have spaces.
#
# In this application, we split our keys into two values and the value side is handled
# based on what the `command` is:
#
#     <command> <key> : <value>
#
# Commands
# --------
# - module-purge:
#   + Purges all loaded modules. Equivalent to `$ module purge`
#
# - module-use: <path>
#   + This defines a path for the module system to use to discover modules.
#
# - module-load <module name> : <version>
#   + This defines a module to be loaded. This is equivalent to a `$ module load <modulename>/<version>` command.
#
# - module-unload <module name> :
#   + Instructs the handler to unload a module. This is the same as a `$ module unload <modulename>` command.
#   + Note: There is no `version` argument needed for this command, and it will be ignored if provided.
#
# - module-remove <module name> :
#   + This will _remove_ a module from the list of actions. This is different from `module-unload` in that
#     it fully removes the module from the list of actions before they are applied. This can be useful if we
#     are loading a standard set of modules and wish to remove some entries from the list. This streamlines
#     module operations by not creating the need for a `module unload` on an unecessary (or to-be-overridden)
#     module.
#
# - module-swap <module name old>/<version> : <module name new>/<version>
#   + This will execute a `$module swap module_old module_new/version`
#
# - use <SECTION_NAME>:
#   + Instructs the system to process a different section of the .ini file and insert the commands it provides
#     into the list of actions to be performed. The system will recursively process all sections included with
#     cyclic dependency detection to prevent infinite recursion.
#   + The <value> parameter is ignored for this command.
#
# - setenv <ENVVAR>: <VALUE>
#   + Sets an environment variable. This is equivalent to the bash command: `$ export ENVVAR=VALUE`
#   + Envvars will replace standard 'bash' style envvar strings (`${ENVVAR}`) with the contents of
#     an existing envvar. We require the curly braces in addition to the dollar sign for this but it
#     does enable appending/prepending content to existing envvars. For example:
#
#         setenv LD_LIBRARY_PATH : "${LD_LIBRARY_PATH}:/my/library/path"
#
#     If the envvar is missing a KeyError will be thrown.
#
#   + Note: envvars are processed _after_ modules are when the settings are applied.
#
# - unsetenv <ENVVAR>
#   + Unsets an environment variable.
#
# Tips and Tricks
# ---------------
#
# #### Multiple Entries to an ENVVAR
# Adding multiple entries to an environment variable can result in a very long string being added that may not
# be easy to maintain aesthetically. Unfortunately, we cannot insert multiple setenv lines with the same envvar
# within the same section due to a key-conflict. One workaround for this is to use temp envvars and then unset
# them when you're done.  For example:
#
# setenv PATH_TMP  : "/my/first/path/to/prepend:${PATH}"
# setenv PATH      : "/my/second/path/to/prepend:${PATH_TMP}"
# unsetenv PATH_TMP:
#
# #### Nonconforming Sections
# Since this file is essentially just a .ini style file that can be processed via the configparser module in
# Python, you can add additional sections that do not conform to the setEnvironment style. These will be ignored
# unless you attempt to load them by either providing the section name to the class constructor _or_ try to
# load them via a `use <section>` operation.
#
# =====================================================================================================================

[SAMPLE_MAP]
key1: value1
key2: value2
key3: value3


[SEMS-ENV]
module-purge:
module-use: /projects/sems/modulefiles/projects
module-load sems-env:


[SEMS-DEFAULT]
module-load sems-boost    : 1.63.0/base
module-load sems-cmake    : 3.10.3
module-load sems-python   : 3.5.2
setenv OMP_NUM_THREADS    : 2
setenv CC:  gcc
setenv CXX: g++
setenv FC:  gfortran
setenv TEST_ENVVAR_001: "TEST_ENVVAR_001_VALUE"


[TEST_PROFILE_001]
use SEMS-ENV:
module-load sems-gcc: 7.3.0
use SEMS-DEFAULT:


[Test_Profile_002]
use TEST_PROFILE_001:
unsetenv CXX:
setenv CC: g++


[TEST_PROFILE_003]
use TEST_PROFILE_001:
module-remove sems-python:


[TEST_PROFILE_004]
use TEST_PROFILE_001:
module-unload sems-python:


[TEST_PROFILE_005]
use TEST_PROFILE_001:
setenv TEST_ENVVAR_002  :  TEST_ENVVAR_002_VALUE/${TEST_ENVVAR_001}


[TEST_PROFILE_006]
use TEST_PROFILE_001:
module-swap sems-python/3.5.2: sems-python/3.8.0

[TEST_MODULE_FAIL]
module-load kzzzzzt: 16.16.16


[GCC_1.0]
module-load gcc: 1.0

[GCC_2.0]
use GCC_1.0:
# module-unload gcc: 1.0
module-load gcc: 2.0

[Module_Remove]
use GCC_2.0:
module-remove gcc:

[Module_Unload]:
use GCC_2.0:
module-unload gcc:

[Module_Purge]:
module-purge:


#
# Sections to test cycle breaking
# - Test by trying to process Sec_D, we should get blocked
#   when Sec_A tries to load Sec_C
# - Final result should have envvar Sec_C == '99'
[Sec_A]:
setenv Sec_A: 1
setenv Sec_C: 99
use Sec_C:

[Sec_B]:
setenv Sec_B: 1
use Sec_A:

[Sec_C]:
setenv Sec_C: 1
use Sec_B:

[Sec_D]:
setenv Sec_D: 1
use Sec_C:


#
# Cycle breaking 2
# - Invoke by loading Sec_D2
# - The second `use Sec_A2` should be ok
# - The final result should have envvar Sec_A2 == 1
#
[Sec_A2]:
setenv Sec_A2: 1

[Sec_B2]:
setenv Sec_B2: 1
use Sec_A2:

[Sec_C2]:
setenv Sec_C2: 1
use Sec_B2:

[Sec_D2]:
setenv Sec_D2: 1
use Sec_C2:
setenv Sec_A2: 99
use Sec_A2:
