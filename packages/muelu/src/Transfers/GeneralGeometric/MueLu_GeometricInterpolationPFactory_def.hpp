// @HEADER
//
// ***********************************************************************
//
//        MueLu: A package for multigrid based preconditioning
//                  Copyright 2012 Sandia Corporation
//
// Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
// the U.S. Government retains certain rights in this software.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
// 1. Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the Corporation nor the names of the
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Questions? Contact
//                    Jonathan Hu       (jhu@sandia.gov)
//                    Andrey Prokopenko (aprokop@sandia.gov)
//                    Ray Tuminaro      (rstumin@sandia.gov)
//
// ***********************************************************************
//
// @HEADER
#ifndef MUELU_GEOMETRICINTERPOLATIONPFACTORY_DEF_HPP
#define MUELU_GEOMETRICINTERPOLATIONPFACTORY_DEF_HPP

#include "Xpetra_CrsGraph.hpp"

#include "MueLu_MasterList.hpp"
#include "MueLu_Monitor.hpp"
#include "MueLu_Aggregates.hpp"

// Including this one last ensure that the short names of the above headers are defined properly
#include "MueLu_GeometricInterpolationPFactory_decl.hpp"

namespace MueLu {

  template <class Scalar, class LocalOrdinal, class GlobalOrdinal, class Node>
  RCP<const ParameterList> GeometricInterpolationPFactory<Scalar, LocalOrdinal, GlobalOrdinal, Node>::GetValidParameterList() const {
    RCP<ParameterList> validParamList = rcp(new ParameterList());

#define SET_VALID_ENTRY(name) validParamList->setEntry(name, MasterList::getEntry(name))
    SET_VALID_ENTRY("gmg: interpolation order");
    SET_VALID_ENTRY("gmg: build coarse coordinates");
#undef  SET_VALID_ENTRY

    // general variables needed in GeometricInterpolationPFactory
    validParamList->set<RCP<const FactoryBase> >("A",                       Teuchos::null,
                                                 "Generating factory of the matrix A");
    validParamList->set<RCP<const FactoryBase> >("Aggregates",                   Teuchos::null,
                                                 "Aggregates generated by StructuredAggregationFactory used to construct a piece-constant prolongator.");
    validParamList->set<RCP<const FactoryBase> >("prolongatorGraph",             Teuchos::null,
                                                 "Graph generated by StructuredAggregationFactory used to construct a piece-linear prolongator.");
    validParamList->set<RCP<const FactoryBase> >("Coordinates",                  Teuchos::null,
                                                 "Fine level coordinates used to construct piece-wise linear prolongator and coarse level coordinates.");
    validParamList->set<RCP<const FactoryBase> >("coarseCoordinatesFineMap",     Teuchos::null,
                                                 "map of the coarse coordinates' GIDs as indexed on the fine mesh.");
    validParamList->set<RCP<const FactoryBase> >("coarseCoordinatesMap",         Teuchos::null,
                                                 "map of the coarse coordinates' GIDs as indexed on the coarse mesh.");
    validParamList->set<RCP<const FactoryBase> >("Nullspace",                    Teuchos::null,
                                                 "Fine level nullspace used to construct the coarse level nullspace.");
    validParamList->set<RCP<const FactoryBase> >("lCoarseNodesPerDim",           Teuchos::null,
                                                 "Number of nodes per spatial dimmension on the coarse grid.");

    return validParamList;
  }

  template <class Scalar, class LocalOrdinal, class GlobalOrdinal, class Node>
  void GeometricInterpolationPFactory<Scalar, LocalOrdinal, GlobalOrdinal, Node>::
  DeclareInput(Level& fineLevel, Level& coarseLevel) const {
    const ParameterList& pL = GetParameterList();

    Input(fineLevel, "A");
    Input(fineLevel, "Nullspace");
    Input(fineLevel, "prolongatorGraph");
    Input(fineLevel, "lCoarseNodesPerDim");

    if( pL.get<bool>("gmg: build coarse coordinates") ||
        (pL.get<int>("gmg: interpolation order") == 1) ) {
      Input(fineLevel, "Coordinates");
      Input(fineLevel, "coarseCoordinatesFineMap");
      Input(fineLevel, "coarseCoordinatesMap");
    }

  }

  template <class Scalar, class LocalOrdinal, class GlobalOrdinal, class Node>
  void GeometricInterpolationPFactory<Scalar, LocalOrdinal, GlobalOrdinal, Node>::
  Build(Level& fineLevel, Level &coarseLevel) const {
    return BuildP(fineLevel, coarseLevel);
  }

  template <class Scalar, class LocalOrdinal, class GlobalOrdinal, class Node>
  void GeometricInterpolationPFactory<Scalar, LocalOrdinal, GlobalOrdinal, Node>::
  BuildP(Level &fineLevel, Level &coarseLevel) const {
    FactoryMonitor m(*this, "BuildP", coarseLevel);

    // Set debug outputs based on environment variable
    RCP<Teuchos::FancyOStream> out;
    if(const char* dbg = std::getenv("MUELU_GEOMETRICINTERPOLATIONPFACTORY_DEBUG")) {
      out = Teuchos::fancyOStream(Teuchos::rcpFromRef(std::cout));
      out->setShowAllFrontMatter(false).setShowProcRank(true);
    } else {
      out = Teuchos::getFancyOStream(rcp(new Teuchos::oblackholestream()));
    }

    // Declare useful types
    using real_type = typename Teuchos::ScalarTraits<SC>::magnitudeType;
    using realvaluedmultivector_type = Xpetra::MultiVector<real_type,LO,GO,Node>;

    // Get inputs from the parameter list
    const ParameterList& pL = GetParameterList();
    const int  interpolationOrder     = pL.get<int>("gmg: interpolation order");
    const bool buildCoarseCoordinates = pL.get<bool>("gmg: build coarse coordinates");

    // Declared main input/outputs to be retrieved and placed on the fine resp. coarse level
    RCP<Matrix> A = Get<RCP<Matrix> >(fineLevel, "A");
    RCP<CrsGraph> prolongatorGraph = Get<RCP<CrsGraph> >(fineLevel, "prolongatorGraph");
    RCP<realvaluedmultivector_type> fineCoordinates, coarseCoordinates;
    RCP<Matrix> P;

    *out << "Hello from GeometricInterpolationPFactory!" << std::endl;

    if(interpolationOrder == 0) {
      // Compute the prolongator using piece-wise constant interpolation
      BuildConstantP(P, prolongatorGraph, A);
    } else if(interpolationOrder == 1) {
      // Compute the prolongator using piece-wise linear interpolation
      BuildLinearP(P, prolongatorGraph);
    }

    // Build the coarse nullspace
    RCP<MultiVector> fineNullspace   = Get< RCP<MultiVector> > (fineLevel, "Nullspace");
    RCP<MultiVector> coarseNullspace = MultiVectorFactory::Build(P->getDomainMap(),
                                                                 fineNullspace->getNumVectors());
    P->apply(*fineNullspace, *coarseNullspace, Teuchos::TRANS, Teuchos::ScalarTraits<SC>::one(),
             Teuchos::ScalarTraits<SC>::zero());
    Set(coarseLevel, "Nullspace", coarseNullspace);
    Array<LO> lNodesPerDir = Get<Array<LO> >(fineLevel, "lCoarseNodesPerDim");
    Set(coarseLevel, "lNodesPerDim", lNodesPerDir);

    if(buildCoarseCoordinates || (interpolationOrder == 1)) {
      RCP<const Map> coarseCoordsFineMap = Get< RCP<const Map> >(fineLevel, "coarseCoordinatesFineMap");
      RCP<const Map> coarseCoordsMap = Get< RCP<const Map> >(fineLevel, "coarseCoordinatesMap");
      fineCoordinates   = Get< RCP<realvaluedmultivector_type> >(fineLevel, "Coordinates");
      coarseCoordinates = Xpetra::MultiVectorFactory<real_type,LO,GO,Node>::Build(coarseCoordsFineMap,
                                                                                  fineCoordinates->getNumVectors());
      RCP<const Import> coordsImporter = ImportFactory::Build(fineCoordinates->getMap(),
                                                              coarseCoordsFineMap);
      coarseCoordinates->doImport(*fineCoordinates, *coordsImporter, Xpetra::INSERT);
      coarseCoordinates->replaceMap(coarseCoordsMap);

      Set(coarseLevel, "Coordinates", coarseCoordinates);
    }
    Set(coarseLevel, "P", P);

  } // BuildP

  template <class Scalar, class LocalOrdinal, class GlobalOrdinal, class Node>
  void GeometricInterpolationPFactory<Scalar, LocalOrdinal, GlobalOrdinal, Node>::
  BuildConstantP(RCP<Matrix>& P, RCP<CrsGraph>& prolongatorGraph, RCP<Matrix>& A) const {

    // Set debug outputs based on environment variable
    RCP<Teuchos::FancyOStream> out;
    if(const char* dbg = std::getenv("MUELU_GEOMETRICINTERPOLATIONPFACTORY_DEBUG")) {
      out = Teuchos::fancyOStream(Teuchos::rcpFromRef(std::cout));
      out->setShowAllFrontMatter(false).setShowProcRank(true);
    } else {
      out = Teuchos::getFancyOStream(rcp(new Teuchos::oblackholestream()));
    }

    int dofsPerNode = A->GetFixedBlockSize();
    ArrayView<const GO> initialDomainMapLIDs =
      prolongatorGraph->getDomainMap()->getNodeElementList();
    Array<GO> domainMapLIDs(initialDomainMapLIDs.size()*dofsPerNode);
    for(LO elementIdx = 0; elementIdx < as<LO>(domainMapLIDs.size()); ++elementIdx) {
      for(int dof = 0; dof < dofsPerNode; ++dof) {
        domainMapLIDs[elementIdx*dofsPerNode + dof] =
          initialDomainMapLIDs[elementIdx]*dofsPerNode + dof;
      }
    }
    RCP<Map> domainMap = MapFactory::Build(prolongatorGraph->getRowMap()->lib(),
                                           prolongatorGraph->getGlobalNumCols()*dofsPerNode,
                                           domainMapLIDs(),
                                           prolongatorGraph->getIndexBase(),
                                           prolongatorGraph->getComm(),
                                           prolongatorGraph->getRowMap()->getNode());

    ArrayView<const GO> initialColMapLIDs =
      prolongatorGraph->getColMap()->getNodeElementList();
    Array<GO> colMapLIDs(initialColMapLIDs.size()*dofsPerNode);
    for(LO elementIdx = 0; elementIdx < as<LO>(colMapLIDs.size()); ++elementIdx) {
      for(int dof = 0; dof < dofsPerNode; ++dof) {
        colMapLIDs[elementIdx*dofsPerNode + dof] =
          initialColMapLIDs[elementIdx]*dofsPerNode + dof;
      }
    }
    RCP<Map> colMap = MapFactory::Build(prolongatorGraph->getColMap()->lib(),
                                        prolongatorGraph->getGlobalNumCols()*dofsPerNode,
                                        colMapLIDs(),
                                        prolongatorGraph->getIndexBase(),
                                        prolongatorGraph->getComm(),
                                        prolongatorGraph->getColMap()->getNode());

    std::vector<size_t> strideInfo(1);
    strideInfo[0]    = dofsPerNode;
    RCP<const StridedMap> stridedDomainMap = StridedMapFactory::Build(domainMap, strideInfo);

    P = rcp(new CrsMatrixWrap(A->getDomainMap(), colMap, 0, Xpetra::StaticProfile));
    // P = rcp(new CrsMatrixWrap(graph));
    RCP<CrsMatrix> PCrs = rcp_dynamic_cast<CrsMatrixWrap>(P)->getCrsMatrix();

    ArrayRCP<size_t>  iaP;
    ArrayRCP<LO>      jaP;
    ArrayRCP<SC>     valP;

    PCrs->allocateAllValues(A->getDomainMap()->getNodeNumElements(), iaP, jaP, valP);

    ArrayView<size_t> ia  = iaP();
    ArrayView<LO>     ja  = jaP();
    ArrayView<SC>     val = valP();
    ia[0] = 0;

    int dofIdx;
    ArrayView<const LO> colIdx;
    for(LO rowIdx = 0; rowIdx < prolongatorGraph->getNodeNumRows(); ++rowIdx) {
      prolongatorGraph->getLocalRowView(rowIdx, colIdx);
      for(int dof = 0; dof < dofsPerNode; ++dof) {
        dofIdx = rowIdx*dofsPerNode + dof;
        ia[dofIdx + 1] = dofIdx + 1;
        ja[dofIdx]     = colIdx[0]*dofsPerNode + dof;
        val[dofIdx]    = 1.0;
      }
    }

    PCrs->setAllValues(iaP, jaP, valP);
    PCrs->expertStaticFillComplete(domainMap, A->getDomainMap());

    // set StridingInformation of P
    if (A->IsView("stridedMaps") == true) {
      P->CreateView("stridedMaps", A->getRowMap("stridedMaps"), stridedDomainMap);
    } else {
      P->CreateView("stridedMaps", P->getRangeMap(), stridedDomainMap);
    }

  } // BuildConstantP

  template <class Scalar, class LocalOrdinal, class GlobalOrdinal, class Node>
  void GeometricInterpolationPFactory<Scalar, LocalOrdinal, GlobalOrdinal, Node>::
  BuildLinearP(RCP<Matrix>& P, RCP<CrsGraph>& prolongatorGraph) const {

    // Set debug outputs based on environment variable
    RCP<Teuchos::FancyOStream> out;
    if(const char* dbg = std::getenv("MUELU_GEOMETRICINTERPOLATIONPFACTORY_DEBUG")) {
      out = Teuchos::fancyOStream(Teuchos::rcpFromRef(std::cout));
      out->setShowAllFrontMatter(false).setShowProcRank(true);
    } else {
      out = Teuchos::getFancyOStream(rcp(new Teuchos::oblackholestream()));
    }

  } // BuildLinearP

} // namespace MueLu

#endif // MUELU_GEOMETRICINTERPOLATIONPFACTORY_DEF_HPP
