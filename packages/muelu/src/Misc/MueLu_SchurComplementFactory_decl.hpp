// @HEADER
// *****************************************************************************
//        MueLu: A package for multigrid based preconditioning
//
// Copyright 2012 NTESS and the MueLu contributors.
// SPDX-License-Identifier: BSD-3-Clause
// *****************************************************************************
// @HEADER

/*
 * MueLu_SchurComplementFactory_decl.hpp
 *
 *  Created on: Jun 18, 2012
 *      Author: wiesner
 */

#ifndef MUELU_SCHURCOMPLEMENTFACTORY_DECL_HPP_
#define MUELU_SCHURCOMPLEMENTFACTORY_DECL_HPP_

#include "MueLu_ConfigDefs.hpp"

#include <Teuchos_ParameterList.hpp>

#include <Xpetra_CrsMatrix_fwd.hpp>
#include <Xpetra_Map_fwd.hpp>

#include "MueLu_FactoryBase_fwd.hpp"
#include "MueLu_SingleLevelFactoryBase.hpp"

namespace MueLu {

/*!
  @class SchurComplementFactory class.
  @brief Factory for building the Schur Complement for a 2x2 block matrix.

  ## Context, assumptions, and use cases ##

  This factory is intended to be used for building the schur complement for respective smoothers. The calculation is
  for now restricted to 2x2 block matrices, where the schur complement is calculated on block A_11.

  For a blocked matrix \A = [A_00  A_01; A_10  A_11] it computes the Schur complement S = A_11 - 1/\omega A_10 Ainv A_01,
  where \omega is some scaling factor and \Ainv an approximation of A_00^{-1} (from InverseApproximationFactory).

  ## Input/output of this factory ##

  ### User parameters of InterfaceAggregationFactory ###
  Parameter | type | default | master.xml | validated | requested | description
  ----------|------|---------|:----------:|:---------:|:---------:|------------
  A     | Factory | null |  | * | * | Generating factory of the matrix A
  Ainv  | Factory | null |  | * | * | Generating factory of the approximate inverse of A (produced by the InverseApproximationFactory)
  omega | double  | 1.0  |  | * | * | Scaling factor

  The * in the master.xml column denotes that the parameter is defined in the master.xml file.
  The * in the validated column means that the parameter is declared in the list of valid input parameters (see GetValidParameters() ).
  The * in the requested column states that the data is requested as input with all dependencies (see DeclareInput() ).

  ### Variables provided by this factory ###

  After SchurComplementFactory::Build the following data is available (if requested)

  Parameter | generated by | description
  ----------|--------------|------------
  | A | SchurComplementFactory | The schur complement of the given block matrix.
*/

template <class Scalar        = DefaultScalar,
          class LocalOrdinal  = DefaultLocalOrdinal,
          class GlobalOrdinal = DefaultGlobalOrdinal,
          class Node          = DefaultNode>
class SchurComplementFactory : public SingleLevelFactoryBase {
#undef MUELU_SCHURCOMPLEMENTFACTORY_SHORT
#include "MueLu_UseShortNames.hpp"

 public:
  //! @name Constructors/Destructors.
  //@{

  //! Constructor.
  SchurComplementFactory() = default;

  //! Input
  //@{

  void DeclareInput(Level& currentLevel) const;

  RCP<const ParameterList> GetValidParameterList() const;

  //@}

  //@{
  //! @name Build methods.

  //! Build an object with this factory.
  void Build(Level& currentLevel) const;

  //@}

 private:
  //! Schur complement calculation method.
  RCP<Matrix> ComputeSchurComplement(RCP<BlockedCrsMatrix>& bA, RCP<Matrix>& Ainv) const;

};  // class SchurComplementFactory

}  // namespace MueLu

#define MUELU_SCHURCOMPLEMENTFACTORY_SHORT
#endif /* MUELU_SCHURCOMPLEMENTFACTORY_DECL_HPP_ */
