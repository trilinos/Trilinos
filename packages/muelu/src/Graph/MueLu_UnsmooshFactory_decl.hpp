// @HEADER
//
// ***********************************************************************
//
//        MueLu: A package for multigrid based preconditioning
//                  Copyright 2012 Sandia Corporation
//
// Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
// the U.S. Government retains certain rights in this software.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
// 1. Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the Corporation nor the names of the
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Questions? Contact
//                    Jonathan Hu       (jhu@sandia.gov)
//                    Andrey Prokopenko (aprokop@sandia.gov)
//                    Tobias Wiesner    (tawiesn@sandia.gov)
//                    Ray Tuminaro      (rstumin@sandia.gov)
//
// ***********************************************************************
//
// @HEADER
#ifndef PACKAGES_MUELU_SRC_GRAPH_MUELU_UNSMOOSHFACTORY_DECL_HPP_
#define PACKAGES_MUELU_SRC_GRAPH_MUELU_UNSMOOSHFACTORY_DECL_HPP_

#include "MueLu_ConfigDefs.hpp"
#include "MueLu_PFactory.hpp"
#include "MueLu_UnsmooshFactory_fwd.hpp"
#include "MueLu_Level_fwd.hpp"

namespace MueLu {

  /*!
    @class UnsmooshFactory class.
    @brief Factory for building "unsmooshed" transfer operators from transfer operators associated with a scalar helper problem (built by the VariableDofLaplacianFactory)

    The output prolongation operator P is compatible to the input matrix A. The input prolongation matrix P is supposed to be built by the VariableDofLaplacianFactory with 1 DOF per node.
    The DofStatus array declares for each row, whether it is a standard dof or a padded/pseudo Dirichlet dof.
    The user has to provide the parameter "maxDofPerNode", since the coarse matrices are always padded by construction (i.e. constant number of DOFs per node). This parameter is needed for building the column map of the unsmooshed prolongation operator.
    The parameter "fineIsPadded" allows to specify whether the input matrix A on the finest level is padded or not. In the padded case we have an artificially extended input matrix with pseudo Dirichlet rows on inactive rows. In the non-padded version
    we have "variable" number of Dofs per node.

    @ingroup MueLuGraphClasses

    ## Input/output of UnsmooshFactory ##

    ### User parameters of UnsmooshFactory ###
    Parameter | type | default | master.xml | validated | requested | description
    ----------|------|---------|:----------:|:---------:|:---------:|------------
     A        | Factory | null |   | * | * | Generating factory of the input matrix A with potentially variable number of DOFs. Might be padded or non-padded. Padded means, that the matrix has additional artificial rows and columns to have a constant number of DOFs per node. Needed to match the row map for the unsmooshed version of P with the row map of the unamalgamated input matrix A.
     P        | Factory | null |   | * | * | Generating factory of the (amalgamated) prolongator P generated from a (pseudo Laplacian) with 1 Dofs per node. Will be unsmooshed to be compatible with input matrix A in this factory.
     DofStatus |Facotry | null |   | * | * | Generating factory for dofStatus array (usually generated by the VariableDofLaplacdianFactory). It is a Teuchos::Array<char> of size number of Rows of input matrix P multiplied by the maximum possible number of Dofs per node.
     maxDofPerNode | int | 1 |      | * |   | Maximum number of DOFs per node. Needed for generating unsmooshed P. Note, that the coarse matrices are always padded, i.e. we have constant number of DOFs per node.
     fineIsPadded  | bool | false   | * |   | True if finest level input matrix is padded (default is false)


    The * in the @c master.xml column denotes that the parameter is defined in the @c master.xml file.<br>
    The * in the @c validated column means that the parameter is declared in the list of valid input parameters (see UnsmooshFactory::GetValidParameters).<br>
    The * in the @c requested column states that the data is requested as input with all dependencies (see UnsmooshFactory::DeclareInput).

    ### Variables provided by UnsmooshFactory ###

    After UnsmooshFactory::Build the following data is available (if requested)

    Parameter | generated by | description
    ----------|--------------|------------
    | P       | UnsmooshFactory   | Unsmooshed prolongation operator
  */
  template <class Scalar = double,
            class LocalOrdinal = int,
            class GlobalOrdinal = LocalOrdinal,
            class Node = KokkosClassic::DefaultNode::DefaultNodeType>
  class UnsmooshFactory : public PFactory {
#undef MUELU_UNSMOOSHFACTORY_SHORT
#include "MueLu_UseShortNames.hpp"

  public:

    //! @name Constructors/Destructors.
    //@{

    //! Constructor
    UnsmooshFactory();

    //! Destructor
    virtual ~UnsmooshFactory() { }

    RCP<const ParameterList> GetValidParameterList() const;

    //@}

    //! Input
    //@{

    void DeclareInput(Level &fineLevel, Level &coarseLevel) const;

    //@}

    void Build (Level &fineLevel, Level &coarseLevel) const; // Build
    void BuildP(Level &fineLevel, Level &coarseLevel) const {}; // TAW no real need for an extra BuildP routine. Just use Build

  private:




  }; //class UnsmooshFactory

} //namespace MueLu

#define MUELU_UNSMOOSHFACTORY_SHORT


#endif /* PACKAGES_MUELU_SRC_GRAPH_MUELU_UNSMOOSHFACTORY_DECL_HPP_ */
