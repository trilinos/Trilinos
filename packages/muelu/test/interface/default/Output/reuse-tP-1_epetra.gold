Clearing old data (if any)

Level 0
Setup Smoother (MueLu::IfpackSmoother{type = point relaxation stand-alone})
keep smoother data = 1
smoother -> 
 relaxation: type = symmetric Gauss-Seidel   [unused]
 relaxation: sweeps = 1   [unused]
 relaxation: damping factor = 1   [unused]

Level 1
Build (MueLu::RebalanceTransferFactory)
Build (MueLu::RepartitionFactory)
Computing Ac (MueLu::RAPFactory)
Prolongator smoothing (MueLu::SaPFactory)
Matrix filtering (MueLu::FilteredAFactory)
Build (MueLu::CoalesceDropFactory)
Build (MueLu::AmalgamationFactory)
[empty list]
algorithm = "classical" classical algorithm = "default": threshold = 0, blocksize = 1
lightweight wrap = 1
Filtered matrix is not being constructed as no filtering is being done
Build (MueLu::TentativePFactory)
Build (MueLu::UncoupledAggregationFactory)
BuildAggregates (Phase - (Dirichlet))
BuildAggregates (Phase 1 (main))
BuildAggregates (Phase 2a (secondary))
BuildAggregates (Phase 2b (expansion))
BuildAggregates (Phase 3 (cleanup))
Nullspace factory (MueLu::NullspaceFactory)
Fine level nullspace = Nullspace
Build (MueLu::CoarseMapFactory)
matrixmatrix: kernel params -> 
 [empty list]
matrixmatrix: kernel params -> 
 [empty list]
Transpose P (MueLu::TransPFactory)
matrixmatrix: kernel params -> 
 [empty list]
RAPFactory: call transfer factory: MueLu::CoordinatesTransferFactory
Build (MueLu::CoordinatesTransferFactory)
Transferring coordinates
matrixmatrix: kernel params -> 
 [empty list]
Build (MueLu::RepartitionHeuristicFactory)
Build (MueLu::Zoltan2Interface)
ParameterList = Teuchos::RCP<Teuchos::ParameterList const>{<ignored>}   [unused]
No repartitioning necessary: partitions were left unchanged by the repartitioner
Using original prolongator
repartition: rebalance P and R = 0
type = Interpolation
Build (MueLu::RebalanceTransferFactory)
Using original restrictor
repartition: rebalance P and R = 0
type = Restriction
Computing Ac (MueLu::RebalanceAcFactory)
Setup Smoother (MueLu::IfpackSmoother{type = point relaxation stand-alone})
keep smoother data = 1
smoother -> 
 relaxation: type = symmetric Gauss-Seidel   [unused]
 relaxation: sweeps = 1   [unused]
 relaxation: damping factor = 1   [unused]

Level 2
Build (MueLu::RebalanceTransferFactory)
Build (MueLu::RepartitionFactory)
Computing Ac (MueLu::RAPFactory)
Prolongator smoothing (MueLu::SaPFactory)
Matrix filtering (MueLu::FilteredAFactory)
Build (MueLu::CoalesceDropFactory)
Build (MueLu::AmalgamationFactory)
[empty list]
algorithm = "classical" classical algorithm = "default": threshold = 0, blocksize = 1
lightweight wrap = 1
Filtered matrix is not being constructed as no filtering is being done
Build (MueLu::TentativePFactory)
Build (MueLu::UncoupledAggregationFactory)
BuildAggregates (Phase - (Dirichlet))
BuildAggregates (Phase 1 (main))
BuildAggregates (Phase 2a (secondary))
BuildAggregates (Phase 2b (expansion))
BuildAggregates (Phase 3 (cleanup))
Nullspace factory (MueLu::NullspaceFactory)
Fine level nullspace = Nullspace
Build (MueLu::CoarseMapFactory)
matrixmatrix: kernel params -> 
 [empty list]
matrixmatrix: kernel params -> 
 [empty list]
Transpose P (MueLu::TransPFactory)
matrixmatrix: kernel params -> 
 [empty list]
RAPFactory: call transfer factory: MueLu::CoordinatesTransferFactory
Build (MueLu::CoordinatesTransferFactory)
Transferring coordinates
matrixmatrix: kernel params -> 
 [empty list]
Build (MueLu::RepartitionHeuristicFactory)
Build (MueLu::Zoltan2Interface)
ParameterList = Teuchos::RCP<Teuchos::ParameterList const>{<ignored>}   [unused]
No repartitioning necessary: partitions were left unchanged by the repartitioner
Using original prolongator
repartition: rebalance P and R = 0
type = Interpolation
Build (MueLu::RebalanceTransferFactory)
Using original restrictor
repartition: rebalance P and R = 0
type = Restriction
Computing Ac (MueLu::RebalanceAcFactory)
Max coarse size (<= 2000) achieved
Setup Smoother (MueLu::AmesosSmoother{type = <ignored>})
keep smoother data = 1
presmoother -> 
 [empty list]

--------------------------------------------------------------------------------
---                            Multigrid Summary                             ---
--------------------------------------------------------------------------------
Number of levels    = 3
Operator complexity = 1.44
Smoother complexity = 0.00
Cycle type          = V

level  rows  nnz    nnz/row  c ratio  procs
  0  9999  29995  3.00                  1  
  1  3333  9997   3.00     3.00         1  
  2  1111  3331   3.00     3.00         1  

Smoother (level 0) both : MueLu::IfpackSmoother{type = point relaxation stand-alone}

Smoother (level 1) both : MueLu::IfpackSmoother{type = point relaxation stand-alone}

Smoother (level 2) pre  : MueLu::AmesosSmoother{type = <ignored>}
Smoother (level 2) post : no smoother

Clearing old data (if any)

Level 0
Setup Smoother (MueLu::IfpackSmoother{type = point relaxation stand-alone})
keep smoother data = 1
smoother -> 
 relaxation: type = symmetric Gauss-Seidel   [unused]
 relaxation: sweeps = 1   [unused]
 relaxation: damping factor = 1   [unused]

Level 1
Build (MueLu::RebalanceTransferFactory)
Prolongator smoothing (MueLu::SaPFactory)
Matrix filtering (MueLu::FilteredAFactory)
Build (MueLu::CoalesceDropFactory)
Build (MueLu::AmalgamationFactory)
[empty list]
algorithm = "classical" classical algorithm = "default": threshold = 0, blocksize = 1
lightweight wrap = 1
Filtered matrix is not being constructed as no filtering is being done
Reusing previous AP data
matrixmatrix: kernel params -> 
 [empty list]
Using original prolongator
repartition: rebalance P and R = 0
type = Interpolation
Build (MueLu::RebalanceTransferFactory)
Transpose P (MueLu::TransPFactory)
matrixmatrix: kernel params -> 
 [empty list]
Using original restrictor
repartition: rebalance P and R = 0
type = Restriction
Computing Ac (MueLu::RebalanceAcFactory)
Computing Ac (MueLu::RAPFactory)
Reusing previous AP data
Reusing previous RAP data
RAPFactory: call transfer factory: MueLu::CoordinatesTransferFactory
Build (MueLu::CoordinatesTransferFactory)
Transferring coordinates
Reusing coordinates
matrixmatrix: kernel params -> 
 [empty list]
Setup Smoother (MueLu::IfpackSmoother{type = point relaxation stand-alone})
keep smoother data = 1
smoother -> 
 relaxation: type = symmetric Gauss-Seidel   [unused]
 relaxation: sweeps = 1   [unused]
 relaxation: damping factor = 1   [unused]

Level 2
Build (MueLu::RebalanceTransferFactory)
Prolongator smoothing (MueLu::SaPFactory)
Matrix filtering (MueLu::FilteredAFactory)
Build (MueLu::CoalesceDropFactory)
Build (MueLu::AmalgamationFactory)
[empty list]
algorithm = "classical" classical algorithm = "default": threshold = 0, blocksize = 1
lightweight wrap = 1
Filtered matrix is not being constructed as no filtering is being done
Reusing previous AP data
matrixmatrix: kernel params -> 
 [empty list]
Using original prolongator
repartition: rebalance P and R = 0
type = Interpolation
Build (MueLu::RebalanceTransferFactory)
Transpose P (MueLu::TransPFactory)
matrixmatrix: kernel params -> 
 [empty list]
Using original restrictor
repartition: rebalance P and R = 0
type = Restriction
Computing Ac (MueLu::RebalanceAcFactory)
Computing Ac (MueLu::RAPFactory)
Reusing previous AP data
Reusing previous RAP data
RAPFactory: call transfer factory: MueLu::CoordinatesTransferFactory
Build (MueLu::CoordinatesTransferFactory)
Transferring coordinates
Reusing coordinates
matrixmatrix: kernel params -> 
 [empty list]
Setup Smoother (MueLu::AmesosSmoother{type = <ignored>})
keep smoother data = 1
presmoother -> 
 [empty list]

--------------------------------------------------------------------------------
---                            Multigrid Summary                             ---
--------------------------------------------------------------------------------
Number of levels    = 3
Operator complexity = 1.44
Smoother complexity = 0.00
Cycle type          = V

level  rows  nnz    nnz/row  c ratio  procs
  0  9999  29995  3.00                  1  
  1  3333  9997   3.00     3.00         1  
  2  1111  3331   3.00     3.00         1  

Smoother (level 0) both : MueLu::IfpackSmoother{type = point relaxation stand-alone}

Smoother (level 1) both : MueLu::IfpackSmoother{type = point relaxation stand-alone}

Smoother (level 2) pre  : MueLu::AmesosSmoother{type = <ignored>}
Smoother (level 2) post : no smoother

