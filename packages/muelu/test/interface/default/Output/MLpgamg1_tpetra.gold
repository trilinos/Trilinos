Clearing old data (if any)

Level 0
Setup Smoother (MueLu::Ifpack2Smoother{type = RELAXATION})
smoother -> 
 relaxation: type = Symmetric Gauss-Seidel
 relaxation: sweeps = 2
 relaxation: damping factor = 1
 A = Teuchos::RCP<MueLu::FactoryBase const>{ptr=0,node=0,strong_count=0,weak_count=0}

Level 1
Prolongator smoothing (PG-AMG) (MueLu::PgPFactory)
Build (MueLu::TentativePFactory)
Build (MueLu::UncoupledAggregationFactory)
Build (MueLu::CoalesceDropFactory)
Build (MueLu::AmalgamationFactory)
[empty list]
algorithm = "classical" classical algorithm = "default": threshold = 0, blocksize = 1
BuildAggregates (Phase - (Dirichlet))
BuildAggregates (Phase 1 (main))
BuildAggregates (Phase 2a (secondary))
BuildAggregates (Phase 2b (expansion))
BuildAggregates (Phase 3 (cleanup))
aggregation: min agg size = 1   [unused]
aggregation: max selected neighbors = 0   [unused]
aggregation: ordering = natural   [unused]
aggregation: preserve Dirichlet points = 0   [unused]
Build (MueLu::CoarseMapFactory)
matrixmatrix: kernel params -> 
 [empty list]
PgPFactory::ComputeRowBasedOmega (MueLu::PgPFactory)
Call prolongator factory for calculating restrictor (MueLu::GenericRFactory)
Prolongator smoothing (PG-AMG) (MueLu::PgPFactory)
PgPFactory::ComputeRowBasedOmega (MueLu::PgPFactory)
[empty list]
Computing Ac (MueLu::RAPFactory)
RepairMainDiagonal = 0
matrixmatrix: kernel params -> 
 [empty list]
Setup Smoother (MueLu::Ifpack2Smoother{type = RELAXATION})
smoother -> 
 relaxation: type = Symmetric Gauss-Seidel
 relaxation: sweeps = 2
 relaxation: damping factor = 1
 A = Teuchos::RCP<MueLu::FactoryBase const>{ptr=0,node=0,strong_count=0,weak_count=0}

Level 2
Prolongator smoothing (PG-AMG) (MueLu::PgPFactory)
Build (MueLu::TentativePFactory)
Build (MueLu::UncoupledAggregationFactory)
Build (MueLu::CoalesceDropFactory)
Build (MueLu::AmalgamationFactory)
[empty list]
algorithm = "classical" classical algorithm = "default": threshold = 0, blocksize = 1
BuildAggregates (Phase - (Dirichlet))
BuildAggregates (Phase 1 (main))
BuildAggregates (Phase 2a (secondary))
BuildAggregates (Phase 2b (expansion))
BuildAggregates (Phase 3 (cleanup))
aggregation: min agg size = 1   [unused]
aggregation: max selected neighbors = 0   [unused]
aggregation: ordering = natural   [unused]
aggregation: preserve Dirichlet points = 0   [unused]
Nullspace factory (MueLu::NullspaceFactory)
Fine level nullspace = Nullspace
Build (MueLu::CoarseMapFactory)
matrixmatrix: kernel params -> 
 [empty list]
PgPFactory::ComputeRowBasedOmega (MueLu::PgPFactory)
Call prolongator factory for calculating restrictor (MueLu::GenericRFactory)
Prolongator smoothing (PG-AMG) (MueLu::PgPFactory)
PgPFactory::ComputeRowBasedOmega (MueLu::PgPFactory)
[empty list]
Computing Ac (MueLu::RAPFactory)
RepairMainDiagonal = 0
matrixmatrix: kernel params -> 
 [empty list]
Setup Smoother (MueLu::Ifpack2Smoother{type = RELAXATION})
smoother -> 
 relaxation: type = Symmetric Gauss-Seidel
 relaxation: sweeps = 2
 relaxation: damping factor = 1
 A = Teuchos::RCP<MueLu::FactoryBase const>{ptr=0,node=0,strong_count=0,weak_count=0}

Level 3
Prolongator smoothing (PG-AMG) (MueLu::PgPFactory)
Build (MueLu::TentativePFactory)
Build (MueLu::UncoupledAggregationFactory)
Build (MueLu::CoalesceDropFactory)
Build (MueLu::AmalgamationFactory)
[empty list]
algorithm = "classical" classical algorithm = "default": threshold = 0, blocksize = 1
BuildAggregates (Phase - (Dirichlet))
BuildAggregates (Phase 1 (main))
BuildAggregates (Phase 2a (secondary))
BuildAggregates (Phase 2b (expansion))
BuildAggregates (Phase 3 (cleanup))
aggregation: min agg size = 1   [unused]
aggregation: max selected neighbors = 0   [unused]
aggregation: ordering = natural   [unused]
aggregation: preserve Dirichlet points = 0   [unused]
Nullspace factory (MueLu::NullspaceFactory)
Fine level nullspace = Nullspace
Build (MueLu::CoarseMapFactory)
matrixmatrix: kernel params -> 
 [empty list]
PgPFactory::ComputeRowBasedOmega (MueLu::PgPFactory)
Call prolongator factory for calculating restrictor (MueLu::GenericRFactory)
Prolongator smoothing (PG-AMG) (MueLu::PgPFactory)
PgPFactory::ComputeRowBasedOmega (MueLu::PgPFactory)
[empty list]
Computing Ac (MueLu::RAPFactory)
RepairMainDiagonal = 0
matrixmatrix: kernel params -> 
 [empty list]
Setup Smoother (MueLu::Ifpack2Smoother{type = RELAXATION})
smoother -> 
 relaxation: type = Symmetric Gauss-Seidel
 relaxation: sweeps = 2
 relaxation: damping factor = 1
 A = Teuchos::RCP<MueLu::FactoryBase const>{ptr=0,node=0,strong_count=0,weak_count=0}

Level 4
Prolongator smoothing (PG-AMG) (MueLu::PgPFactory)
Build (MueLu::TentativePFactory)
Build (MueLu::UncoupledAggregationFactory)
Build (MueLu::CoalesceDropFactory)
Build (MueLu::AmalgamationFactory)
[empty list]
algorithm = "classical" classical algorithm = "default": threshold = 0, blocksize = 1
BuildAggregates (Phase - (Dirichlet))
BuildAggregates (Phase 1 (main))
BuildAggregates (Phase 2a (secondary))
BuildAggregates (Phase 2b (expansion))
BuildAggregates (Phase 3 (cleanup))
aggregation: min agg size = 1   [unused]
aggregation: max selected neighbors = 0   [unused]
aggregation: ordering = natural   [unused]
aggregation: preserve Dirichlet points = 0   [unused]
Nullspace factory (MueLu::NullspaceFactory)
Fine level nullspace = Nullspace
Build (MueLu::CoarseMapFactory)
matrixmatrix: kernel params -> 
 [empty list]
PgPFactory::ComputeRowBasedOmega (MueLu::PgPFactory)
Call prolongator factory for calculating restrictor (MueLu::GenericRFactory)
Prolongator smoothing (PG-AMG) (MueLu::PgPFactory)
PgPFactory::ComputeRowBasedOmega (MueLu::PgPFactory)
[empty list]
Computing Ac (MueLu::RAPFactory)
RepairMainDiagonal = 0
matrixmatrix: kernel params -> 
 [empty list]
Max coarse size (<= 128) achieved
Setup Smoother (MueLu::Amesos2Smoother{type = <ignored>})
smoother -> 
 A = Teuchos::RCP<MueLu::FactoryBase const>{ptr=0,node=0,strong_count=0,weak_count=0}
 Amesos2 -> 
  [empty list]

--------------------------------------------------------------------------------
---                            Multigrid Summary                             ---
--------------------------------------------------------------------------------
Number of levels    = 5
Operator complexity = 1.49
Smoother complexity = 1.98
Cycle type          = V

level  rows  nnz    nnz/row  c ratio  procs
  0  9999  29995  3.00                  1  
  1  3333  9997   3.00     3.00         1  
  2  1111  3331   3.00     3.00         1  
  3  371   1111   2.99     2.99         1  
  4  124   370    2.98     2.99         1  

Smoother (level 0) both : "Ifpack2::Relaxation": {Initialized: true, Computed: true, Type: Symmetric Gauss-Seidel, sweeps: 2, damping factor: 1, Global matrix dimensions: [9999, 9999], Global nnz: 29995}

Smoother (level 1) both : "Ifpack2::Relaxation": {Initialized: true, Computed: true, Type: Symmetric Gauss-Seidel, sweeps: 2, damping factor: 1, Global matrix dimensions: [3333, 3333], Global nnz: 9997}

Smoother (level 2) both : "Ifpack2::Relaxation": {Initialized: true, Computed: true, Type: Symmetric Gauss-Seidel, sweeps: 2, damping factor: 1, Global matrix dimensions: [1111, 1111], Global nnz: 3331}

Smoother (level 3) both : "Ifpack2::Relaxation": {Initialized: true, Computed: true, Type: Symmetric Gauss-Seidel, sweeps: 2, damping factor: 1, Global matrix dimensions: [371, 371], Global nnz: 1111}

Smoother (level 4) pre  : <Direct> solver interface
Smoother (level 4) post : no smoother

