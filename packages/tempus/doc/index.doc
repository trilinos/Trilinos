// @HEADER
// ****************************************************************************
//                Tempus: Copyright (2017) Sandia Corporation
//
// Distributed under BSD 3-clause license (See accompanying file Copyright.txt)
// ****************************************************************************
// @HEADER

/* ************************************************************************ */
/* ************************************************************************ */
/* ************************************************************************ */

/*!
  \mainpage Tempus: Time Integration and Sensitivity Analysis Package

  \section introduction Introduction

  Tempus is a Latin word meaning time as in “tempus fugit” -> “time flies”.

  The Tempus package is a time-integration framework for advanced
  transient analysis, including various time integrators and embedded
  sensitivity analysis for next-generation code architectures. This
  framework provides “out-of-the-box” time-integration capabilities,
  which allows users to supply governing equations and easily switch
  between various time integrators.  Additionally Tempus provides
  “build-your-own” capabilities, which allows applications to
  incorporate various Tempus components to augment or replace
  application transient capabilities.  Other capabilities include
  embedded error analysis, sensitivity analysis, transient optimization
  with ROL.

  Tempus provides a general infrastructure for the time evolution
  of solutions through a variety of general integration schemes,
  and can be used from small systems of equations (e.g., single
  ODEs for the time evolution of plasticity models, and multiple
  ODEs for coupled chemical reactions) to large-scale transient
  simulations requiring exascale computing (e.g., flow fields around
  reentry vehicles and magneto-hydrodynamics).
  
  \section capabilities Capabilities

  Tempus provides time-integration methods for first and second-order ODEs
  in their explicit and implicit forms, 
  \f{eqnarray*}{
    \mbox{Explicit:} & \dot{x} = \mathbf{f}(x,t)    & \ddot{x} = \mathbf{f}(\dot{x},x,t) \\
    \mbox{Implicit:} & \mathcal{F}(\dot{x},x,t) = 0 & \mathcal{F}(\ddot{x},\dot{x},x,t) = 0
  \f}

  \subsection integrators Integrators

  Tempus Integrators (e.g., Tempus::IntegratorBasic) are the time loop
  structure for time integration and provide several features, e.g.,
  - Control the advancement of the solution from timestep to the next, e.g.,
    restart from failed timestep, selection of the next timestep size,
    solution output.
  - holds the solution history for the time integration
  - Applications can insert application-specific functionality into
    Tempus::IntegratorBasic through observers, e.g., Tempus::IntegratorObserver.
  - Applications can create their own integrators, derived from Tempus::Integrator.

  \subsection steppers Time Steppers

  Some features of Tempus::Stepper are
  - Timesteppers take a single timestep (PASS/FAIL) and operate on
    the supplied solution.
  - Steppers are stateless (i.e., do not hold on to data related to
    the solution), which indicates if the same solution is given to the
    Stepper multiple times, the same result would be obtained.
  - Steppers hold the governing equations/physics (e.g., ModelEvaulator).
  - Timesteppers can make the initial conditions "consistent"
    (i.e., ensure that \f$x\f$ and \f$\dot{x}\f$ (and optionally
    \f$\ddot{x}\f$ satisfy the governing equation at the beginning of the
    time integration, e.g., \f$\mathcal{F}(\ddot{x},\dot{x},x,t) = 0\f$.
  - Many Steppers take advantage of the First-Same-As-Last (FSAL) property,
    when possible, to reduce computational costs.
  - Applications can insert application-specific functionality into the
    Tempus::Stepper through application actions, e.g., Tempus::StepperRKAppAction.
  - Applications can create their own steppers, derived from Stepper,
    that can be used with other Tempus capabilities, e.g.,
    \ref Tempus::IntegratorBasic "Integrator Basic" and \ref Tempus::SolutionHistory
    "Solution History".
  - Steppers can mark solutions as failed (e.g., failure to reach solver
    tolerances), suggest timestep sizes, and calculate error estimates.

  A variety of time steppers are available (also see \ref Tempus::Stepper).

  - One-Step Methods:
    - \ref Tempus::StepperForwardEuler "Forward Euler"
    - \ref Tempus::StepperBackwardEuler "Backward Euler"
    - \ref Tempus::StepperTrapezoidal "Trapezoidal Method"
  - \ref Tempus::StepperExplicitRK "Explicit Runge-Kutta Methods":
    - \ref Tempus::StepperERK_General "General ERK"
    - \ref Tempus::StepperERK_ForwardEuler "RK Forward Euler (RK1)"
    - \ref Tempus::StepperERK_4Stage4thOrder "RK Explicit 4 Stage (RK4)"
    - \ref Tempus::StepperERK_3_8Rule "RK Explicit 3/8 Rule"
    - \ref Tempus::StepperERK_4Stage3rdOrderRunge "RK Explicit 4 Stage 3rd order by Runge"
    - \ref Tempus::StepperERK_5Stage3rdOrderKandG "RK Explicit 5 Stage 3rd order by Kinnmark and Gray"
    - \ref Tempus::StepperERK_3Stage3rdOrder "RK Explicit 3 Stage 3rd order"
    - \ref Tempus::StepperERK_3Stage3rdOrderTVD "RK Explicit 3 Stage 3rd order TVD or SSPERK33 (SSPRK3)"
    - \ref Tempus::StepperERK_3Stage3rdOrderHeun "RK Explicit 3 Stage 3rd order by Heun"
    - \ref Tempus::StepperERK_Midpoint "RK Explicit Midpoint"
    - \ref Tempus::StepperERK_Trapezoidal "RK Explicit Trapezoidal or Heuns Method or SSPERK22 (SSPRK2)"
    - \ref Tempus::StepperERK_BogackiShampine32 "Bogacki-Shampine 3(2) Pair"
    - \ref Tempus::StepperERK_Merson45 "Merson 4(5) Pair"
    - \ref Tempus::StepperERK_Ralston "RK Explicit Ralston"
    - \ref Tempus::StepperERK_SSPERK54 "SSPERK54"
  - \ref Tempus::StepperDIRK "Diagonally Implicit Runge-Kutta (DIRK) Methods":
    - \ref Tempus::StepperDIRK_General "General DIRK"
    - \ref Tempus::StepperDIRK_BackwardEuler "RK Backward Euler"
    - \ref Tempus::StepperSDIRK_ImplicitMidpoint "RK Implicit Midpoint"
    - \ref Tempus::StepperDIRK_1Stage1stOrderRadauIA "RK Implicit 1 Stage 1st order Radau IA"
    - \ref Tempus::StepperDIRK_1StageTheta "DIRK 1 Stage Theta Method"
    - \ref Tempus::StepperSDIRK_2Stage2ndOrder "SDIRK 2 Stage 2nd order"
    - \ref Tempus::StepperSDIRK_2Stage3rdOrder "SDIRK 2 Stage 3rd order"
    - \ref Tempus::StepperEDIRK_2Stage3rdOrder "EDIRK 2 Stage 3rd order"
    - \ref Tempus::StepperEDIRK_2StageTheta "EDIRK 2 Stage Theta Method"
    - \ref Tempus::StepperSDIRK_3Stage2ndOrder "SDIRK 3 Stage 2nd order"
    - \ref Tempus::StepperSDIRK_3Stage4thOrder "SDIRK 3 Stage 4th order"
    - \ref Tempus::StepperSDIRK_5Stage4thOrder "SDIRK 5 Stage 4th order"
    - \ref Tempus::StepperSDIRK_5Stage5thOrder "SDIRK 5 Stage 5th order"
    - \ref Tempus::StepperSDIRK_SSPDIRK22 "SSPDIRK22"
    - \ref Tempus::StepperSDIRK_SSPDIRK32 "SSPDIRK32"
    - \ref Tempus::StepperSDIRK_SSPDIRK23 "SSPDIRK23"
    - \ref Tempus::StepperSDIRK_SSPDIRK33 "SSPDIRK33"
    - \ref Tempus::StepperSDIRK_21Pair "SDIRK 2(1) Pair"
    - \ref Tempus::StepperEDIRK_TrapezoidalRule "RK Trapezoidal Rule or RK Crank-Nicolson"
    - \ref Tempus::StepperDIRK_2Stage2ndOrderLobattoIIIB "RK Implicit 2 Stage 2nd order Lobatto IIIB"
  - \ref Tempus::StepperIMEX_RK "Implicit-Explicit (IMEX) Runge-Kutta Methods":
    - General Partitioned IMEX RK
    - IMEX RK 1st order
    - SSP1_111
    - IMEX RK SSP2 (SSP2_222)
    - IMEX RK SSP3 (SSP3_332)
    - IMEX RK ARS 233
    - General IMEX RK
    - Partitioned IMEX RK 1st order
    - Partitioned IMEX RK SSP2
    - Partitioned IMEX RK ARS 233
  - Multi-Step Methods:
    - \ref Tempus::StepperBDF2 "BDF2"
  - Second-order ODE Methods:
    - \ref Tempus::StepperLeapfrog "Leapfrog"
    - \ref Tempus::StepperNewmarkImplicitAForm "Newmark Implicit a-Form"
    - \ref Tempus::StepperNewmarkImplicitDForm "Newmark Implicit d-Form"
    - \ref Tempus::StepperNewmarkExplicitAForm "Newmark Explicit a-Form"
    - \ref Tempus::StepperHHTAlpha "HHT-Alpha"
  - Steppers with subSteppers:
    - \ref Tempus::StepperOperatorSplit "Operator Split"
    - \ref Tempus::StepperSubcycling "Subcycling"

  \subsection solutions Solution State and Solution History

  Solutions in Tempus are maintained in Tempus::SolutionState and incapsulate
  the complete state of the solution for a particular time.  The primary
  requirement for SolutionState is that it contains all the information
  needed to restart the solution from scratch, e.g., check-pointing and
  recover from a failed timestep.  The four primary components of the
  Tempus::SolutionState are
  - The state - \f$x(t)\f$, \f$\dot{x}(t)\f$ (optional), and \f$\ddot{x}(t)\f$ (optional)
  - The metastate - timestep, time, order, error, etc.
  - The StepperState - any data needed by the stepper
  - The PhysicsState - any application-specific data

  Tempus::SolutionState are stored in a Tempus::SolutionHistory, which
  is simply a container of SolutionStates, and
  - allows chronological and index access to SolutionStates
  - has multiple methods to handle the number of SolutionStates, e.g., all and last two states.
  - supports access patterns, e.g., adjoint sensitivities
    for checkpointing, and past timesteps for BDF methods.
  - provides interpolation capabilities (note: interpolated solutions
    may not satisfy governing-equation conservation principles).

  \subsection timestepControl Timestep Control and Strategies

  Tempus::TimeStepControl is used by the Tempus::IntegratorBasic to select
  the next timestep size, and has several basic capabilities:
  - simulation time min/max bounding
  - time index min/max bounding
  - timestep size min/max bounding
  - relative/absolute maximum error
  - timestep adjustments for output and checkpointing
  - maximum number of failures and consecutive failures
  - ensure constant time steps
  - incorporate Stepper suggested time step
  
  Additionally, Tempus provides timestep control strategies (e.g.,
  Tempus::TimeStepControlStrategy) for various variable-timestepping
  capabilities, and include
  - constant and variable timestep control
  - PID integral timestep controller
  - composite strategy, which can apply multiple control strategies
  - ability to incorporate application-specific control strategies

  \section tutorials Tutorials

  Here are some basic tutorials to illustrate how convert an application
  use Tempus, and some of the features available.

  <table>
    <tr><th> Title <th> Description
    <tr><td> \ref example-00
        <td> Introduces the problem used in following examples.
    <tr><td> \ref example-01
        <td> Utilize Thyra Vectors instead of C++ arrays.
    <tr><td> \ref example-02
        <td> Use ModelEvaluator for the problem description.
    <tr><td> Example 3: Intro SolutionState
        <td> Introduce SolutionState to manage the solution evoluation (under construction).
  </table>

  Also, one can look at the tests and unit tests for examples of usage,
  but these may not show standard usage or context as they are meant for
  testing.

 */
