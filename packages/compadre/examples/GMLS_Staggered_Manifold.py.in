import subprocess
import os
import re
import math
import sys
import argparse

parser = argparse.ArgumentParser(description='convert files by adding cell centroids and ID (for cubed-sphere)')
parser.add_argument('--porder', dest='porder', type=int, default=3, help='polynomial degree for basis')
parser.add_argument('--grids', dest='grids', type=int, default=2, help='number of grids for refinement sequence')
parser.add_argument('--in-trilinos', dest='in_trilinos', type=str, default='false', help='whether being called from inside of Trilinos')
args = parser.parse_args()

def check_bounds(porder, rate):
    if (porder=="1"):
        if rate<3 and rate>.9:
            return True
        else:
            return False
    else:
        if rate>float(porder)-1.2:
            return True
        else:
            return False

num_target_sites = 100
porder = args.porder
grids = args.grids

errors = []

target_operators=("Staggered Laplace-Beltrami \(VectorBasis\)", "Staggered Laplace-Beltrami \(ScalarBasis\)", "Surface Staggered Divergence \(VectorSamples\)", "Surface Staggered Divergence \(ScalarSamples\)")#, "Surface Staggered Gradient \(VectorBasis\)", "Surface Staggered Gradient \(ScalarBasis\)")
for operator in target_operators:
    errors.append([])

for grid_num in range(grids):
    with open(os.devnull, 'w') as devnull:
        exe_name=""
        if args.in_trilinos.lower()=="true":
            exe_name = "@CMAKE_CURRENT_BINARY_DIR@/Compadre_GMLS_Staggered_Manifold_Test.exe"
        else:
            exe_name = "@CMAKE_CURRENT_BINARY_DIR@/GMLS_Staggered_Manifold_Test"
        output_commands = [exe_name,"--p","%d"%porder,"--nt","%d"%num_target_sites,"--d","3","--ns","%d"%(20*num_target_sites*pow(4,grid_num)),"--solver","QR","--problem","MANIFOLD","--kokkos-threads=4"]
        print(output_commands)
        output = subprocess.check_output(output_commands, stderr=devnull)
        #print(output)
        for key, operator in enumerate(target_operators):
            m = re.search('(?<=%s Error: )[0-9]+\.?[0-9]*(?:[Ee]\ *-?\ *[0-9]+)?'%operator, output.decode('utf-8'))
            try:
                errors[key].append(float(m.group(0)))
            except:
                print("Program exited early. Regular expression search for error failed.")
                exit(-1)
    
print(errors)

for key, operator in enumerate(target_operators):
    print("\n\n%s rates: porder:%s\n============="%(operator.replace('\\',''), porder))
    for i in range(1,len(errors[key])):
        if (errors[key][i]!=0):
            rate = math.log(errors[key][i]/errors[key][i-1])/math.log(.5)
            print(str(rate) + ", " + str(errors[key][i]) + ", " + str(errors[key][i-1]))
            assert(check_bounds(porder, rate))
        else:
            print("NaN - Division by zero")

print("Passed.")
sys.exit(0)
