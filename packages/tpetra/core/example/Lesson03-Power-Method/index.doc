/*!
\page Tpetra_Lesson03 Tpetra Lesson 03: Power method
\brief Use Tpetra sparse matrix and dense vector objects to implement
  a simple iteration (the power method)

\section Tpetra_Lesson03_Topics Lesson topics

This lesson demonstrates the following:
<ol>
<li> How to construct a Tpetra::CrsMatrix (a distributed sparse
     matrix) </li>
<li> How to modify the entries of a previously constructed CrsMatrix </li>
<li> How to use CrsMatrix and Vector to implement a simple iterative
     eigensolver (the power method) </li>
</ol>

This example is just like the Epetra power method example with which
many users might be familiar, but uses Tpetra objects in place of
Epetra objects.

\section Tpetra_Lesson03_Relation Relation to other lessons

Before starting this lesson, it helps to have learned \ref
Tpetra_Lesson01 (how to initialize Tpetra) and \ref
Tpetra_Lesson02_Vector (how to create distributions and distributed
vectors).  After completing this lesson, you might want to learn about
more efficient ways to add or modify entries in a Tpetra sparse
matrix.

\section Tpetra_Lesson03_Fill Creating and filling a sparse matrix

This is the first lesson in the usual sequence which covers adding
entries to ("filling") a Tpetra sparse matrix, and modifying the
values of those entries after creating the matrix.  Creating and
filling a Tpetra sparse matrix involves the following steps:
<ol>
<li> Create the CrsMatrix (by calling one of its constructors) </li>
<li> Call methods to add entries to the sparse matrix </li>
<li> Call the matrix's \c fillComplete() method </li>
</ol>
We will explain each of these steps in turn.

\subsection Tpetra_Lesson03_Fill_create Creating the CrsMatrix

Tpetra's sparse matrices are distributed over one or more parallel
processes, just like vectors or other distributed objects.  Also just
like vectors, you have to tell the sparse matrix its distribution on
construction.  Unlike vectors, though, sparse matrices have two
dimensions over which to be distributed: rows and columns.

Many users are perfectly happy ignoring the column distribution and
just distributing the matrix in "one-dimensional" fashion over rows.
In that case, you need only supply the "row Map" to the constructor.
This implies that for any row which a process owns, that process may
insert entries in any column in that row.

Some users want to use the full flexibility of distributing both the
rows and columns of the matrix over processes.  This "two-dimensional"
distribution, if chosen optimally, can significantly reduce the amount
of communication needed for distributed-memory parallel sparse
matrix-vector multiply.  Trilinos packages like Zoltan and Zoltan2 can
help you compute this distribution.  In that case, you may give both
the "row Map" and the "column Map" to the constructor.  This implies
that for any row which a process owns, that process may insert entries
in any column in that row which that process owns in its column Map.

Finally, other users already know the structure of the sparse matrix,
and just want to fill in values.  These users should first create the
graph (a CrsGraph), call \c fillComplete() on the graph, and then give
the graph to the constructor of CrsMatrix.  The graph may have either
a "1-D" or "2-D" distribution, as mentioned above.

\subsection Tpetra_Lesson03_Fill_add Adding entries to the sparse matrix

Methods of CrsMatrix that start with "insert" actually change the
structure of the sparse matrix.  Methods that start with "replace" or
"sumInto" only modify existing values.

\subsection Tpetra_Lesson03_Fill_fillComplete Calling fillComplete()

Calling \c fillComplete() signals that you are done changing the
structure (if allowed) or values of the sparse matrix.  This is an
expensive operation, because it both rearranges local data, and
communicates in order to build reusable communication patterns for
sparse matrix-vector multiply.  You should try to amortize the cost of
this operation whenever possible over many sparse matrix-vector
multiplies.

\c fillComplete() takes two arguments: 
<ul>
<li> the domain Map (the distribution of the input vector x in a
     sparse matrix-vector multiply y = A*x) </li>
<li> the range Map (the distribution of the output vector y in a
     sparse matrix-vector multiply y = A*x) </li>
</ul>

Both the domain and range Maps must be one-to-one: that is, each
global index in the Map must be uniquely owned by one and only one
process.  You will need to supply these two arguments to
<tt>fillComplete()</tt> under any of the following conditions:
<ul>
<li> When the row Map is not the same as the range Map (it can't be if
     the row Map is not one to one) </li>
<li> When the domain and range Maps are not equal (e.g., if the matrix
     is not square) </li>
<li> When the domain or range Map as not the same as the row Map
</ul>
If the domain and range Maps equal the row Map and the row Map is
one-to-one, then you may call \c fillComplete() with no arguments.

The most significant difference between Epetra and Tpetra sparse
matrices, is that in order to modify the entries of a
Tpetra::CrsMatrix once you have called \c fillComplete(), you must
first call \c resumeFill().  Epetra_CrsMatrix has no corresponding
"resume fill" method, and you may modify the values of entries after
\c FillComplete() has been called.

The reason for this difference is that Tpetra's \c fillComplete() has
the right to rearrange the matrix's data in ways that violate user
expectations.  For example, it may give the data to a third-party
library that rearranges them in an opaque way, or even copy them into
a different memory space (for example, into GPU memory).  Calling
<tt>resumeFill()</tt> signals Tpetra that you want to change either
the values or the structure.

\section Tpetra_Lesson03_example Code example

The following code example shows how to fill and compute with a Tpetra
sparse matrix, using the procedure discussed in the text above.

\include lesson03_power_method.cpp

*/
