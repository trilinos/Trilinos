# environment-specs.ini
#
#------------------------------------------------------------------------------
#
# This is a configuration file for the `LoadEnv` tool, allowing you to specify
# what is necessary to create each of your environments.  Environments are
# grouped by system (see `supported-systems.ini`).  The syntax for a section
# specifying an environment is as follows:
#
#   [environment-name]
#   # list
#   # of
#   # commands
#
# The `environment-name` can be any string.  The recommended convention is to
# use `<system-name>-<compiler>-<compiler-version>-<mpi>-<mpi-version>-
# <node-type>`, where `<node-type>` is either `serial` or `openmp` and is not
# applicable to CUDA environments.  These names (excepting the `<system-name>-`
# prefix) must match what appears in `supported-envs.ini` for the given system.
#
# The commands that can be used within a section to establish an environment
# are the following:
#
#   * `use section_name`:  Inserts the contents of the section_name section in
#     place of this statement.
#   * `envvar-set envvar : value`:  Sets (or overwrites) an environment
#     variable.
#   * `envvar-append envvar : value`:  Append a value to an existing
#     environment variable.
#   * `envvar-prepend envvar : value`:  Prepend a value to an existing
#     environment variable.
#   * `envvar-remove envvar`:  Removes all occurrences of `envvar` from the
#     list of actions to be applied.
#   * `envvar-unset envvar`:  Unsets (removes) an environment variable, if it
#     exists.
#   * `envvar-remove-substr`:  Removes all occurrences of `substr` from
#     `envvar`.
#   * `envvar-remove-path-entry`:  Removes occurrences of a `path` from a path
#     `envvar`.
#   * `envvar-find-in-path`:  Locate an executable in your path and store the
#     location in the `envvar`.
#   * `envvar-assert-not-empty`:  Throw an error if the `envvar` is not set or
#     is empty.
#   * `module-load module_name : version`:  Load a module.
#   * `module-purge`:  Purge all loaded modules.
#   * `module-remove module_name`:  Removes all uses of `module_name` from the
#     list of actions to be applied.
#   * `module-swap module_old : module_new/nersion`:  Swaps two modules.
#   * `module-unload module_name`:  Unloads a module.
#   * `module-use path`:  Adds a path to modulefiles.
#
# It is possible to create sections within the file that do not correspond to a
# complete environment, but rather are intended to be `use`d within other
# environments.  In such cases, the recommended convention for the section name
# is to use ALL-CAPS, and pick something representative of where it will be
# used, e.g., use `[ATS2]` to collect operations that are common to all
# `[ats2_*]` environments.
#
# Note:
#   The operations in a section will be executed in the order in which they
#   appear, so you need to be careful with the ordering of `use` statements and
#   loading metamodules.
#
#------------------------------------------------------------------------------
#
# Modifying an Existing Environment
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# To make modifications to an existing environment, the process is:
#
#   1. Find the environment you need to modify within the file.
#   2. Modify the list of commands under that `[environment-name]` section
#      heading (see the command list above) to modify the environment
#      appropriately:
#      * Change environment variables.
#      * Change modules loaded.
#
# Note:
#   It is not recommended that you change the versions of the compiler or MPI
#   implementation for an existing environment.  Instead see below to add a new
#   environment.
#
# Note:
#   If you need to modify multiple environments on a system in the exact same
#   way, there should be a `[SYSTEM-NAME]` section that gets `use`d in the
#   individual environments themselves.  Modify that section instead.  If that
#   section does not yet exist, see the note below under adding a new
#   environment.
#
#------------------------------------------------------------------------------
#
# Adding a New Environment to an Existing System
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# To stand up a new environment on a currently supported system, the process
# is:
#
#   1. Find the system to which you would like to add the new environment.
#   2. Determine a new environment name (see above for the naming convention).
#   3. Add a new `[environment-name]` section heading under the given system.
#      Environment names are organized alphabetically for any given system.
#   4. Create a list of commands under that `[environment-name]` section
#      heading (see the command list above) to establish the environment
#      appropriately:
#      * Set/alter environment variables.
#      * Load modules.
#
# Note:
#   If there are any commonalities shared by multiple environments on a certain
#   system:
#   1. Create a `[SYSTEM-NAME]` section to collect the common operations.
#   2. Remove the common operations from the environments from which they were
#      taken.
#   3. Insert a `use SYSTEM-NAME` statement in each of the environments from
#      which commonalities were removed.
#
#------------------------------------------------------------------------------
#
# Removing an Environment
# ~~~~~~~~~~~~~~~~~~~~~~~
#
# When a particular environment is no longer needed---for instance, if a new
# environment was stood up to replace it and it's been sufficiently
# vetted---the process to remove an environment is:
#
#   1. Find the environment you wish to remove in the file.
#   2. Remove the `[environment-name]` section heading and any commands listed
#      underneath it.
#
#------------------------------------------------------------------------------
#
# Adding a New Environment for a New System
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# When standing up a completely new system, the procedure is:
#
#   1. Add the new system to `supported-systems.ini`.
#   2. Add the environment to be supported on that system to
#      `supported-envs.ini`.
#   3. Create a new system comment block in the file by copying and pasting an
#      existing one and modifying the system name.  The systems are organized
#      alphabetically within the file.
#   4. Create one or more new environments for the new system.  See above for
#      how to add a new environment.
#
#------------------------------------------------------------------------------



#------------------------------------------------------------------------------
# Common environment options not specific to a particular system.
#------------------------------------------------------------------------------

[MPI-COMPILER-VARS]
envvar-find-in-path MPICC  : mpicc
envvar-find-in-path MPICXX : mpicxx
envvar-find-in-path MPIF90 : mpif90

[rhel8_gcc-openmpi]

[rhel8_oneapi-intelmpi]
use MPI-COMPILER-VARS
envvar-find-in-path I_MPI_CXX : icpx
envvar-find-in-path I_MPI_CC  : icx
envvar-find-in-path I_MPI_F90  : ifx
envvar-set I_MPI_PIN : 0
envvar-set MPIR_CVAR_CH4_OFI_TAG_BITS : 31
envvar-set MPIR_CVAR_CH4_OFI_RANK_BITS : 8
