# config-specs.ini
#
#------------------------------------------------------------------------------
#
# This is a configuration file for the `GenConfig` tool, used to specify what
# CMake configuration settings correspond to the various environments (loaded
# by the `LoadEnv` tool, and specified in `supported-systems.ini`,
# `supported-envs.ini`, and `environment-specs.ini`) and the flags/options in
# `supported-config-flags.ini`.  The syntax for a section specifying a
# configuration is as follows:
#
#   [configuration-name]
#   # list
#   # of
#   # commands
#
# The `configuration-name` is a string comprised of the fully qualified
# environment name returned by `LoadEnv`, followed by the options from
# `supported-config-flags.ini` (in the order in which they appear in that
# file), all separated by underscores.  For instance,
#
#   ats1_intel-19.0.4-mpich-7.7.15-knl-openmp_release_static_HSW_no-asan_no-complex_no-fpic_mpi_no-pt_no-rdc_no-package-enables
#   ^__fully_qualified_environment_name_____^ ^       ^      ^   ^       ^          ^       ^   ^     ^      ^-- package-enables
#                                             |       |      |   |       |          |       |   |     |-- use-rdc
#                                             |       |      |   |       |          |       |   |-- use-pt
#                                             |       |      |   |       |          |       |-- use-mpi
#                                             |       |      |   |       |          |-- use-fpic
#                                             |       |      |   |       |-- use-complex
#                                             |       |      |   |-- use-asan
#                                             |       |      |-- kokkos-arch
#                                             |       |-- lib-type
#                                             |-- build-type
#
# The commands that can be used within a section to establish an environment
# are the following:
#
#   * `use section_name`:  Inserts the contents of the section_name section in
#     place of this statement.
#   * `opt-set Param1 [Param2] [ParamN] : VALUE`:  Sets a program option.
#   * `opt-remove Param1 [SUBSTR]`:  Removes options in the option list that
#     match `Param1`.  If `SUBSTR` (verbatim) is included, only a substring
#     need match to remove `Param1` from the option list.
#   * `opt-set-cmake-var VARNAME [TYPE] [FORCE] [PARENT_SCOPE] : VALUE`:  Sets
#     a CMake variable.  The `TYPE` is optional, but recommended.  See the
#     CMake documentation on `set()` for more information on `FORCE` and
#     `PARENT_SCOPE`.
#
# It is possible to create sections within the file that do not correspond to a
# complete configuration, but rather are intended to be `use`d within other
# sections.  In such cases, the section name must be ALL-CAPS, and we recommend
# using something representative of where it will be used, e.g., use `[ATS2]`
# to collect operations that are common to all # `[ats2_*]` configurations.
#
# Note:
#   Any sections in ALL-CAPS will NOT be validated by GenConfig. Validation
#   includes ensuring the section name is a valid, properly formatted
#   `configuration-name`.
#
# Note:
#   The operations in a section will be executed in the order in which they
#   appear, so you need to be careful with the ordering of `use` statements.
#
# This file is organized into the following high-level sections:
#
#   1. Configuration settings common to all supported configurations
#   2. Tweaks corresponding to flag-option pairs from
#      `supported-config-flags.ini`
#   3. Tweaks corresponding to particular combinations of flag-option pairs
#      from `supported-config-flags.ini`
#   4. Tweaks corresponding to particular systems
#
#------------------------------------------------------------------------------
#
# Adding a New Flag/Option Set
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# If you need to extend the `GenConfig` tool to parse a new set of keywords out
# of the build name, you'll need to do the following:
#
#   1. Add the new flag/option set to `supported-config-flags.ini` (see there
#      for details).
#   2. Add new `[FLAG|OPTION]` sections to high-level section 2 of the file for
#      each of the new options being introduced.  If one of the options doesn't
#      actually have any operations associated with it, create the section
#      anyway and comment something like "# Nothing to do here.".
#   3. Optionally add sections to high-level section 3 of the file if any of
#      the new options, when combined with existing options, should yield
#      certain operations (see that section for examples).
#   4. For all existing complete configurations, introduce the new options into
#      those section names.  If they `use` a partial configuration section,
#      insert the new option into that section name as well if appropriate.
#   5. For each system, if the new options do anything that is system-specific,
#      add `[SYSTEM-NAME_FLAG|OPTION]` sections and `use` them as appropriate.
#
#------------------------------------------------------------------------------
#
# Adding a New Option to a Flag
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# If you need to add a new option to an existing flag---for instance, you want
# to add a new user to the `package-enables` flag such that you can specify a
# different set of packages to turn on---all you need to do is:
#
#   1. Add the new option to the flag in `supported-config-flags.ini` (see
#      there for details).
#   2. Find the group of `[FLAG|OPTION]` sections in the high-level section 2
#      of this file.
#   3. Add a new section for the new option.
#   4. Add commands to that new section as appropriate.
#   5. If applicable, create sections in high-level section 3 of this file
#      corresponding to combinations of the new option with existing options
#      (see that section for examples).
#   6. `use` the new `[FLAG|OPTION]` section within complete configuration
#      sections, being sure to modify those section names appropriately.
#
#------------------------------------------------------------------------------
#
# Removing an Option from a Flag
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# If you need to remove an option that is no longer supported:
#
#   1. Remove the option from `supported-config-flags.ini` (see there for
#      details).
#   2. Find the `[FLAG|OPTION]` section in this file and remove it.
#   3. Find any places the `[FLAG|OPTION]` section was `use`d within other
#      sections and remove those as well.
#   4. Modify any section names appropriately to indicate the removal of the
#      option.
#
# Note:  You may wish to deprecate an option for a time before removing it.  To
#        do so, your team may wish to adopt a convention of prepending `dep-`
#        to flag/option names to indicate their deprecation.
#
#------------------------------------------------------------------------------
#
# Removing a Flag/Option Set
# ~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# If you need to remove an entire flag/option set---for instance, if you used
# to give your users flexibility in a certain way, but are now taking that away
# to consolidate what is officially supported---simply follow the instructions
# above for "Removing an Option from a Flag" for all the options pertaining to
# the flag you want to remove.
#
#------------------------------------------------------------------------------
#
# Modifying an Existing Flag/Option Set
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# If you wish to simply alter a flag/option set, for instance, by renaming
# things, simply use a combination of the instructions above.  Ensure you make
# corresponding changes to `supported-config-flags.ini`.
#
#------------------------------------------------------------------------------
#
# Adding a New Configuration for an Existing System
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# If you need to stand up a new configuration on an existing system---for
# instance, you want to toggle a flag in a way it hasn't yet been set on that
# system---simply:
#
#   1. Find the chunk of the file corresponding to the system you want to add
#      the configuration to.
#   2. Find a section corresponding to a complete configuration similar to the
#      one you want to stand up.
#   3. Copy and paste that section.
#   4. Toggle the flags however you'd like in the section name.
#   5. Make the corresponding changes to the sections that get `use`d within.
#   6. Optionally add any additional commands specific to this new
#      configuration.
#
#------------------------------------------------------------------------------
#
# Removing an Existing Configuration
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# If you wish to remove a particular configuration---for instance, if it will
# no longer be supported---simply find the section in this file corresponding
# to the complete configuration you'll no longer support and remove it.
#
# Note:  You may wish to deprecate an option for a time before removing it.  To
#        do so, your team may wish to adopt a convention of prepending `dep-`
#        to flag/option names to indicate their deprecation.
#------------------------------------------------------------------------------
#
# Tweaking an Existing Configuration
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# If you need to make changes to an existing complete configuration---for
# instance, if it was set up incorrectly---all you need to do is find the
# section in the file corresponding to the configuration you want to change,
# and then alter the commands in that section appropriately.  If you need to
# make changes in a section `use`d by the section you want to change, make
# those changes, but be careful how that will impact other similar complete
# configurations.
#
#------------------------------------------------------------------------------
#
# Adding New Configurations for a New System
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# If it's time to stand up some new configurations on a new system, the
# procedure to follow is:
#
#   1. Add the new environments on the new system to the `LoadEnv` tool,
#      modifying `supported-systems.ini`, `supported-envs.ini`, and
#      `environment-specs.ini` appropriately (see those files for details).
#   2. Add a chunk of new sections to this file corresponding to the new
#      system.  The systems are arranged alphabetically in the file.
#   3. Create a `[SYSTEM-NAME]` section that includes `use COMMON`, along with
#      any other settings specific to the new system.
#   4. If applicable, create `[SYSTEM-NAME_FLAG|OPTION]` sections containing
#      commands to be executed only when `FLAG` is `OPTION` on `SYSTEM-NAME`.
#   5. Create complete configuration sections following the naming scheme shown
#      at the top of this file.
#   6. Fill in those configurations with `use` directives to include the
#      appropriate partial sections from earlier in the file.
#
#------------------------------------------------------------------------------



#------------------------------------------------------------------------------
# 1. Configuration settings common to all supported configurations.
#------------------------------------------------------------------------------

[rhel8_sems-gnu-openmpi_release_static_no-kokkos-arch_no-asan_no-complex_no-fpic_mpi_no-pt_no-rdc_no-package-enables]
opt-set-cmake-var UNUSED : UNUSED
