#! ${PYTHON_EXECUTABLE}
# -*- python -*-

# @HEADER
# ***********************************************************************
#
#          PyTrilinos: Python Interfaces to Trilinos Packages
#                 Copyright (2014) Sandia Corporation
#
# Under the terms of Contract DE-AC04-94AL85000 with Sandia
# Corporation, the U.S. Government retains certain rights in this
# software.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the Corporation nor the names of the
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Questions? Contact William F. Spotz (wfspotz@sandia.gov)
#
# ***********************************************************************
# @HEADER

#
# System imports
from   __future__ import print_function
from   numpy    import *
from   optparse import *
import sys
import unittest

#
# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-t", "--testharness", action="store_true",
                  dest="testharness", default=False,
                  help="test local build modules; prevent loading system-installed modules")
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
options,args = parser.parse_args()

#
# Under normal usage, simply use 'from PyTrilinos import Epetra'.  For testing,
# we want to be able to control whether we import from the build directory or
# from a system-installed version of PyTrilinos.
from testutil import fromPyTrilinosImport
Epetra      = fromPyTrilinosImport('Epetra'   , options.testharness)
EpetraExt   = fromPyTrilinosImport('EpetraExt', options.testharness)

####################################################################

class InArgsTestCase(unittest.TestCase):
    "TestCase class for EpetraExt InArgs objects"

    def setUp(self):
        self.comm  = Epetra.PyComm()
        self.map   = Epetra.Map(5*self.comm.NumProc(), 0, self.comm)
        self.v1    = Epetra.Vector(self.map)
        self.v2    = Epetra.Vector(self.map)
        self.v3    = Epetra.Vector(self.map)
        self.v2[:] =  1
        self.v3[:] = -1
        self.tp    = EpetraExt.tuple_of_Vector(self.v1, self.v2, self.v3)

    def testConstructor0(self):
        "Test EpetraExt InArgs constructor, no arguments"
        inArgs = EpetraExt.InArgs()
        self.failUnless(inArgs.description.startswith('WARNING'))
        self.assertEquals(inArgs.x,     False)
        self.assertEquals(inArgs.x_dot, False)
        self.assertEquals(inArgs.p,     0    )
        self.assertEquals(inArgs.t,     None )
        self.assertEquals(inArgs.alpha, None )
        self.assertEquals(inArgs.beta,  None )

    def testConstructor1(self):
        "Test EpetraExt InArgs constructor, one argument"
        inArgs = EpetraExt.InArgs(t=0.0)
        self.failUnless(inArgs.description.startswith('WARNING'))
        self.assertEquals(inArgs.x,     False)
        self.assertEquals(inArgs.x_dot, False)
        self.assertEquals(inArgs.p,     0    )
        self.assertEquals(inArgs.t,     0.0  )
        self.assertEquals(inArgs.alpha, None )
        self.assertEquals(inArgs.beta,  None )

    def testConstructor6(self):
        "Test EpetraExt InArgs constructor, six arguments"
        inArgs = EpetraExt.InArgs(x=self.v1, x_dot=self.v2, p=self.tp,
                                  t=0.0, alpha=1.0, beta=1.414213)
        self.failUnless(inArgs.description.startswith('WARNING'))
        self.failUnless((inArgs.x     == self.v1).all())
        self.failUnless((inArgs.x_dot == self.v2).all())
        self.failUnless((inArgs.p[0]  == self.v1).all())
        self.failUnless((inArgs.p[1]  == self.v2).all())
        self.failUnless((inArgs.p[2]  == self.v3).all())
        self.assertEquals(inArgs.t,     0.0)
        self.assertEquals(inArgs.alpha, 1.0)
        self.assertAlmostEquals(inArgs.beta, 1.414213)

    def testX(self):
        "Test EpetraExt InArgs x property"
        inArgs = EpetraExt.InArgs()
        self.assertEquals(inArgs.x, False)
        inArgs.x = True
        self.assertEqual(inArgs.x, True)
        inArgs.x = self.v1
        self.failUnless((inArgs.x == self.v1).all())

    def testXBad(self):
        "Test EpetraExt InArgs x property, bad assignment"
        inArgs = EpetraExt.InArgs()
        self.assertEquals(inArgs.x, False)
        self.assertRaises(ValueError, inArgs.__setattr__, 'x', 0.0)

    def testDescription(self):
        "Test EpetraExt InArgs description property"
        inArgs = EpetraExt.InArgs()
        self.failUnless(inArgs.description.startswith('WARNING'))
        inArgs.description = 'Example'
        self.assertEquals(inArgs.description, 'Example')

    def testDescriptionBad(self):
        "Test EpetraExt InArgs description property, bad assignment"
        inArgs = EpetraExt.InArgs()
        self.failUnless(inArgs.description.startswith('WARNING'))
        self.assertRaises(TypeError, inArgs.__setattr__, 'description', 2009)

    def testXDot(self):
        "Test EpetraExt InArgs x_dot property"
        inArgs = EpetraExt.InArgs()
        self.assertEquals(inArgs.x_dot, False)
        inArgs.x_dot = True
        self.assertEquals(inArgs.x_dot, True)
        inArgs.x_dot = self.v2
        self.failUnless((inArgs.x_dot == self.v2).all())

    def testXDotBad(self):
        "Test EpetraExt InArgs x_dot property, bad assignment"
        inArgs = EpetraExt.InArgs()
        self.assertEquals(inArgs.x_dot, False)
        self.assertRaises(ValueError, inArgs.__setattr__, 'x_dot', 1.0)

    def testP(self):
        "Test EpetraExt InArgs p property"
        inArgs = EpetraExt.InArgs()
        self.assertEquals(inArgs.p, 0)
        inArgs.p = 3
        self.assertEquals(inArgs.p, 3)
        inArgs.p = self.tp
        self.failUnless((inArgs.p[0] == self.v1).all())
        self.failUnless((inArgs.p[1] == self.v2).all())
        self.failUnless((inArgs.p[2] == self.v3).all())

    def testPBad(self):
        "Test EpetraExt InArgs p property, bad assignment"
        inArgs = EpetraExt.InArgs()
        self.assertEquals(inArgs.p, 0)
        self.assertRaises(ValueError, inArgs.__setattr__, 'p', -1.0)

    def testT(self):
        "Test EpetraExt InArgs t property"
        inArgs = EpetraExt.InArgs()
        self.assertEquals(inArgs.t, None)
        inArgs.t = 0.0
        self.assertEquals(inArgs.t, 0.0)

    def testTBad(self):
        "Test EpetraExt InArgs t property, bad assignment"
        inArgs = EpetraExt.InArgs()
        self.assertEquals(inArgs.t, None)
        self.assertRaises(TypeError, inArgs.__setattr__, 't', 'initial')

    def testAlpha(self):
        "Test EpetraExt InArgs alpha property"
        inArgs = EpetraExt.InArgs()
        self.assertEquals(inArgs.alpha, None)
        inArgs.alpha = 1.0
        self.assertEquals(inArgs.alpha, 1.0)

    def testAlphaBad(self):
        "Test EpetraExt InArgs alpha property, bad assignment"
        inArgs = EpetraExt.InArgs()
        self.assertEquals(inArgs.alpha, None)
        self.assertRaises(TypeError, inArgs.__setattr__, 'alpha', [0,1,2])

    def testBeta(self):
        "Test EpetraExt InArgs beta property"
        inArgs = EpetraExt.InArgs()
        self.assertEquals(inArgs.beta, None)
        inArgs.beta = -1.0
        self.assertEquals(inArgs.beta, -1.0)

    def testBetaBad(self):
        "Test EpetraExt InArgs beta property, bad assignment"
        inArgs = EpetraExt.InArgs()
        self.assertEquals(inArgs.beta, None)
        self.assertRaises(TypeError, inArgs.__setattr__, 'beta', -1)

####################################################################

class EvaluationTestCase(unittest.TestCase):
    "TestCase class for EpetraExt Evaluation objects"

    def setUp(self):
        self.comm = Epetra.PyComm()
        self.map  = Epetra.Map(9*self.comm.NumProc(), 0, self.comm)
        self.v    = Epetra.Vector(self.map)

    def testConstructor0(self):
        "Test EpetraExt Evaluation constructor, no arguments"
        evaluation = EpetraExt.Evaluation()
        self.assertEquals(evaluation.vector, None)
        self.assertEquals(evaluation.type,   None)

    def testConstructor1(self):
        "Test EpetraExt Evaluation constructor, one argument"
        evaluation = EpetraExt.Evaluation(type='exact')
        self.assertEquals(evaluation.vector, None   )
        self.assertEquals(evaluation.type,   'exact')

    def testConstructor2(self):
        "Test EpetraExt Evaluation constructor, two arguments"
        evaluation = EpetraExt.Evaluation(vector=self.v, type='approx_deriv')
        self.failUnless((evaluation.vector == self.v).all())
        self.assertEquals(evaluation.type, 'approx_deriv')

    def testVector(self):
        "Test EpetraExt Evaluation vector property"
        evaluation = EpetraExt.Evaluation()
        self.assertEquals(evaluation.vector, None)
        evaluation.vector = self.v
        self.failUnless((evaluation.vector == self.v).all())

    def testVectorBad(self):
        "Test EpetraExt Evaluation vector property, bad assignment"
        evaluation = EpetraExt.Evaluation()
        self.assertEquals(evaluation.vector, None)
        self.assertRaises(TypeError, evaluation.__setattr__, 'vector', [0,1,2])

    def testType(self):
        "Test EpetraExt Evaluation type property"
        evaluation = EpetraExt.Evaluation()
        self.assertEquals(evaluation.type, None)
        evaluation.type = 'very_approx_deriv'
        self.assertEquals(evaluation.type, 'very_approx_deriv')

    def testTypeBad(self):
        "Test EpetraExt Evaluation type property, bad assignment"
        evaluation = EpetraExt.Evaluation()
        self.assertEquals(evaluation.type, None)
        self.assertRaises(ValueError, evaluation.__setattr__, 'type', 'invalid_string')

####################################################################

class DerivativeSupportTestCase(unittest.TestCase):
    "TestCase class for EpetraExt DerivativeSupport objects"

    def setUp(self):
        pass

    def testConstructor0(self):
        "Test EpetraExt DerivativeSupport constructor, no arguments"
        derivativeSupport = EpetraExt.DerivativeSupport()
        self.assertEquals(derivativeSupport.linearOp,     False)
        self.assertEquals(derivativeSupport.mVByCol,      False)
        self.assertEquals(derivativeSupport.transMVByRow, False)

    def testConstructor1(self):
        "Test EpetraExt DerivativeSupport constructor, one argument"
        derivativeSupport = EpetraExt.DerivativeSupport(mVByCol=True)
        self.assertEquals(derivativeSupport.linearOp,     False)
        self.assertEquals(derivativeSupport.mVByCol,      True )
        self.assertEquals(derivativeSupport.transMVByRow, False)

    def testConstructor2(self):
        "Test EpetraExt DerivativeSupport constructor, two arguments"
        derivativeSupport = EpetraExt.DerivativeSupport(linearOp=True, mVByCol=True)
        self.assertEquals(derivativeSupport.linearOp,     True )
        self.assertEquals(derivativeSupport.mVByCol,      True )
        self.assertEquals(derivativeSupport.transMVByRow, False)

    def testLinearOp(self):
        "Test EpetraExt DerivativeSupport linearOp property"
        derivativeSupport = EpetraExt.DerivativeSupport()
        self.assertEquals(derivativeSupport.linearOp, False)
        derivativeSupport.linearOp = True
        self.assertEquals(derivativeSupport.linearOp, True )

    def testLinearOpBad(self):
        "Test EpetraExt DerivativeSupport linearOp property, bad assignment"
        derivativeSupport = EpetraExt.DerivativeSupport()
        self.assertEquals(derivativeSupport.linearOp, False)
        self.assertRaises(TypeError, derivativeSupport.__setattr__, 'linearOp', 'True')

    def testMVByCol(self):
        "Test EpetraExt DerivativeSupport mVByCol property"
        derivativeSupport = EpetraExt.DerivativeSupport()
        self.assertEquals(derivativeSupport.mVByCol, False)
        derivativeSupport.mVByCol = True
        self.assertEquals(derivativeSupport.mVByCol, True )

    def testMVByColBad(self):
        "Test EpetraExt DerivativeSupport mVByCol property, bad assignment"
        derivativeSupport = EpetraExt.DerivativeSupport()
        self.assertEquals(derivativeSupport.mVByCol, False)
        self.assertRaises(TypeError, derivativeSupport.__setattr__, 'mVByCol', 'True')

    def testTransMVByRow(self):
        "Test EpetraExt DerivativeSupport transMVByRow property"
        derivativeSupport = EpetraExt.DerivativeSupport()
        self.assertEquals(derivativeSupport.transMVByRow, False)
        derivativeSupport.transMVByRow = True
        self.assertEquals(derivativeSupport.transMVByRow, True )

    def testTransMVByRowBad(self):
        "Test EpetraExt DerivativeSupport transMVByRow property, bad assignment"
        derivativeSupport = EpetraExt.DerivativeSupport()
        self.assertEquals(derivativeSupport.transMVByRow, False)
        self.assertRaises(TypeError, derivativeSupport.__setattr__, 'transMVByRow', 'True')

####################################################################

class DerivativePropertiesTestCase(unittest.TestCase):
    "TestCase class for EpetraExt DerivativeProperties objects"

    def setUp(self):
        pass

    def testConstructor0(self):
        "Test EpetraExt DerivativeProperties constructor, no arguments"
        derivativeProperties = EpetraExt.DerivativeProperties()
        self.assertEquals(derivativeProperties.linearity,       'unknown')
        self.assertEquals(derivativeProperties.rank,            'unknown')
        self.assertEquals(derivativeProperties.supportsAdjoint, False    )

    def testConstructor1(self):
        "Test EpetraExt DerivativeProperties constructor, one argument"
        derivativeProperties = EpetraExt.DerivativeProperties(rank='full')
        self.assertEquals(derivativeProperties.linearity,       'unknown')
        self.assertEquals(derivativeProperties.rank,            'full'   )
        self.assertEquals(derivativeProperties.supportsAdjoint, False    )

    def testConstructor3(self):
        "Test EpetraExt DerivativeProperties constructor, three arguments"
        derivativeProperties = EpetraExt.DerivativeProperties(linearity='const',
                                                              rank='deficient',
                                                              supportsAdjoint=True)
        self.assertEquals(derivativeProperties.linearity,       'const'    )
        self.assertEquals(derivativeProperties.rank,            'deficient')
        self.assertEquals(derivativeProperties.supportsAdjoint, True       )

    def testLinearity(self):
        "Test EpetraExt DerivativeProperties linearity property"
        derivativeProperties = EpetraExt.DerivativeProperties()
        self.assertEquals(derivativeProperties.linearity, 'unknown')
        derivativeProperties.linearity = 'nonconst'
        self.assertEquals(derivativeProperties.linearity, 'nonconst')

    def testLinearityBad(self):
        "Test EpetraExt DerivativeProperties linearity property, bad assignment"
        derivativeProperties = EpetraExt.DerivativeProperties()
        self.assertEquals(derivativeProperties.linearity, 'unknown')
        self.assertRaises(ValueError, derivativeProperties.__setattr__, 'linearity',
                          'invalid_string')

    def testRank(self):
        "Test EpetraExt DerivativeProperties rank property"
        derivativeProperties = EpetraExt.DerivativeProperties()
        self.assertEquals(derivativeProperties.rank, 'unknown')
        derivativeProperties.rank = 'full'
        self.assertEquals(derivativeProperties.rank, 'full')

    def testRankBad(self):
        "Test EpetraExt DerivativeProperties rank property, bad assignment"
        derivativeProperties = EpetraExt.DerivativeProperties()
        self.assertEquals(derivativeProperties.rank, 'unknown')
        self.assertRaises(ValueError, derivativeProperties.__setattr__, 'rank',
                          'invalid_string')

    def testSupportsAdjoint(self):
        "Test EpetraExt DerivativeProperties supportsAdjoint property"
        derivativeProperties = EpetraExt.DerivativeProperties()
        self.assertEquals(derivativeProperties.supportsAdjoint, False)
        derivativeProperties.supportsAdjoint = True
        self.assertEquals(derivativeProperties.supportsAdjoint, True )

    def testSupportsAdjointBad(self):
        "Test EpetraExt DerivativeProperties supportsAdjoint property, bad assignment"
        derivativeProperties = EpetraExt.DerivativeProperties()
        self.assertEquals(derivativeProperties.supportsAdjoint, False)
        self.assertRaises(TypeError, derivativeProperties.__setattr__, 'supportsAdjoint',
                          'True')

####################################################################

class DerivativeMultiVectorTestCase(unittest.TestCase):
    "TestCase class for EpetraExt DerivativeMultiVector objects"

    def setUp(self):
        self.comm = Epetra.PyComm()
        self.map  = Epetra.Map(9*self.comm.NumProc(), 0, self.comm)
        self.mv   = Epetra.MultiVector(self.map,2)

    def testConstructor0(self):
        "Test EpetraExt DerivativeMultiVector constructor, no arguments"
        derivativeMultiVector = EpetraExt.DerivativeMultiVector()
        self.assertEquals(derivativeMultiVector.multiVector,  None)
        self.assertEquals(derivativeMultiVector.orientation,  None)
        self.assertEquals(derivativeMultiVector.paramIndexes, None)

    def testConstructor1(self):
        "Test EpetraExt DerivativeMultiVector constructor, one argument"
        derivativeMultiVector = EpetraExt.DerivativeMultiVector(orientation='mv_by_col')
        self.assertEquals(derivativeMultiVector.multiVector,  None       )
        self.assertEquals(derivativeMultiVector.orientation,  'mv_by_col')
        self.assertEquals(derivativeMultiVector.paramIndexes, None       )

    def testConstructor3(self):
        "Test EpetraExt DerivativeMultiVector constructor, three arguments"
        indexes = EpetraExt.tuple_of_int(2, 1, 0)
        derivativeMultiVector = EpetraExt.DerivativeMultiVector(multiVector=self.mv,
                                                                orientation='mv_by_col',
                                                                paramIndexes=indexes)
        self.failUnless((derivativeMultiVector.multiVector == self.mv).all())
        self.assertEquals(derivativeMultiVector.orientation, 'mv_by_col')
        self.assertEquals(derivativeMultiVector.paramIndexes, (2,1,0))

    def testMultiVector(self):
        "Test EpetraExt DerivativeMultiVector multiVector property"
        derivativeMultiVector = EpetraExt.DerivativeMultiVector()
        self.assertEquals(derivativeMultiVector.multiVector, None)
        derivativeMultiVector.multiVector = self.mv
        self.failUnless((derivativeMultiVector.multiVector == self.mv).all())

    def testMultiVectorBad(self):
        "Test EpetraExt DerivativeMultiVector multiVector property, bad assignment"
        derivativeMultiVector = EpetraExt.DerivativeMultiVector()
        self.assertEquals(derivativeMultiVector.multiVector, None)
        self.assertRaises(TypeError, derivativeMultiVector.__setattr__, 'multiVector',
                          [0,1,2])

    def testOrientation(self):
        "Test EpetraExt DerivativeMultiVector orientation property"
        derivativeMultiVector = EpetraExt.DerivativeMultiVector()
        self.assertEquals(derivativeMultiVector.orientation, None)
        derivativeMultiVector.orientation = 'trans_mv_by_row'
        self.assertEquals(derivativeMultiVector.orientation, 'trans_mv_by_row')

    def testOrientationBad(self):
        "Test EpetraExt DerivativeMultiVector orientation property, bad assignment"
        derivativeMultiVector = EpetraExt.DerivativeMultiVector()
        self.assertEquals(derivativeMultiVector.orientation, None)
        self.assertRaises(ValueError, derivativeMultiVector.__setattr__,
                          'orientation', 'invalid_string')

    def testParamIndexes(self):
        "Test EpetraExt DerivativeMultiVector paramIndexes property"
        derivativeMultiVector = EpetraExt.DerivativeMultiVector()
        self.assertEquals(derivativeMultiVector.paramIndexes, None)
        derivativeMultiVector.paramIndexes = EpetraExt.tuple_of_int(3,4,5,6)
        self.assertEquals(derivativeMultiVector.paramIndexes, (3,4,5,6))

    def testParamIndexesBad(self):
        "Test EpetraExt DerivativeMultiVector paramIndexes property, bad assignment"
        derivativeMultiVector = EpetraExt.DerivativeMultiVector()
        self.assertEquals(derivativeMultiVector.paramIndexes, None)
        self.assertRaises(TypeError, derivativeMultiVector.__setattr__,
                          'paramIndexes', '0,1,2,3,4,5,6')

####################################################################

class DerivativeTestCase(unittest.TestCase):

    def setUp(self):
        self.comm = Epetra.PyComm()
        n = 10*self.comm.NumProc()
        self.map  = Epetra.Map(n, 0, self.comm)
        self.mv   = Epetra.MultiVector(self.map, 4)
        self.dmv  = EpetraExt.DerivativeMultiVector(multiVector=self.mv,
                                                    orientation='mv_by_col')
        self.op   = Epetra.CrsMatrix(Epetra.Copy, self.map, 3)
        for gid in self.map.MyGlobalElements():
            if gid == 0:
                val = ( -2,     1)
                ind = (gid, gid+1)
            elif gid == n-1:
                val = (    1,  -2)
                ind = (gid-1, gid)
            else:
                val = (    1,  -2,     1)
                ind = (gid-1, gid, gid+1)
            self.op.InsertGlobalValues(gid, val, ind)
        self.op.FillComplete()

    def testConstructor0(self):
        "Test EpetraExt Derivative constructor, no arguments"
        deriv = EpetraExt.Derivative()
        self.assertEquals(deriv.operator,              None)
        self.assertEquals(deriv.derivativeMultiVector, None)

    def testConstructor1(self):
        "Test EpetraExt Derivative constructor, one argument"
        deriv = EpetraExt.Derivative(operator=self.op)
        self.failUnless(deriv.operator is self.op)
        self.assertEquals(deriv.derivativeMultiVector, None)

    def testConstructor2(self):
        "Test EpetraExt Derivative constructor, two arguments"
        deriv = EpetraExt.Derivative(operator=self.op,
                                     derivativeMultiVector=self.dmv)
        self.failUnless(deriv.operator              is self.op )
        self.failUnless(deriv.derivativeMultiVector is self.dmv)

    def testOperator(self):
        "Test EpetraExt Derivative operator property"
        deriv = EpetraExt.Derivative()
        self.assertEquals(deriv.operator, None)
        deriv.operator = self.op
        self.failUnless(deriv.operator is self.op)

    def testOperatorBad(self):
        "Test EpetraExt Derivative operator property, bad assignment"
        deriv = EpetraExt.Derivative()
        self.assertEquals(deriv.operator, None)
        self.assertRaises(TypeError, deriv.__setattr__, 'operator', 2009)

    def testDerivativeMultiVector(self):
        "Test EpetraExt Derivative derivativeMultiVector property"
        deriv = EpetraExt.Derivative()
        self.assertEquals(deriv.derivativeMultiVector, None)
        deriv.derivativeMultiVector = self.dmv
        self.failUnless(deriv.derivativeMultiVector is self.dmv)

    def testDerivativeMultiVectorBad(self):
        "Test EpetraExt Derivative derivativeMultiVector property, bad assignment"
        deriv = EpetraExt.Derivative()
        self.assertEquals(deriv.derivativeMultiVector, None)
        self.assertRaises(TypeError, deriv.__setattr__, 'derivativeMultiVector', 1967)

####################################################################

class OutArgsTestCase(unittest.TestCase):
    "TestCase class for EpetraExt OutArgs objects"

    def setUp(self):
        self.comm            = Epetra.PyComm()
        n                    = 5*self.comm.NumProc()
        self.map             = Epetra.Map(n, 0, self.comm)
        self.v               = Epetra.Vector(self.map)
        self.mv              = Epetra.MultiVector(self.map, 4)
        self.evaluation      = EpetraExt.Evaluation(vector=self.v, type='exact')
        self.evaluationTuple = EpetraExt.tuple_of_Evaluation(self.evaluation)
        self.op              = Epetra.CrsMatrix(Epetra.Copy, self.map, 3)
        for gid in self.map.MyGlobalElements():
            if gid == 0:
                val = ( -2,     1)
                ind = (gid, gid+1)
            elif gid == n-1:
                val = (    1,  -2)
                ind = (gid-1, gid)
            else:
                val = (    1,  -2,     1)
                ind = (gid-1, gid, gid+1)
            self.op.InsertGlobalValues(gid, val, ind)
        self.op.FillComplete()
        self.dmv        = EpetraExt.DerivativeMultiVector(multiVector=self.mv,
                                                          orientation='mv_by_col')
        self.deriv      = EpetraExt.Derivative(operator=self.op,
                                               derivativeMultiVector=self.dmv)
        self.dp         = EpetraExt.DerivativeProperties(linearity='const',
                                                         rank='full',
                                                         supportsAdjoint=False)
        self.derivTuple = EpetraExt.tuple_of_Derivative(self.deriv)
        self.dpTuple    = EpetraExt.tuple_of_DerivativeProperties(self.dp)

    def testConstructor0(self):
        "Test EpetraExt OutArgs constructor, no arguments"
        outArgs = EpetraExt.OutArgs()
        self.failUnless(outArgs.description.startswith('WARNING'))
        self.assertEquals(outArgs.g,                   0    )
        self.assertEquals(outArgs.f,                   False)
        self.assertEquals(outArgs.W,                   False)
        self.assertEquals(outArgs.W_properties,        None )
        self.assertEquals(outArgs.DfDp,                0    )
        self.assertEquals(outArgs.DfDp_properties,     None )
        self.assertEquals(outArgs.DgDx,                0    )
        self.assertEquals(outArgs.DgDx_properties,     None )
        self.assertEquals(outArgs.DgDx_dot,            0    )
        self.assertEquals(outArgs.DgDx_dot_properties, None )
        self.assertEquals(outArgs.DgDp,                0    )
        self.assertEquals(outArgs.DgDp_properties,     None )

    def testConstructor1(self):
        "Test EpetraExt OutArgs constructor, one argument"
        outArgs = EpetraExt.OutArgs(f=self.evaluation)
        self.failUnless(outArgs.description.startswith('WARNING'))
        self.assertEquals(outArgs.g,                   0              )
        self.assertEquals(outArgs.f,                   self.evaluation)
        self.assertEquals(outArgs.W,                   False          )
        self.assertEquals(outArgs.W_properties,        None           )
        self.assertEquals(outArgs.DfDp,                0              )
        self.assertEquals(outArgs.DfDp_properties,     None           )
        self.assertEquals(outArgs.DgDx,                0              )
        self.assertEquals(outArgs.DgDx_properties,     None           )
        self.assertEquals(outArgs.DgDx_dot,            0              )
        self.assertEquals(outArgs.DgDx_dot_properties, None           )
        self.assertEquals(outArgs.DgDp,                0              )
        self.assertEquals(outArgs.DgDp_properties,     None           )

    def testConstructor2(self):
        "Test EpetraExt OutArgs constructor, two arguments"
        outArgs = EpetraExt.OutArgs(W=self.op, W_properties=self.dp)
        self.failUnless(outArgs.description.startswith('WARNING'))
        self.assertEquals(outArgs.g,                   0      )
        self.assertEquals(outArgs.f,                   False  )
        self.assertEquals(outArgs.W,                   self.op)
        self.assertEquals(outArgs.W_properties,        self.dp)
        self.assertEquals(outArgs.DfDp,                0      )
        self.assertEquals(outArgs.DfDp_properties,     None   )
        self.assertEquals(outArgs.DgDx,                0      )
        self.assertEquals(outArgs.DgDx_properties,     None   )
        self.assertEquals(outArgs.DgDx_dot,            0      )
        self.assertEquals(outArgs.DgDx_dot_properties, None   )
        self.assertEquals(outArgs.DgDp,                0      )
        self.assertEquals(outArgs.DgDp_properties,     None   )

    def testConstructor3(self):
        "Test EpetraExt OutArgs constructor, three arguments"
        outArgs = EpetraExt.OutArgs(g=self.evaluationTuple,
                                    DgDp=self.derivTuple,
                                    DgDp_properties=self.dpTuple)
        self.failUnless(outArgs.description.startswith('WARNING'))
        self.assertEquals(outArgs.g,                   self.evaluationTuple)
        self.assertEquals(outArgs.f,                   False               )
        self.assertEquals(outArgs.W,                   False               )
        self.assertEquals(outArgs.W_properties,        None                )
        self.assertEquals(outArgs.DfDp,                0                   )
        self.assertEquals(outArgs.DfDp_properties,     None                )
        self.assertEquals(outArgs.DgDx,                0                   )
        self.assertEquals(outArgs.DgDx_properties,     None                )
        self.assertEquals(outArgs.DgDx_dot,            0                   )
        self.assertEquals(outArgs.DgDx_dot_properties, None                )
        self.assertEquals(outArgs.DgDp,                self.derivTuple     )
        self.assertEquals(outArgs.DgDp_properties,     self.dpTuple        )

    def testDescription(self):
        "Test EpetraExt OutArgs description property"
        outArgs = EpetraExt.OutArgs()
        self.failUnless(outArgs.description.startswith('WARNING'))
        outArgs.description = 'Example'
        self.assertEquals(outArgs.description, 'Example')

    def testDescriptionBad(self):
        "Test EpetraExt OutArgs description property, bad assignment"
        outArgs = EpetraExt.OutArgs()
        self.failUnless(outArgs.description.startswith('WARNING'))
        self.assertRaises(TypeError, outArgs.__setattr__, 'description', [0,0.0,'0'])

    def testF(self):
        "Test EpetraExt OutArgs f property"
        outArgs = EpetraExt.OutArgs()
        self.assertEquals(outArgs.f, False)
        outArgs.f = self.evaluation
        self.assertEquals(outArgs.f, self.evaluation)

    def testFBad(self):
        "Test EpetraExt OutArgs f property, bad assignment"
        outArgs = EpetraExt.OutArgs()
        self.assertEquals(outArgs.f, False)
        self.assertRaises(ValueError, outArgs.__setattr__, 'f', None)

    def testG(self):
        "Test EpetraExt OutArgs g property"
        outArgs = EpetraExt.OutArgs()
        self.assertEquals(outArgs.g, 0)
        outArgs.g = self.evaluationTuple
        self.assertEquals(outArgs.g, self.evaluationTuple)

    def testGBad(self):
        "Test EpetraExt OutArgs g property, bad assignment"
        outArgs = EpetraExt.OutArgs()
        self.assertEquals(outArgs.g, 0)
        self.assertRaises(ValueError, outArgs.__setattr__, 'g', -1.0)

    def testW(self):
        "Test EpetraExt OutArgs W property"
        outArgs = EpetraExt.OutArgs()
        self.assertEquals(outArgs.W, False)
        outArgs.W = self.op
        self.assertEquals(outArgs.W, self.op)

    def testWBad(self):
        "Test EpetraExt OutArgs W property, bad assignment"
        outArgs = EpetraExt.OutArgs()
        self.assertEquals(outArgs.W, False)
        self.assertRaises(ValueError, outArgs.__setattr__, 'W', None)

    def testWProperties(self):
        "Test EpetraExt OutArgs W_properties property"
        outArgs = EpetraExt.OutArgs()
        self.assertEquals(outArgs.W_properties, None)
        outArgs.W_properties = self.dp
        self.assertEquals(outArgs.W_properties, self.dp)

    def testWPropertiesBad(self):
        "Test EpetraExt OutArgs W_properties property, bad assignment"
        outArgs = EpetraExt.OutArgs()
        self.assertEquals(outArgs.W, False)
        self.assertRaises(TypeError, outArgs.__setattr__, 'W_properties', 0)

    def testDfDp(self):
        "Test EpetraExt OutArgs DfDp property"
        outArgs = EpetraExt.OutArgs()
        self.assertEquals(outArgs.DfDp, 0)
        outArgs.DfDp = self.derivTuple
        self.assertEquals(outArgs.DfDp, self.derivTuple)

    def testDfDpBad(self):
        "Test EpetraExt OutArgs DfDp property, bad assignment"
        outArgs = EpetraExt.OutArgs()
        self.assertEquals(outArgs.DfDp, 0)
        self.assertRaises(ValueError, outArgs.__setattr__, 'DfDp', 1.0)

    def testDfDpProperties(self):
        "Test EpetraExt OutArgs DfDp_properties property"
        outArgs = EpetraExt.OutArgs()
        self.assertEquals(outArgs.DfDp_properties, None)
        outArgs.DfDp_properties = self.dpTuple
        self.assertEquals(outArgs.DfDp_properties, self.dpTuple)

    def testDfDpPropertiesBad(self):
        "Test EpetraExt OutArgs DfDp_properties property, bad assignment"
        outArgs = EpetraExt.OutArgs()
        self.assertEquals(outArgs.DfDp, 0)
        self.assertRaises(TypeError, outArgs.__setattr__, 'DfDp_properties', 0.0)

    def testDgDx(self):
        "Test EpetraExt OutArgs DgDx property"
        outArgs = EpetraExt.OutArgs()
        self.assertEquals(outArgs.DgDx, 0)
        outArgs.DgDx = self.derivTuple
        self.assertEquals(outArgs.DgDx, self.derivTuple)

    def testDgDxBad(self):
        "Test EpetraExt OutArgs DgDx property, bad assignment"
        outArgs = EpetraExt.OutArgs()
        self.assertEquals(outArgs.DgDx, 0)
        self.assertRaises(ValueError, outArgs.__setattr__, 'DgDx', 1.0)

    def testDgDxProperties(self):
        "Test EpetraExt OutArgs DgDx_properties property"
        outArgs = EpetraExt.OutArgs()
        self.assertEquals(outArgs.DgDx_properties, None)
        outArgs.DgDx_properties = self.dpTuple
        self.assertEquals(outArgs.DgDx_properties, self.dpTuple)

    def testDgDxPropertiesBad(self):
        "Test EpetraExt OutArgs DgDx_properties property, bad assignment"
        outArgs = EpetraExt.OutArgs()
        self.assertEquals(outArgs.DgDx, 0)
        self.assertRaises(TypeError, outArgs.__setattr__, 'DgDx_properties', 'string')

    def testDgDxDot(self):
        "Test EpetraExt OutArgs DgDx_dot property"
        outArgs = EpetraExt.OutArgs()
        self.assertEquals(outArgs.DgDx_dot, 0)
        outArgs.DgDx_dot = self.derivTuple
        self.assertEquals(outArgs.DgDx_dot, self.derivTuple)

    def testDgDxDotBad(self):
        "Test EpetraExt OutArgs DgDx_dot property, bad assignment"
        outArgs = EpetraExt.OutArgs()
        self.assertEquals(outArgs.DgDx_dot, 0)
        self.assertRaises(ValueError, outArgs.__setattr__, 'DgDx_dot', (0,2,4,6))

    def testDgDxDotProperties(self):
        "Test EpetraExt OutArgs DgDx_dot_properties property"
        outArgs = EpetraExt.OutArgs()
        self.assertEquals(outArgs.DgDx_dot_properties, None)
        outArgs.DgDx_dot_properties = self.dpTuple
        self.assertEquals(outArgs.DgDx_dot_properties, self.dpTuple)

    def testDgDxDotPropertiesBad(self):
        "Test EpetraExt OutArgs DgDx_dot_properties property, bad assignment"
        outArgs = EpetraExt.OutArgs()
        self.assertEquals(outArgs.DgDx_dot, 0)
        self.assertRaises(TypeError, outArgs.__setattr__, 'DgDx_dot_properties', [1,3,5,7])

    def testDgDp(self):
        "Test EpetraExt OutArgs DgDp property"
        outArgs = EpetraExt.OutArgs()
        self.assertEquals(outArgs.DgDp, 0)
        outArgs.DgDp = self.derivTuple
        self.assertEquals(outArgs.DgDp, self.derivTuple)

    def testDgDpBad(self):
        "Test EpetraExt OutArgs DgDp property, bad assignment"
        outArgs = EpetraExt.OutArgs()
        self.assertEquals(outArgs.DgDp, 0)
        self.assertRaises(ValueError, outArgs.__setattr__, 'DgDp', {'a':1})

    def testDgDpProperties(self):
        "Test EpetraExt OutArgs DgDp_properties property"
        outArgs = EpetraExt.OutArgs()
        self.assertEquals(outArgs.DgDp_properties, None)
        outArgs.DgDp_properties = self.dpTuple
        self.assertEquals(outArgs.DgDp_properties, self.dpTuple)

    def testDgDpPropertiesBad(self):
        "Test EpetraExt OutArgs DgDp_properties property, bad assignment"
        outArgs = EpetraExt.OutArgs()
        self.assertEquals(outArgs.DgDp, 0)
        self.assertRaises(TypeError, outArgs.__setattr__, 'DgDp_properties', outArgs)

####################################################################

if __name__ == "__main__":

    # Create the test suite object
    suite = unittest.TestSuite()

    # Add the test cases to the test suite
    suite.addTest(unittest.makeSuite(InArgsTestCase               ))
    suite.addTest(unittest.makeSuite(EvaluationTestCase           ))
    suite.addTest(unittest.makeSuite(DerivativeSupportTestCase    ))
    suite.addTest(unittest.makeSuite(DerivativePropertiesTestCase ))
    suite.addTest(unittest.makeSuite(DerivativeMultiVectorTestCase))
    suite.addTest(unittest.makeSuite(DerivativeTestCase           ))
    suite.addTest(unittest.makeSuite(OutArgsTestCase              ))

    # Create a communicator
    comm    = Epetra.PyComm()
    iAmRoot = comm.MyPID() == 0

    # Run the test suite
    if iAmRoot: print("\n**************************\nTesting EpetraExt "
                      "Property\n**************************\n", file=sys.stderr)
    verbosity = options.verbosity * int(iAmRoot)
    result = unittest.TextTestRunner(verbosity=verbosity).run(suite)

    # Compute the total number of errors and failures
    errsPlusFails = comm.SumAll(len(result.errors) + len(result.failures))
    if errsPlusFails == 0 and iAmRoot: print("End Result: TEST PASSED")

    # Some versions of python don't properly delete suite upon exit
    del suite

    # Exit with error/nonerror code
    sys.exit(errsPlusFails)
