#! ${PYTHON_EXECUTABLE}
# -*- python -*-

# @HEADER
# ***********************************************************************
#
#          PyTrilinos: Python Interfaces to Trilinos Packages
#                 Copyright (2014) Sandia Corporation
#
# Under the terms of Contract DE-AC04-94AL85000 with Sandia
# Corporation, the U.S. Government retains certain rights in this
# software.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the Corporation nor the names of the
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Questions? Contact William F. Spotz (wfspotz@sandia.gov)
#
# ***********************************************************************
# @HEADER

#
# System imports
from   __future__ import print_function
from   optparse import *
import sys
import unittest

#
# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-t", "--testharness", action="store_true",
                  dest="testharness", default=False,
                  help="test local build modules; prevent loading system-installed modules")
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
options,args = parser.parse_args()
#
# Under normal usage, simply use 'from PyTrilinos import Epetra'.  For testing,
# we want to be able to control whether we import from the build directory or
# from a system-installed version of PyTrilinos.
from testutil import fromPyTrilinosImport
Epetra = fromPyTrilinosImport('Epetra', options.testharness)
ML     = fromPyTrilinosImport('ML'    , options.testharness)

##########################################################################

class MLSpaceTestCase(unittest.TestCase):
    "TestCase for ML.Space objects"

    def setUp(self):
        self.comm = Epetra.PyComm()
        self.dataname = "testSpace%d.dat" % comm.MyPID()
        self.comm.Barrier()

    def tearDown(self):
        self.comm.Barrier()

    def testConstructor0(self):
        "Test ML.Space default constructor"
        space = ML.Space()
        self.assertEqual(space.GetLabel()[:4], "obj_")
        self.assertEqual(space.GetNumGlobalElements(), 0)
        self.assertEqual(space.GetNumMyElements(), 0)
        self.assertEqual(space.GetOffset(), 0)
        self.assertEqual(space.IsLinear(), False)

    def testConstructor1(self):
        "Test ML.Space (int) constructor"
        numMyEl = 10
        numGlobalEl = numMyEl * self.comm.NumProc()
        space = ML.Space(numGlobalEl)
        self.assertEqual(space.GetLabel()[:4], "obj_")
        self.assertEqual(space.GetNumGlobalElements(), numGlobalEl)
        self.assertEqual(space.GetNumMyElements(), numMyEl)
        self.assertEqual(space.GetOffset(), 10*self.comm.MyPID())
        self.assertEqual(space.IsLinear(), True)

    def testConstructor2(self):
        "Test ML.Space (int,int) constructor"
        numMyEl = self.comm.MyPID() + 5
        n = self.comm.NumProc()
        numGlobalEl = n * (n-1) // 2 + 5*n
        space = ML.Space(numGlobalEl, numMyEl)
        self.assertEqual(space.GetLabel()[:4], "obj_")
        self.assertEqual(space.GetNumGlobalElements(), numGlobalEl)
        self.assertEqual(space.GetNumMyElements(), numMyEl)
        p = self.comm.MyPID()
        self.assertEqual(space.GetOffset(), (p*p + 9*p)/2)
        self.assertEqual(space.IsLinear(), True)

    def testConstructor3(self):
        "Test ML.Space (Epetra.Map) constructor"
        numMyEl = 12
        numGlobalEl = numMyEl * self.comm.NumProc()
        map = Epetra.Map(numGlobalEl, 0, self.comm)
        space = ML.Space(map)
        self.assertEqual(space.GetLabel()[:4], "obj_")
        self.assertEqual(space.GetNumGlobalElements(), numGlobalEl)
        self.assertEqual(space.GetNumMyElements(), numMyEl)
        self.assertEqual(space.GetOffset(), -1)  # distribution not linear
        self.assertEqual(space.IsLinear(), False)

    def testConstructor4(self):
        "Test ML.Space (int, sequence) constructor"
        numMyEl = 8
        numGlobalEl = numMyEl * self.comm.NumProc()
        myGlobalEl = range(self.comm.MyPID(), numGlobalEl, self.comm.NumProc())
        space = ML.Space(numGlobalEl, myGlobalEl)
        self.assertEqual(space.GetLabel()[:4], "obj_")
        self.assertEqual(space.GetNumGlobalElements(), numGlobalEl)
        self.assertEqual(space.GetNumMyElements(), numMyEl)
        self.assertEqual(space.GetOffset(), -1)  # distribution not linear
        self.assertEqual(space.IsLinear(), False)

    def testConstructor5(self):
        "Test ML.Space copy constructor"
        numMyEl = self.comm.MyPID() + 5
        n = self.comm.NumProc()
        numGlobalEl = n * (n-1) // 2 + 5*n
        space1 = ML.Space(numGlobalEl, numMyEl)
        space2 = ML.Space(space1)
        self.assertEqual(space1.GetNumGlobalElements(), space2.GetNumGlobalElements())
        self.assertEqual(space1.GetNumMyElements(),     space2.GetNumMyElements())
        self.assertEqual(space1.GetOffset(),            space2.GetOffset())
        self.assertEqual(space1.IsLinear(),             space2.IsLinear())

    def testSetGetLabel(self):
        "Test ML.Space SetLabel/GetLabel methods"
        space = ML.Space()
        label = "Space"
        space.SetLabel(label)
        self.assertEqual(space.GetLabel(), label)

    def testPrint(self):
        "Test ML.Space Print method"
        # This does not work under MPI on my MacBook Pro yet...
        if not isinstance(self.comm, Epetra.SerialComm): return
        space = ML.Space()
        space.Print(open(self.dataname,"w"))
        data = "\n*** MLAPI::Space ***\n" + \
               "Label               = obj_?\n" + \
               "NumMyElements()     = 0\n" + \
               "NumGlobalElements() = 0\n" + \
               "Offset              = 0\n" + \
               "Distribution is not linear\n\n" + \
               "    ProcID                 LID                 GID\n\n\n"
        result = open(self.dataname,"r").read()
        self.assertEqual(result[  :48], data[  :48])
        self.assertEqual(result[-154:], data[-154:])

    def testStr(self):
        "Test ML.Space __str__ method"
        # This does not work under MPI on my MacBook Pro yet...
        if not isinstance(self.comm, Epetra.SerialComm): return
        space = ML.Space()
        data = "\n*** MLAPI::Space ***\n" + \
               "Label               = obj_?\n" + \
               "NumMyElements()     = 0\n" + \
               "NumGlobalElements() = 0\n" + \
               "Offset              = 0\n" + \
               "Distribution is not linear\n\n" + \
               "    ProcID                 LID                 GID\n\n"
        result = str(space)
        self.assertEqual(result[  :48], data[  :48])
        self.assertEqual(result[-153:], data[-153:])

    def testReshape0(self):
        "Test ML.Space Reshape method, no arguments"
        numMyEl = 10
        numGlobalEl = numMyEl * self.comm.NumProc()
        space = ML.Space(numGlobalEl)
        self.assertEqual(space.GetLabel()[:4], "obj_")
        self.assertEqual(space.GetNumGlobalElements(), numGlobalEl)
        self.assertEqual(space.GetNumMyElements(), numMyEl)
        self.assertEqual(space.GetOffset(), 10*self.comm.MyPID())
        self.assertEqual(space.IsLinear(), True)
        space.Reshape()
        self.assertEqual(space.GetNumGlobalElements(), 0)
        self.assertEqual(space.GetNumMyElements(), 0)
        self.assertEqual(space.GetOffset(), -1)
        self.assertEqual(space.IsLinear(), True)

    def testReshape1(self):
        "Test ML.Space Reshape method, (int) argument"
        space = ML.Space()
        self.assertEqual(space.GetLabel()[:4], "obj_")
        self.assertEqual(space.GetNumGlobalElements(), 0)
        self.assertEqual(space.GetNumMyElements(), 0)
        self.assertEqual(space.GetOffset(), 0)
        self.assertEqual(space.IsLinear(), False)
        numMyEl = 10
        numGlobalEl = numMyEl * self.comm.NumProc()
        space.Reshape(numGlobalEl)
        self.assertEqual(space.GetNumGlobalElements(), numGlobalEl)
        self.assertEqual(space.GetNumMyElements(), numMyEl)
        self.assertEqual(space.GetOffset(), 10*self.comm.MyPID())
        self.assertEqual(space.IsLinear(), True)

    def testReshape2(self):
        "Test ML.Space Reshape method, (int,int) arguments"
        space = ML.Space()
        self.assertEqual(space.GetLabel()[:4], "obj_")
        self.assertEqual(space.GetNumGlobalElements(), 0)
        self.assertEqual(space.GetNumMyElements(), 0)
        self.assertEqual(space.GetOffset(), 0)
        self.assertEqual(space.IsLinear(), False)
        numMyEl = self.comm.MyPID() + 5
        n = self.comm.NumProc()
        numGlobalEl = n * (n-1) // 2 + 5*n
        space.Reshape(numGlobalEl, numMyEl)
        self.assertEqual(space.GetNumGlobalElements(), numGlobalEl)
        self.assertEqual(space.GetNumMyElements(), numMyEl)
        p = self.comm.MyPID()
        self.assertEqual(space.GetOffset(), (p*p + 9*p)/2)
        self.assertEqual(space.IsLinear(), True)

    def testReshape3(self):
        "Test ML.Space Reshape method, (int,sequence) arguments"
        space = ML.Space()
        self.assertEqual(space.GetLabel()[:4], "obj_")
        self.assertEqual(space.GetNumGlobalElements(), 0)
        self.assertEqual(space.GetNumMyElements(), 0)
        self.assertEqual(space.GetOffset(), 0)
        self.assertEqual(space.IsLinear(), False)
        numMyEl = 8
        numGlobalEl = numMyEl * self.comm.NumProc()
        myGlobalEl = range(self.comm.MyPID(), numGlobalEl, self.comm.NumProc())
        space.Reshape(numGlobalEl, myGlobalEl)
        self.assertEqual(space.GetLabel()[:4], "obj_")
        self.assertEqual(space.GetNumGlobalElements(), numGlobalEl)
        self.assertEqual(space.GetNumMyElements(), numMyEl)
        self.assertEqual(space.GetOffset(), -1)  # distribution not linear
        self.assertEqual(space.IsLinear(), False)

    def testEqualTrue(self):
        "Test ML.Space == operator, for equal spaces"
        n = self. comm.NumProc()
        space1 = ML.Space(n*10)
        space2 = ML.Space(space1)
        self.failUnless(space1 == space2)

    def testEqualFalse(self):
        "Test ML.Space == operator, for unequal spaces"
        n = self. comm.NumProc()
        space1 = ML.Space(n*10)
        space2 = ML.Space(n*12)
        self.failIf(space1 == space2)

    def testNotEqualFalse(self):
        "Test ML.Space != operator, for equal spaces"
        n = self. comm.NumProc()
        space1 = ML.Space(n*10)
        space2 = ML.Space(space1)
        self.failIf(space1 != space2)

    def testNotEqualTrue(self):
        "Test ML.Space != operator, for unequal spaces"
        n = self. comm.NumProc()
        space1 = ML.Space(n*10)
        space2 = ML.Space(n*12)
        self.failUnless(space1 != space2)

    def testGetGlobalID(self):
        "Test ML.Space __call__ method to get global ID"
        numMyEl = 8
        numGlobalEl = numMyEl * self.comm.NumProc()
        myGlobalEl = range(self.comm.MyPID(), numGlobalEl, self.comm.NumProc())
        space = ML.Space(numGlobalEl, myGlobalEl)
        for i in range(numMyEl):
            self.assertEqual(space(i), myGlobalEl[i])

    def testGetMyGlobalElements(self):
        "Test ML.Space GetMyGlobalElements method"
        numMyEl = 8
        numGlobalEl = numMyEl * self.comm.NumProc()
        myGlobalEl = range(self.comm.MyPID(), numGlobalEl, self.comm.NumProc())
        space = ML.Space(numGlobalEl, myGlobalEl)
        self.failUnless((space.GetMyGlobalElements() == myGlobalEl).all())

##########################################################################

if __name__ == "__main__":

    # Create the test suite object
    suite = unittest.TestSuite()

    # Add the test cases to the test suite
    suite.addTest(unittest.makeSuite(MLSpaceTestCase))

    # Create a communicator
    comm    = Epetra.PyComm()
    iAmRoot = comm.MyPID() == 0

    # Run the test suite
    if iAmRoot:
        print("\n****************\nTesting ML.Space\n****************\n",
              file=sys.stderr)
    v = options.verbosity * int(iAmRoot)
    result = unittest.TextTestRunner(verbosity=v).run(suite)

    # Compute the total number of errors and failures
    errsPlusFails = comm.SumAll(len(result.errors) + len(result.failures))
    if errsPlusFails == 0 and iAmRoot: print("End Result: TEST PASSED")

    # Some versions of python don't properly delete suite upon exit
    del suite

    # Exit with error/nonerror code
    sys.exit(errsPlusFails)
