#! ${PYTHON_EXECUTABLE}
# -*- python -*-

# @HEADER
# ***********************************************************************
#
#          PyTrilinos: Python Interfaces to Trilinos Packages
#                 Copyright (2014) Sandia Corporation
#
# Under the terms of Contract DE-AC04-94AL85000 with Sandia
# Corporation, the U.S. Government retains certain rights in this
# software.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the Corporation nor the names of the
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Questions? Contact William F. Spotz (wfspotz@sandia.gov)
#
# ***********************************************************************
# @HEADER

#
# System imports
from   __future__ import print_function
import numpy
import sys
import unittest

#
# Parse the command-line arguments
from optparse import *
parser = OptionParser()
parser.add_option("-t", "--testharness", action="store_true",
                  dest="testharness", default=False,
                  help="test local build modules; prevent loading system-installed modules")
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
options,args = parser.parse_args()

#
# Under normal usage, simply use 'from PyTrilinos import Teuchos'.  For testing,
# we want to be able to control whether we import from the build directory or
# from a system-installed version of PyTrilinos.
from testutil import fromPyTrilinosImport
Teuchos = fromPyTrilinosImport('Teuchos', options.testharness)

####################################################################

class ParameterListTestCase(unittest.TestCase):
    "TestCase class for Teuchos.ParameterList"

    ########################################################

    # assertEqual() needs to be redefined to handle comparison of ndarrays and
    # dicts, lists or tuples that contain ndarrays
    def assertEqual(self, obj1, obj2):
        if isinstance(obj1, (dict,Teuchos.ParameterList)):
            self.assertDictsEqual(obj1, obj2)
        elif isinstance(obj1, (list,tuple)) or isinstance(obj2, (list,tuple)):
            self.assertSequenceEqual(obj1, obj2)
        else:
            self.assertTrue(obj1 == obj2)

    def assertDictsEqual(self, dict1, dict2):
        keys1 = list(dict1.keys())
        keys2 = list(dict2.keys())
        keys1.sort()
        keys2.sort()
        self.assertEqual(keys1, keys2)
        for key in keys1:
            self.assertEqual(dict1[key], dict2[key])

    def assertSequenceEqual(self, seq1, seq2):
        self.assertTrue(len(seq1), len(seq2))
        for items in zip(seq1, seq2):
            item0 = items[0]
            item1 = items[1]
            if isinstance(item0, str) and isinstance(item1, bytes):
                item0 = item0.encode('ascii', errors='backslashreplace')
            if isinstance(item1, str) and isinstance(item0, bytes):
                item1 = item1.encode('ascii', errors='backslashreplace')
            self.assertEqual(item0, item1)

    ########################################################

    def setUp(self):
        self.py_version = sys.version_info.major
        self.comm  = Teuchos.DefaultComm.getComm()
        if ('MpiComm' in dir(Teuchos)):
            self.commType = "MPI"
        else:
            self.commType = "Serial"
        self.plist = Teuchos.ParameterList()
        self.name  = "Solver Params"
        self.dict  = {"b" : False,
                      "i" : 2,
                      "f" : 3.14,
                      "d" : {"a":1, "b":2},
                      "s" : "Sandia",
                      "a" : (7, 8, 9),
                      "A" : [0.0, 1.0, 2.718, 3.14],
                      "S" : ["1", "22", "333", "44", "5"]
                      }
        self.fName = "testParameterList%d.dat" % self.comm.getRank()
        self.comm.barrier()

    def tearDown(self):
        self.comm.barrier()

    def testConstructor0(self):
        "Test Teuchos.ParameterList default constructor"
        self.assertTrue(isinstance(self.plist,Teuchos.ParameterList))

    def testConstructor1(self):
        "Test Teuchos.ParameterList string constructor"
        plist = Teuchos.ParameterList(self.name)
        self.assertTrue(isinstance(plist,Teuchos.ParameterList))
        self.assertEqual(plist.name(), self.name)

    def testConstructor2(self):
        "Test Teuchos.ParameterList dictionary constructor"
        d = {"i" : 5,
             "f" : 3.14,
             "s" : "New Mexico"
             }
        plist = Teuchos.ParameterList(d)
        for key in d.keys():
            self.assertEqual(plist.get(key), d[key])

    def testConstructor3(self):
        "Test Teuchos.ParameterList nested dictionary constructor"
        plist = Teuchos.ParameterList(self.dict)
        self.assertEqual(plist, self.dict)

    def testConstructor4(self):
        "Test Teuchos.ParameterList dictionary constructor, bad key"
        d = {"i" : 5,
             "f" : 3.14,
             "s" : "New Mexico",
             1   : "Should fail"
             }
        self.assertRaises(TypeError, Teuchos.ParameterList, d)

    def testConstructor5(self):
        "Test Teuchos.ParameterList dictionary constructor, bad value"
        d = {"i" : 5,
             "f" : 3.14,
             "s" : "New Mexico",
             "b" : None
             }
        self.assertRaises(ValueError, Teuchos.ParameterList, d)

    def testConstructor6(self):
        "Test Teuchos.ParameterList copy constructor"
        self.plist.setParameters(self.dict)
        plist_copy = Teuchos.ParameterList(self.plist)
        self.assertTrue(isinstance(plist_copy,Teuchos.ParameterList))
        self.assertDictsEqual(plist_copy, self.dict)

    def testConstructor7(self):
        "Test Teuchos.ParameterList constructor with bad argument"
        self.assertRaises(ValueError, Teuchos.ParameterList, 2.718)

    def testSetName(self):
        "Test Teuchos.ParameterList name and setName methods"
        self.assertEqual(self.plist.name(), "ANONYMOUS")
        self.plist.setName(self.name)
        self.assertEqual(self.plist.name(), self.name)

    def testSetParameters(self):
        "Test Teuchos.ParameterList setParameters method"
        intName    = "int parameter"
        intValue   = 8
        floatName  = "float parameter"
        floatValue = 3.14
        self.plist.set(intName,  intValue  )
        self.plist.set(floatName,floatValue)
        newList = Teuchos.ParameterList()
        newList.setParameters(self.plist)
        self.assertEqual(newList.get(intName  ), intValue  )
        self.assertEqual(newList.get(floatName), floatValue)

    def testSetInt(self):
        "Test Teuchos.ParameterList set and get methods for an integer"
        name  = "int parameter"
        value = 12
        self.plist.set(name, value)
        self.assertEqual(self.plist.get(name), value)

    def testSetFloat(self):
        "Test Teuchos.ParameterList set and get methods for a float"
        name  = "float parameter"
        value = 12.0
        self.plist.set(name, value)
        self.assertEqual(self.plist.get(name), value)

    def testSetString(self):
        "Test Teuchos.ParameterList set and get methods for a string"
        name  = "string parameter"
        value = "12"
        self.plist.set(name, value)
        self.assertEqual(self.plist.get(name), value)

    def testSetDictionary(self):
        "Test Teuchos.ParameterList set method for a dictionary"
        name = "dict parameter"
        self.plist.set(name, self.dict)
        sublist = self.plist.get(name)
        self.assertTrue(isinstance(sublist, Teuchos.ParameterList))
        for key in self.dict.keys():
            self.assertEqual(sublist.get(key), self.dict[key])
 
    def testSetParameterList(self):
        "Test Teuchos.ParameterList set and get methods for a ParameterList"
        name    = "sublist"
        sublist = Teuchos.ParameterList()
        self.plist.set(name, sublist)
        self.assertTrue(isinstance(self.plist.get(name),
                                   Teuchos.ParameterList))
        self.assertTrue(self.plist.isSublist(name))

    def testSetNone(self):
        "Test Teuchos.ParameterList set method for None"
        self.assertRaises(TypeError, self.plist.set, "bad parameter", None)

    def testSetBadType(self):
        "Test Teuchos.ParameterList set method for an unsupported type"
        self.assertRaises(TypeError, self.plist.set, "bad parameter",
                          self.comm)

    def testSetBadKey(self):
        "Test Teuchos.ParameterList set method with bad key"
        self.assertRaises(TypeError, self.plist.set, 1, "one")

    def testSetParameters1(self):
        "Test Teuchos.ParameterList setParameters method for a dictionary"
        self.plist.setParameters(self.dict)
        self.assertEqual(self.plist, self.dict)

    def testSetParameters2(self):
        "Test Teuchos.ParameterList setParameters method for a ParameterList"
        plist = Teuchos.ParameterList()
        plist.set("int parameter"  , 8)
        plist.set("float parameter", 3.14)
        self.plist.setParameters(plist)
        self.assertEqual(self.plist, plist)

    def testSetParametersBad(self):
        "Test Teuchos.ParameterList setParameters method for unsupported type"
        d = dict(i=5,f=10.0,t=(1,2,self.comm,5,7))
        self.assertRaises(ValueError, self.plist.setParameters, d)

    def testGetDefault(self):
        "Test Teuchos.ParameterList get method using default value"
        default = None
        self.assertEqual(self.plist.get("junk",default), default)

    def testSublistNew(self):
        "Test Teuchos.ParameterList sublist method for new sublist"
        sublist = self.plist.sublist("new")
        self.assertTrue(isinstance(sublist, Teuchos.ParameterList))
        sublist = self.plist.get("new")
        self.assertTrue(isinstance(sublist, Teuchos.ParameterList))

    def testSublistOld(self):
        "Test Teuchos.ParameterList sublist method for existing sublist"
        self.plist.set("old",self.dict)
        sublist = self.plist.sublist("old")
        self.assertTrue(isinstance(sublist, Teuchos.ParameterList))

    def testSublistBad(self):
        "Test Teuchos.ParameterList sublist method for non-sublist"
        self.plist.set("new", 1)
        self.assertRaises(TypeError, self.plist.sublist, "new")

    def testIsParameterTrue(self):
        "Test Teuchos.ParameterList isParameter method existing parameter"
        name = "string parameter"
        self.plist.set(name,"Hello")
        self.assertTrue(self.plist.isParameter(name))

    def testIsParameterFalse(self):
        "Test Teuchos.ParameterList isParameter method nonexisting parameter"
        name = "parameter"
        self.assertEqual(self.plist.isParameter(name), False)

    def testIsSublistTrue(self):
        "Test Teuchos.ParameterList isSublist method for existing sublist"
        name = "sublist"
        self.plist.sublist(name)
        self.assertTrue(self.plist.isSublist(name))

    def testIsSublistFalse1(self):
        "Test Teuchos.ParameterList isSublist method for existing non-sublist parameter"
        name = "string parameter"
        self.plist.set(name,"Hello")
        self.assertEqual(self.plist.isSublist(name), False)

    def testIsSublistFalse2(self):
        "Test Teuchos.ParameterList isSublist method for nonexisting parameter"
        name = "parameter"
        self.assertEqual(self.plist.isSublist(name), False)

    def testPrint0(self):
        "Test Teuchos.ParameterList _print method for empty list"
        # This does not work under MPI on my MacBook Pro yet...
        if self.commType == "MPI": return
        f = open(self.fName, "w")
        self.plist._print(f)
        f.close()
        self.assertEqual(open(self.fName,"r").read(), "[empty list]\n")

    def testPrint1(self):
        "Test Teuchos.ParameterList _print method for non-empty list"
        # This does not work under MPI on my MacBook Pro yet...
        if self.commType == "MPI": return
        names  = ["max its","tolerance"]
        values = [100      , 1e-6      ]
        for i in range(len(names)):
            self.plist.set(names[i], values[i])
        f = open(self.fName, "w")
        self.plist._print(f)
        f.close()
        lines = open(self.fName,"r").readlines()
        for i in range(len(lines)):
            self.assertEqual(lines[i], "%s = %g   [unused]\n" % (names[i], values[i]))

    def testPrint2(self):
        "Test Teuchos.ParameterList _print method for non-empty list and indentation"
        # This does not work under MPI on my MacBook Pro yet...
        if self.commType == "MPI": return
        names  = ["max its","tolerance"]
        values = [100      , 1e-6      ]
        for i in range(len(names)):
            self.plist.set(names[i], values[i])
        f = open(self.fName, "w")
        self.plist._print(f,2)
        f.close()
        lines = open(self.fName,"r").readlines()
        for i in range(len(lines)):
            self.assertEqual(lines[i].strip(), "%s = %g   [unused]" %
                             (names[i], values[i]))

    def testPrint3(self):
        "Test Teuchos.ParameterList _print method for non-empty list, indentation and types"
        # This does not work under MPI on my MacBook Pro yet...
        if self.commType == "MPI": return
        names  = ["max its","tolerance"]
        values = [100      , 1e-6      ]
        types  = ["int"    ,"double"   ]
        for i in range(len(names)):
            self.plist.set(names[i], values[i])
        f = open(self.fName, "w")
        self.plist._print(f,2,True)
        f.close()
        lines = open(self.fName,"r").readlines()
        for i in range(len(lines)):
            self.assertEqual(lines[i].strip(), "%s : %s = %g   [unused]" %
                             (names[i], types[i], values[i]))

    def testUnused(self):
        "Test Teuchos.ParameterList unused method"
        names  = ["s1"   , "s2"   , "s3"         ]
        values = ["Hello", "World", "Albuquerque"]
        for i in range(len(names)):
            self.plist.set(names[i], values[i])
        f = open(self.fName,"w")
        self.plist.unused(f)
        f.close()
        lines = open(self.fName,"r").readlines()
        for i in range(len(lines)):
            self.assertEqual(lines[i],
                             'WARNING: Parameter "%s" %s   [unused] is unused\n' %
                             (names[i], values[i]))

    def testCurrentParametersString(self):
        "Test Teuchos.ParameterList currentParametersString method"
        # This does not work under MPI on my MacBook Pro yet...
        if self.commType == "MPI": return
        names  = ["max its","tolerance"]
        values = [100      , 1e-6      ]
        types  = ["int"    ,"double"   ]
        result = "  {"
        for i in range(len(names)):
            self.plist.set(names[i], values[i])
            result += '\n    "%s" : %s = %g' % (names[i], types[i], values[i])
        result += "\n  }\n"
        self.assertEqual(self.plist.currentParametersString(), result)

    def testType(self):
        "Test Teuchos.ParameterList type method"
        sublist = Teuchos.ParameterList()
        names  = ["iParm", "fParm", "sParm", "lParm"              ]
        values = [2006   , 2.71828, "Hello", sublist              ]
        types  = [int    , float  , str    , Teuchos.ParameterList]
        for i in range(len(names)):
            self.plist.set(names[i],values[i])
        for i in range(len(names)):
            self.assertEqual(self.plist.type(names[i]), types[i])

    def test__cmp__1(self):
        "Test Teuchos.ParameterList __cmp__ method with dictionary"
        # Note: Python 3 does not support the cmp() function
        if self.py_version < 3:
            d1 = { "a" : 2 }
            d2 = { "a" : 2, "b" : 1 }
            self.assertEqual(cmp(d1,d2), -1)
            plist = Teuchos.ParameterList(d1)
            self.assertEqual(cmp(plist, d1), 0)
            self.assertEqual(cmp(plist, d2), -1)

    def test__cmp__2(self):
        "Test Teuchos.ParameterList __cmp__ method with ParameterList"
        # Note: Python 3 does not support the cmp() function
        if self.py_version < 3:
            d = { "a" : 2, "b" : 1 }
            plist1 = Teuchos.ParameterList(d)
            plist2 = Teuchos.ParameterList(d)
            self.assertEqual(cmp(plist1, plist2), 0)
            plist1.set("c",3)
            self.assertEqual(cmp(plist1, plist2), -1)

    def test__contains__(self):
        "Test Teuchos.ParameterList __contains__ method"
        d = { "a" : 2, "b" : 1 }
        plist = Teuchos.ParameterList(d)
        self.assertEqual("b" in d, True )
        self.assertEqual("c" in d, False)

    def test__eq__1(self):
        "Test Teuchos.ParameterList __eq__ method with dictionary"
        d1 = { "a" : 2 }
        d2 = { "a" : 2, "b" : 1 }
        plist = Teuchos.ParameterList(d1)
        self.assertEqual(plist == d1, True )
        self.assertEqual(plist == d2, False)

    def test__eq__2(self):
        "Test Teuchos.ParameterList __eq__ method with ParameterList"
        d = { "a" : 2, "b" : 1 }
        pdplist = Teuchos.ParameterList(d)
        plist   = Teuchos.ParameterList(pdplist)
        self.assertEqual(pdplist == plist, True )
        plist.set("c",3)
        self.assertEqual(pdplist == plist, False)

    def test__getitem__(self):
        "Test Teuchos.ParameterList __getitem__ method"
        plist = Teuchos.ParameterList(self.dict)
        for key in plist.asDict():
            value1 = plist[key]
            value2 = plist.get(key)
            if (isinstance(value1, numpy.ndarray) and
                isinstance(value2, numpy.ndarray)):
                self.assertTrue((value1 == value2).all())
            else:
                self.assertEqual(value1, value2)

    def test__getitem__bad1(self):
        "Test Teuchos.ParameterList __getitem__ method for nonexisting parameter"
        plist = Teuchos.ParameterList(self.dict)
        self.assertRaises(KeyError, plist.__getitem__, "c")

    def test__getitem__bad2(self):
        "Test Teuchos.ParameterList __getitem__ method for bad key"
        plist = Teuchos.ParameterList(self.dict)
        self.assertRaises(TypeError, plist.__getitem__, 20)

    def test__len__(self):
        "Test Teuchos.ParameterList __len__ method"
        plist = Teuchos.ParameterList(self.dict)
        self.assertEqual(len(plist), len(self.dict))

    def test__ne__1(self):
        "Test Teuchos.ParameterList __ne__ method with dictionary"
        d1 = { "a" : 2 }
        d2 = { "a" : 2, "b" : 1 }
        plist = Teuchos.ParameterList(d1)
        self.assertEqual(plist != d1, False)
        self.assertEqual(plist != d2, True )

    def test__ne__2(self):
        "Test Teuchos.ParameterList __ne__ method with ParameterList"
        d = { "a" : 2, "b" : 1 }
        plist1 = Teuchos.ParameterList(d)
        plist2 = Teuchos.ParameterList(plist1)
        self.assertEqual(plist1 != plist2, False)
        plist1.set("c",3)
        self.assertEqual(plist1 != plist2, True )

    def test__repr__(self):
        "Test Teuchos.ParameterList __repr__ method"
        plist = Teuchos.ParameterList(self.dict)
        r = "Teuchos." + repr(plist)
        r = r.replace("array","numpy.array")
        d = eval(r)
        self.assertTrue(isinstance(d, Teuchos.ParameterList))

    def test__setitem__1(self):
        "Test Teuchos.ParameterList __setitem__ method"
        self.plist[self.name] = 2006
        self.assertEqual(self.plist.get(self.name), 2006)

    def test__setitem__2(self):
        "Test Teuchos.ParameterList __setitem__ method for a dictionary"
        self.plist[self.name] = self.dict
        self.assertEqual(isinstance(self.plist.get(self.name),
                                    Teuchos.ParameterList), True)

    def test__setitem__3(self):
        "Test Teuchos.ParameterList __setitem__ method for a ParameterList"
        plist = Teuchos.ParameterList()
        self.plist[self.name] = plist
        self.assertTrue(isinstance(self.plist.get(self.name),
                                   Teuchos.ParameterList))

    def test__setitem__bad1(self):
        "Test Teuchos.ParameterList __setitem__ method for bad key"
        self.assertRaises(TypeError, self.plist.__setitem__, 0, "Hello")

    def test__setitem__bad2(self):
        "Test Teuchos.ParameterList __setitem__ method for bad value"
        self.assertRaises(TypeError, self.plist.__setitem__, "Hello", (9,slice(4),1))

    def test__str__(self):
        "Test Teuchos.ParameterList __str__ method"
        # This does not work under MPI on my MacBook Pro yet...
        #if self.commType == "MPI": return
        plist = Teuchos.ParameterList(self.dict)
        s = str(plist)
        s = s.replace("array","numpy.array")
        #s = s.replace("dtype=","dtype=numpy.")
        d = eval(s)
        self.assertTrue(isinstance(d, dict))

    def testAsDict(self):
        "Test Teuchos.ParameterList asDict method"
        plist = Teuchos.ParameterList(self.dict)
        self.assertDictsEqual(plist.asDict(), self.dict)

    def testItems(self):
        "Test Teuchos.ParameterList items method"
        plist = Teuchos.ParameterList(self.dict)
        self.assertDictsEqual(plist, self.dict)

    def testKeys(self):
        "Test Teuchos.ParameterList keys method"
        plist = Teuchos.ParameterList(self.dict)
        keys1 = list(plist.keys())
        keys2 = list(self.dict.keys())
        keys1.sort()
        keys2.sort()
        self.assertEqual(keys1, keys2)

    def testValues(self):
        "Test Teuchos.ParameterList values method"
        plist = Teuchos.ParameterList(self.dict)
        keys1 = list(plist.keys())
        keys2 = list(self.dict.keys())
        values1 = list(plist.values())
        values2 = list(self.dict.values())
        for key in keys1:
            i1 = keys1.index(key)
            i2 = keys2.index(key)
            self.assertEqual(values1[i1], values2[i2])

    def testIteritems(self):
        "Test Teuchos.ParameterList iteritems method"
        self.plist.setParameters(self.dict)
        items = self.dict.items()
        for i in self.plist.iteritems():
            if not isinstance(i[1], numpy.ndarray):
                self.assertTrue(i in items)

    def testIterkeys(self):
        "Test Teuchos.ParameterList iterkeys method"
        self.plist.setParameters(self.dict)
        keys = self.dict.keys()
        for i in self.plist.iterkeys():
            self.assertTrue(i in keys)

    def testItervalues(self):
        "Test Teuchos.ParameterList itervalues method"
        self.plist.setParameters(self.dict)
        values = self.dict.values()
        for i in self.plist.itervalues():
            if not isinstance(i, numpy.ndarray):
                self.assertTrue(i in values)

    def testUpdate1(self):
        "Test Teuchos.ParameterList update method for a ParameterList"
        intName    = "int parameter"
        intValue   = 8
        floatName  = "float parameter"
        floatValue = 3.14
        self.plist.set(intName,  intValue  )
        self.plist.set(floatName,floatValue)
        newList = Teuchos.ParameterList()
        newList.update(self.plist)
        self.assertEqual(newList.get(intName  ), intValue  )
        self.assertEqual(newList.get(floatName), floatValue)

    def testUpdate2(self):
        "Test Teuchos.ParameterList update method for a dictionary"
        self.plist.update(self.dict)
        self.assertEqual(self.plist, self.dict)

    def testUpdateBad(self):
        "Test Teuchos.ParameterList update method for unsupported type"
        d = dict(i=5,f=10.0,t=(None,self.comm,slice(9)))
        self.assertRaises(ValueError, self.plist.update, d)

    def test__iter__(self):
        "Test Teuchos.ParameterList __iter__ method"
        values = range(10)
        for i in values:
            self.plist.set(str(i), i)
        keys = self.plist.keys()
        for p in self.plist:        # This invokes the __iter__ method
            self.assertTrue(p in keys)

####################################################################

if __name__ == "__main__":

    # Create the test suite object
    suite = unittest.TestSuite()

    # Add the test cases to the test suite
    suite.addTest(unittest.makeSuite(ParameterListTestCase))

    # Create a communicator
    comm    = Teuchos.DefaultComm.getComm()
    iAmRoot = comm.getRank() == 0

    # Run the test suite
    if iAmRoot:
        print("\n*****************************\nTesting Teuchos.ParameterList\n"
              "*****************************\n", file=sys.stderr)
    v = options.verbosity * int(iAmRoot)
    result = unittest.TextTestRunner(verbosity=v).run(suite)

    # Compute the total number of errors and failures
    errsPlusFails = comm.reduceAll(Teuchos.REDUCE_SUM,
                                   len(result.errors) + len(result.failures))
    if errsPlusFails == 0 and iAmRoot: print("End Result: TEST PASSED")

    # Some versions of python don't properly delete suite upon exit
    del suite

    # Exit with error/nonerror code
    sys.exit(errsPlusFails)
