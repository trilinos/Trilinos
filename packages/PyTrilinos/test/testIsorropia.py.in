#! ${PYTHON_EXECUTABLE}
# -*- python -*-

# @HEADER
# ***********************************************************************
#
#          PyTrilinos: Python Interfaces to Trilinos Packages
#                 Copyright (2014) Sandia Corporation
#
# Under the terms of Contract DE-AC04-94AL85000 with Sandia
# Corporation, the U.S. Government retains certain rights in this
# software.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the Corporation nor the names of the
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Questions? Contact William F. Spotz (wfspotz@sandia.gov)
#
# ***********************************************************************
# @HEADER

#
# System imports
from   __future__ import print_function
from   optparse   import *
import sys
from   types      import *
import unittest

from testutil import fromPyTrilinosImport
Epetra      = fromPyTrilinosImport('Epetra'     , True)
Isorropia   = fromPyTrilinosImport('Isorropia'  , True)
Teuchos     = fromPyTrilinosImport('Teuchos'    , True)

################################################################################

class PartitionerTestCase(unittest.TestCase):
    "TestCase for Isorropia.Partitioner"

    def setUp(self):
        nRows = 10
        self.pList = Teuchos.ParameterList()
        self.pList.set("partitioning method", "cyclic")
        self.sublist = self.pList.sublist("Zoltan")
        self.sublist.set("debug_level", "0")
        self.quiet = {"debug_level": "0"}
        self.pDictionary = {"partitioning method": "cyclic",
                            "Zoltan": self.quiet}
        self.map = Epetra.Map(nRows, 0, comm)
        self.crsg = buildGraph(comm, comm.NumProc()*10)
        self.part = Isorropia.Epetra.Partitioner(self.crsg, self.pList)
        self.costs = Isorropia.Epetra.CostDescriber()

    def testAlwaysPasses(self):
        """
        Test Isorropia.alwaysPasses
        """
        self.assertEquals(0, 0.0)

    def testConstructor0(self):
        """
        Test Partitioner(Teuchos::RCP<const Epetra_CrsGraph> input_graph,
			 const Teuchos::ParameterList& paramlist,
			 bool compute_partitioning_now)
        """
        part = Isorropia.Epetra.Partitioner(self.crsg, self.pList, True)
        self.failUnless(isinstance(part, Isorropia.Epetra.Partitioner))
        part = Isorropia.Epetra.Partitioner(self.crsg, self.pDictionary, True)
        self.failUnless(isinstance(part, Isorropia.Epetra.Partitioner))

    def testConstructor1(self):
        """
        Test Partitioner(Teuchos::RCP<const Epetra_CrsGraph> input_graph,
			 Teuchos::RCP<CostDescriber> costs,
			 const Teuchos::ParameterList& paramlist,
			 bool compute_partitioning_now)
        """
        part = Isorropia.Epetra.Partitioner(self.crsg, self.costs, self.pList, True)
        self.failUnless(isinstance(part, Isorropia.Epetra.Partitioner))

    def testConstructor2(self):
        """
        Test Partitioner(Teuchos::RCP<const Epetra_CrsGraph> input_graph,
                         Teuchos::RCP<const Epetra_MultiVector> coords,
			 const Teuchos::ParameterList& paramlist,
			 bool compute_partitioning_now)
        """
        coords = Epetra.MultiVector(self.map, 2, True)
        part = Isorropia.Epetra.Partitioner(self.crsg, coords, self.pList, True)
        self.failUnless(isinstance(part, Isorropia.Epetra.Partitioner))

    def testCreateNewMap(self):
        """
        Test createNewMap()
        """
        ## Don't actually do any partitioning
        part = Isorropia.Epetra.Partitioner(self.crsg, {"partitioning method": "block",
                                                        "Zoltan": self.quiet}, False)
        newMap = part.createNewMap()
        self.failUnless(newMap.IsOneToOne())
        myElems = newMap.MyGlobalElements()
        for elem in myElems:
            self.failUnless(elem // 10 == comm.MyPID())

    def testCyclicPartition(self):
        """
        Test Cyclic 1D Partitioning, relies on createNewMap()
        """
        part = Isorropia.Epetra.Partitioner(self.crsg, self.pList, True)
        newMap = part.createNewMap()
        self.failUnless(newMap.IsOneToOne())
        myElems = newMap.MyGlobalElements()
        for elem in myElems:
            self.failUnless(elem % comm.NumProc() == comm.MyPID())

    # As written, this will fail if the random partition is cyclic. However, it
    # appears that the random partitioning uses the same seed every time, in
    # which case it should pass every time, or fail every time (the small cases
    # I've tested don't fail, and as numProc() grows the probability of randomly
    # partitioning as cyclic drops quickly)
    def testRepartitioning(self):
        """
        Test compute(True) forces repartitioning, relies on createNewMap()
        """
        part = Isorropia.Epetra.Partitioner(self.crsg, {"partitioning method": "random",
                                                        "Zoltan": self.quiet}, True)
        newMap = part.createNewMap()
        myFirstElems = newMap.MyGlobalElements()
        part.setParameters({"partitioning method": "cyclic", "Zoltan": self.quiet})
        part.compute(True)
        newMap = part.createNewMap()
        isEqual = True
        newElems = newMap.MyGlobalElements()
        if len(myFirstElems) != len(newElems):
            isEqual = False
        for i in range(len(myFirstElems)):
            if isEqual and myFirstElems[i] != newElems[i]:
                isEqual = False

        if isEqual == True and comm.NumProc() != 1:
                self.failUnless(1 == 0)
        
        
        

#    def testAddParameterWithValue(self):
#        "Test LOCA.ParameterVector addParameter method with given value"
#        self.assertEquals(self.pv.getValue("One"), 1.0)

################################################################################

def buildGraph(comm, nRows):
    map = Epetra.Map(nRows, 0, comm)
    graph = Epetra.CrsGraph(Epetra.Copy, map, 3)
    for gid in map.MyGlobalElements():
        if gid == 0:
            indices = [0, 1]
        elif gid == nRows-1:
            indices = [nRows-2, nRows-1]
        else:
            indices = [gid-1, gid, gid+1]
        graph.InsertGlobalIndices(gid, indices)
    graph.FillComplete()
    return graph

if __name__ == "__main__":
    
    comm    = Epetra.PyComm()
    iAmRoot = comm.MyPID() == 0
    
    # Create the test suite object
    suite = unittest.TestSuite()
    
    # Add the test cases to the test suite
    suite.addTest(unittest.makeSuite( PartitionerTestCase ))
    
    # Run the test suite
    if iAmRoot:
        print("\n****************************\nTesting Isorropia.Partitioner\n"
              "****************************\n", file=sys.stderr)
    verbosity = 2 * int(iAmRoot)
    result = unittest.TextTestRunner(verbosity=verbosity).run(suite)

    # Compute the total number of errors and failures
    errsPlusFails = len(result.errors) + len(result.failures)
    if errsPlusFails == 0 and iAmRoot: print("End Result: TEST PASSED")

    # Some versions of python don't properly delete suite upon exit
    del suite

    # Exit with error/nonerror code
    sys.exit(errsPlusFails)
