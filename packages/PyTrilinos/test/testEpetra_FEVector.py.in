#! ${PYTHON_EXECUTABLE}
# -*- python -*-

# @HEADER
# ***********************************************************************
#
#          PyTrilinos: Python Interfaces to Trilinos Packages
#                 Copyright (2014) Sandia Corporation
#
# Under the terms of Contract DE-AC04-94AL85000 with Sandia
# Corporation, the U.S. Government retains certain rights in this
# software.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the Corporation nor the names of the
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Questions? Contact William F. Spotz (wfspotz@sandia.gov)
#
# ***********************************************************************
# @HEADER

#
# System imports
from   __future__ import print_function
from   numpy      import *
import sys
import unittest

#
# Parse the command-line arguments
from optparse import *
parser = OptionParser()
parser.add_option("-t", "--testharness", action="store_true",
                  dest="testharness", default=False,
                  help="test local build modules; prevent loading system-installed modules")
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
options,args = parser.parse_args()
#
# Under normal usage, simply use 'from PyTrilinos import Epetra'.  For testing,
# we want to be able to control whether we import from the build directory or
# from a system-installed version of PyTrilinos.
from testutil import fromPyTrilinosImport
Epetra = fromPyTrilinosImport('Epetra', options.testharness)

##########################################################################

class EpetraFEVectorTestCase(unittest.TestCase):
    "TestCase class for FEVector objects"

    def setUp(self):
        self.length      = 9
        self.scale       = 1.0 / (self.length-1)
        self.comm        = Epetra.PyComm()
        self.map         = Epetra.Map(self.length*self.comm.NumProc(),0,self.comm)
        self.numPyArray1 = arange(self.length) * self.scale
        self.numPyArray2 = array([0,-1,2.17,-3.14,4,-5,6,-7,6.28])
        
    def tearDown(self):
        self.comm.Barrier()

    def testConstructor01(self):
        "Test Epetra.FEVector (BlockMap,bool) constructor"
        ev = Epetra.FEVector(self.map,1,True)
        self.assertEquals(ev.Label(),        "Epetra::MultiVector"     )
        self.assertEquals(ev.NumVectors(),   1                         )
        self.assertEquals(ev.MyLength(),     self.length               )
        self.assertEquals(ev.GlobalLength(), self.length*comm.NumProc())
        self.assertEquals((ev == 0.0).all(), True                      )

    def testConstructor02(self):
        "Test Epetra.FEVector (BlockMap) constructor"
        ev = Epetra.FEVector(self.map,1)
        self.assertEquals(ev.Label(),        "Epetra::MultiVector"     )
        self.assertEquals(ev.NumVectors(),   1                         )
        self.assertEquals(ev.MyLength(),     self.length               )
        self.assertEquals(ev.GlobalLength(), self.length*comm.NumProc())

    def testConstructor03(self):
        "Test Epetra.FEVector copy constructor"
        ev1 = Epetra.FEVector(self.map,1)
        ev2 = Epetra.FEVector(ev1)
        self.assertEquals(ev2.Label(),        "Epetra::MultiVector")
        self.assertEquals(ev2.NumVectors(),   ev1.NumVectors()     )
        self.assertEquals(ev2.MyLength(),     ev1.MyLength()       )
        self.assertEquals(ev2.GlobalLength(), ev1.GlobalLength()   )
        for i in range(len(ev1)):
            self.assertEquals(ev1[0,i], ev2[0,i])

    def notestReplaceMap1(self):
        "Test Epetra.FEVector ReplaceMap method with good map"
        blockMap = Epetra.BlockMap(3*self.comm.NumProc(),3,0,self.comm)
        ev = Epetra.FEVector(self.map,1)
        result = ev.ReplaceMap(blockMap)
        self.assertEquals(result, 0)
        newMap = ev.Map()
        self.assertEquals(newMap.ElementSize(), blockMap.ElementSize())

    def testReplaceMap2(self):
        "Test Epetra.FEVector ReplaceMap method with bad map"
        blockMap = Epetra.BlockMap(2*self.comm.NumProc(),5,0,self.comm)
        ev = Epetra.FEVector(self.map,1)
        result = ev.ReplaceMap(blockMap)
        self.assertEquals(result, -1)
        newMap = ev.Map()
        self.assertEquals(newMap.ElementSize(), self.map.ElementSize())

    def testReplaceGlobalValue1(self):
        "Test Epetra.FEVector ReplaceGlobalValue method"
        ev = Epetra.FEVector(self.map,1)
        ev[0,:] = self.numPyArray1
        gid = 4
        lid = self.map.LID(gid)
        self.assertEquals(ev[0,gid], 0.5)
        result = ev.ReplaceGlobalValue(gid,0,5.0)
        if lid >= 0:
            self.assertEquals(result, 0)
            self.assertEquals(ev[0,lid], 5.0)
        else:
            self.assertEquals(result, 1)

    def testReplaceGlobalValues1(self):
        "Test Epetra.FEVector ReplaceGlobalValues method"
        ev = Epetra.FEVector(self.map,1)
        ev[:0,] = self.numPyArray1
        gids = [2,3,6]
        lids = [self.map.LID(gid) for gid in gids]
        result = ev.ReplaceGlobalValues(gids,[2.2,3.3,6.6])
        for i in range(len(gids)):
            gid = gids[i]
            lid = lids[i]
            self.assertEquals(result, 0)
            if lid >= 0:
                self.assertAlmostEquals(ev[0,lid], 1.1*gid)

    def testReplaceMyValue1(self):
        "Test Epetra.FEVector ReplaceMyValue method"
        ev = Epetra.FEVector(self.map,1)
        ev[0,:] = self.numPyArray1
        lid = 4
        self.assertEquals(ev[0,lid], 0.5)
        result = ev.ReplaceMyValue(lid,0,5.0)
        self.assertEquals(result, 0)
        self.assertEquals(ev[0,lid], 5.0)

    def testSumIntoGlobalValue1(self):
        "Test Epetra.FEVector SumIntoGlobalValue method"
        ev = Epetra.FEVector(self.map,1)
        ev[0,:] = self.numPyArray1
        gid = 4
        lid = self.map.LID(gid)
        self.assertEquals(ev[0,gid], 0.5)
        result = ev.SumIntoGlobalValue(gid,0,0.5)
        if lid >= 0:
            self.assertEquals(result, 0)
            self.assertEquals(ev[0,lid], 1.0)
        else:
            self.assertEquals(result, 1)

    def testSumIntoGlobalValues1(self):
        "Test Epetra.FEVector SumIntoGlobalValues method"
        ev = Epetra.FEVector(self.map,1)
        ev[0,:] = self.numPyArray1
        gids = [2,3,6]
        lids = [self.map.LID(gid) for gid in gids]
        result = ev.SumIntoGlobalValues(gids,[2.2,3.3,6.6])
        for i in range(len(gids)):
            gid = gids[i]
            lid = lids[i]
            self.assertEquals(result, 0)
            if lid >= 0:
                self.assertAlmostEquals(ev[0,lid], 0.125*lid+1.1*gid)

    def testSumIntoMyValue1(self):
        "Test Epetra.FEVector SumIntoMyValue method"
        ev = Epetra.FEVector(self.map,1)
        ev[0,:] = self.numPyArray1
        lid = 4
        self.assertEquals(ev[0,lid], 0.5)
        result = ev.SumIntoMyValue(lid,0,0.5)
        self.assertEquals(result, 0)
        self.assertEquals(ev[0,lid], 1.0)

    def testPutScalar(self):
        "Test Epetra.FEVector PutScalar method"
        ev = Epetra.FEVector(self.map,1)
        for i in range(self.map.NumMyPoints()):
            self.assertEquals(ev[0,i], 0.0)
        scalar = 3.14
        ev.PutScalar(scalar)
        for i in range(self.map.NumMyPoints()):
            self.assertEquals(ev[0,i], scalar)

    def testRandom(self):
        "Test Epetra.FEVector Random method"
        ev = Epetra.FEVector(self.map,1)
        scalar = 3.14
        ev.PutScalar(scalar)
        for i in range(self.map.NumMyPoints()):
            self.assertEquals(ev[0,i], scalar)
        ev.Random()
        for i in range(self.map.NumMyPoints()):
            self.assertEquals(ev[0,i]>-1.0, True)
            self.assertEquals(ev[0,i]< 1.0, True)

    def testExtractCopy(self):
        "Test Epetra.FEVector ExtractCopy method"
        ev    = Epetra.FEVector(self.map,1)
        ev[0,:] = self.numPyArray1
        array = ev.ExtractCopy()
        self.assertEquals(type(array), ndarray)
        self.failUnless((ev.array == array).all())
        self.assertEquals(ev.array is array, False)

    def testExtractView(self):
        "Test Epetra.FEVector ExtractView method"
        ev    = Epetra.FEVector(self.map,1)
        ev[0,:] = self.numPyArray1
        array = ev.ExtractView()
        self.assertEquals(type(array), ndarray)
        self.failUnless((ev.array == array).all())
        self.assertEquals(ev.array is array, True)

    def testNumVectors(self):
        "Test Epetra.FEVector NumVectors method"
        ev = Epetra.FEVector(self.map,1)
        self.assertEquals(ev.NumVectors(), 1)

    def testMyLength(self):
        "Test Epetra.FEVector MyLength method"
        ev = Epetra.FEVector(self.map,1)
        ev[0,:] = self.numPyArray1
        self.assertEquals(ev.MyLength(), self.length)

    def testGlobalLength(self):
        "Test Epetra.FEVector GlobalLength method"
        ev = Epetra.FEVector(self.map,1)
        ev[0,:] = self.numPyArray1
        self.assertEquals(ev.GlobalLength(), self.length*self.comm.NumProc())

    def testSeed(self):
        "Test Epetra.FEVector Seed method"
        ev   = Epetra.FEVector(self.map,1)
        seed = ev.Seed()
        max  = 2**31 - 1
        self.assertEquals(seed>0,   True)
        self.assertEquals(seed<max, True)

    def testSetSeed1(self):
        "Test Epetra.FEVector SetSeed method"
        ev     = Epetra.FEVector(self.map,1)
        seed   = 2005
        result = ev.SetSeed(seed)
        self.assertEquals(result,    0   )
        self.assertEquals(ev.Seed(), seed)

    def testSetSeed2(self):
        "Test Epetra.FEVector SetSeed method with negative seed"
        ev   = Epetra.FEVector(self.map,1)
        seed = -2005
        # The exception type depends on the version of SWIG used to generate the
        # wrapper
        self.assertRaises((TypeError,OverflowError),ev.SetSeed,seed)

    def testPrint(self):
        "Test Epetra.FEVector Print method"
        # This does not work under MPI on my MacBook Pro yet...
        if not isinstance(self.comm, Epetra.SerialComm): return
        output = ""
        if self.comm.MyPID() == 0:
            output += "%10s%14s%20s  \n" % ("MyPID","GID","Value")
        for lid in range(self.length):
            gid = self.map.GID(lid)
            output += "%10d%14d%24d\n" % (self.comm.MyPID(),gid,0)
        ev = Epetra.FEVector(self.map,1)
        filename = "testVector%d.dat" % self.comm.MyPID()
        f = open(filename,"w")
        ev.Print(f)
        f.close()
        self.assertEqual(open(filename,"r").read(), output)

    def testDot(self):
        "Test Epetra.FEVector Dot method"
        map    = Epetra.Map(8*self.comm.NumProc(),0,self.comm)
        array1 = [-1, 2,-3, 4, 5, 1,-8,-7]
        array2 = [ 9, 0,-1,-2,-7,-8, 1, 5]
        ev1    = Epetra.FEVector(map,1)
        ev1[0,:] = array1
        ev2    = Epetra.FEVector(map,1)
        ev2[0,:] = array2
        dot    = ev1.Dot(ev2)
        result = -100*self.comm.NumProc()
        self.assertEqual(dot, result)

#     def testAbs(self):
#         "Test Epetra.FEVector Abs method"
#         ev1 = Epetra.FEVector(self.map,1,self.numPyArray1)
#         ev2 = Epetra.FEVector(self.map,1)
#         self.assertEquals(ev2[0,:],0.0)
#         result = ev2.Abs(ev1)
#         self.assertEquals(result,0)
#         self.assertEquals(ev2[0,:],abs(self.numPyArray1))

    def testReciprocal(self):
        "Test Epetra.FEVector Reciprocal method"
        a    = self.numPyArray1
        a[0] = 1.0  # Don't want to invert zero
        ev1  = Epetra.FEVector(self.map,1)
        ev1[0,:] = a
        ev2  = Epetra.FEVector(self.map,1)
        self.failUnless((ev2.array == 0.0).all())
        result = ev2.Reciprocal(ev1)
        self.assertEquals(result,0)
        self.failUnless((ev2.array == 1.0/a).all())

    def testScale1(self):
        "Test Epetra.FEVector Scale method in-place"
        a  = self.numPyArray2.copy()
        ev = Epetra.FEVector(self.map,1)
        ev[0,:] = self.numPyArray2
        result = ev.Scale(2.0)
        self.assertEquals(result,0)
        self.failUnless((abs(ev.array - 2.0*a) < 1e-10).all())

    def testScale2(self):
        "Test Epetra.FEVector Scale method with replace"
        a   = self.numPyArray1
        ev1 = Epetra.FEVector(self.map,1)
        ev1[0,:] = a
        ev2 = Epetra.FEVector(self.map,1)
        self.failUnless((ev2.array == 0.0).all())
        result = ev2.Scale(pi,ev1)
        self.assertEquals(result,0)
        self.failUnless((ev2.array == pi*a).all())

    def testUpdate1(self):
        "Test Epetra.FEVector Update method with one Vector"
        a   = self.numPyArray1.copy()
        b   = self.numPyArray2.copy()
        ev1 = Epetra.FEVector(self.map,1)
        ev1[0,:] = self.numPyArray1
        ev2 = Epetra.FEVector(self.map,1)
        ev2[0,:] = self.numPyArray2
        result = ev2.Update(2.0,ev1,3.0)
        self.assertEquals(result,0)
        self.failUnless((abs(ev2.array - (2.0*a + 3.0*b)) < 1e-10).all())

    def testUpdate2(self):
        "Test Epetra.FEVector Update method with two Vectors"
        ev0 = Epetra.FEVector(self.map,1)
        ev1 = Epetra.FEVector(self.map,1)
        ev1[0,:] = self.numPyArray1
        ev2 = Epetra.FEVector(self.map,1)
        ev2[0,:] = self.numPyArray2
        result = ev0.Update(2.0,ev1,3.0,ev2,pi)
        self.assertEquals(result,0)
        self.failUnless((ev0.array == 2.0*self.numPyArray1 + 3.0*self.numPyArray2).all())

    def testNorm1(self):
        "Test Epetra.FEVector Norm1 method"
        a       = self.numPyArray1
        ev      = Epetra.FEVector(self.map,1)
        ev[0,:] = a
        result  = sum(self.numPyArray1) * self.comm.NumProc()
        norm1   = ev.Norm1()
        self.assertEquals(norm1, result)

    def testNorm2(self):
        "Test Epetra.FEVector Norm2 method"
        a       = self.numPyArray2
        ev      = Epetra.FEVector(self.map,1)
        ev[0,:] = a
        result  = sqrt(sum(self.numPyArray2*self.numPyArray2) * self.comm.NumProc())
        norm2   = ev.Norm2()
        self.assertEquals(norm2, result)

    def testNormInf(self):
        "Test Epetra.FEVector NormInf method"
        a       = self.numPyArray1
        ev      = Epetra.FEVector(self.map,1)
        ev[0,:] = a
        result  = max(abs(self.numPyArray1))
        normInf = ev.NormInf()
        self.assertEquals(normInf, result)

    def testNormWeighted(self):
        "Test Epetra.FEVector NormWeighted method"
        a       = self.numPyArray2
        ev      = Epetra.FEVector(self.map,1)
        ev[0,:] = a
        wts     = sin(pi*(arange(self.length) + 0.5) / self.length)
        weights = Epetra.FEVector(self.map,1)
        weights[:] = wts
        result  = sqrt(sum((a/wts)**2)/self.length)
        norm    = ev.NormWeighted(weights)
        self.assertEquals(norm, result)

    def testMinValue(self):
        "Test Epetra.FEVector MinValue method"
        a        = self.numPyArray1
        ev       = Epetra.FEVector(self.map,1)
        ev[0,:]  = a
        result   = min(self.numPyArray1)
        minValue = ev.MinValue()
        self.assertEquals(minValue, result)

    def testMaxValue(self):
        "Test Epetra.FEVector MaxValue method"
        a        = self.numPyArray2
        ev       = Epetra.FEVector(self.map,1)
        ev[0,:]  = a
        result   = max(self.numPyArray2)
        maxValue = ev.MaxValue()
        self.assertEquals(maxValue, result)

    def testMeanValue(self):
        "Test Epetra.FEVector MeanValue method"
        a         = self.numPyArray1
        ev        = Epetra.FEVector(self.map,1)
        ev[0,:]   = a
        result    = sum(self.numPyArray1)/self.length
        meanValue = ev.MeanValue()
        self.assertEquals(meanValue, result)

    # def testSetArray(self):
    #     "Test Epetra.FEVector __setattr__ method for 'array'"
    #     ev = Epetra.FEVector(self.map,1)
    #     self.assertRaises(AttributeError, ev.__setattr__, "array", "junk")

##########################################################################

if __name__ == "__main__":

    # Create the test suite object
    suite = unittest.TestSuite()

    # Add the test cases to the test suite
    suite.addTest(unittest.makeSuite(EpetraFEVectorTestCase))

    # Create a communicator
    comm    = Epetra.PyComm()
    iAmRoot = comm.MyPID() == 0

    # Run the test suite
    if iAmRoot:
        print("\n***********************\nTesting Epetra.FEVector\n"
              "***********************\n", file=sys.stderr)
    v = options.verbosity * int(iAmRoot)
    result = unittest.TextTestRunner(verbosity=v).run(suite)

    # Compute the total number of errors and failures
    errsPlusFails = comm.SumAll(len(result.errors) + len(result.failures))
    if errsPlusFails == 0 and iAmRoot: print("End Result: TEST PASSED")

    # Some versions of python don't properly delete suite upon exit
    del suite

    # Exit with error/nonerror code
    sys.exit(errsPlusFails)
