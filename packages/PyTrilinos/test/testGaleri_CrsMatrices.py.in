#! ${PYTHON_EXECUTABLE}
# -*- python -*-

# @HEADER
# ***********************************************************************
#
#          PyTrilinos: Python Interfaces to Trilinos Packages
#                 Copyright (2014) Sandia Corporation
#
# Under the terms of Contract DE-AC04-94AL85000 with Sandia
# Corporation, the U.S. Government retains certain rights in this
# software.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the Corporation nor the names of the
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Questions? Contact William F. Spotz (wfspotz@sandia.gov)
#
# ***********************************************************************
# @HEADER

#
# System imports
from   __future__ import print_function
from   optparse   import *
import sys
import unittest

#
# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-t", "--testharness", action="store_true",
                  dest="testharness", default=False,
                  help="test local build modules; prevent loading system-installed modules")
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
options,args = parser.parse_args()

#
# Under normal usage, simply use 'from PyTrilinos import Epetra'.  For testing,
# we want to be able to control whether we import from the build directory or
# from a system-installed version of PyTrilinos.
from testutil import fromPyTrilinosImport
Epetra = fromPyTrilinosImport('Epetra', options.testharness)
Galeri = fromPyTrilinosImport('Galeri', options.testharness)

##########################################################################

class CreateCrsMatrixTestCase(unittest.TestCase):
    "TestCase for Galeri CreateCrsMatrix function"

    def setUp(self):
        self.comm   = Epetra.PyComm()
        nx = 4 * self.comm.NumProc()
        ny = nz = 16
        mx = self.comm.NumProc()
        my = mz = 1
        self.param1 = {"n"  : nx }
        self.param2 = {"n"  : nx*ny,
                       "nx" : nx,
                       "ny" : ny,
                       "mx" : mx,
                       "my" : my    }
        self.param3 = {"n"  : nx*ny*nz,
                       "nx" : nx,
                       "ny" : ny,
                       "nz" : nz,
                       "mx" : mx,
                       "my" : my,
                       "mz" : mz }
        self.map1   = Galeri.CreateMap("Interlaced", self.comm, self.param1)
        self.map2   = Galeri.CreateMap("Random"    , self.comm, self.param2)
        self.map3   = Galeri.CreateMap("Random"    , self.comm, self.param3)
        self.comm.Barrier()

    def tearDown(self):
        self.comm.Barrier()

    def testDiag(self):
        "Test Galeri CreateCrsMatrix for problem 'Diag'"
        matrix = Galeri.CreateCrsMatrix("Diag", self.map1, self.param1)
        self.assertEqual(isinstance(matrix, Epetra.CrsMatrix), True)

    def testTridiag(self):
        "Test Galeri CreateCrsMatrix for problem 'Tridiag'"
        matrix = Galeri.CreateCrsMatrix("Tridiag", self.map1, self.param1)
        self.assertEqual(isinstance(matrix, Epetra.CrsMatrix), True)

    def testLaplace1D(self):
        "Test Galeri CreateCrsMatrix for problem 'Laplace1D'"
        matrix = Galeri.CreateCrsMatrix("Laplace1D", self.map1, self.param1)
        self.assertEqual(isinstance(matrix, Epetra.CrsMatrix), True)

    def testLaplace1DNeumann(self):
        "Test Galeri CreateCrsMatrix for problem 'Laplace1DNeumann'"
        matrix = Galeri.CreateCrsMatrix("Laplace1DNeumann", self.map1, self.param1)
        self.assertEqual(isinstance(matrix, Epetra.CrsMatrix), True)

    def testCauchy(self):
        "Test Galeri CreateCrsMatrix for problem 'Cauchy'"
        matrix = Galeri.CreateCrsMatrix("Cauchy", self.map1, self.param1)
        self.assertEqual(isinstance(matrix, Epetra.CrsMatrix), True)

    def testFielder(self):
        "Test Galeri CreateCrsMatrix for problem 'Fielder'"
        matrix = Galeri.CreateCrsMatrix("Fielder", self.map1, self.param1)
        self.assertEqual(isinstance(matrix, Epetra.CrsMatrix), True)

    def testHanowa(self):
        "Test Galeri CreateCrsMatrix for problem 'Hanowa'"
        matrix = Galeri.CreateCrsMatrix("Hanowa", self.map1, self.param1)
        self.assertEqual(isinstance(matrix, Epetra.CrsMatrix), True)

    def testHilbert(self):
        "Test Galeri CreateCrsMatrix for problem 'Hilbert'"
        matrix = Galeri.CreateCrsMatrix("Hilbert", self.map1, self.param1)
        self.assertEqual(isinstance(matrix, Epetra.CrsMatrix), True)

    def testJordanBlock(self):
        "Test Galeri CreateCrsMatrix for problem 'JordanBlock'"
        matrix = Galeri.CreateCrsMatrix("JordanBlock", self.map1, self.param1)
        self.assertEqual(isinstance(matrix, Epetra.CrsMatrix), True)

    def testKMS(self):
        "Test Galeri CreateCrsMatrix for problem 'KMS'"
        matrix = Galeri.CreateCrsMatrix("KMS", self.map1, self.param1)
        self.assertEqual(isinstance(matrix, Epetra.CrsMatrix), True)

    def testLehmer(self):
        "Test Galeri CreateCrsMatrix for problem 'Lehmer'"
        matrix = Galeri.CreateCrsMatrix("Lehmer", self.map1, self.param1)
        self.assertEqual(isinstance(matrix, Epetra.CrsMatrix), True)

    def testOnes(self):
        "Test Galeri CreateCrsMatrix for problem 'Ones'"
        matrix = Galeri.CreateCrsMatrix("Ones", self.map1, self.param1)
        self.assertEqual(isinstance(matrix, Epetra.CrsMatrix), True)

    def testPei(self):
        "Test Galeri CreateCrsMatrix for problem 'Pei'"
        matrix = Galeri.CreateCrsMatrix("Pei", self.map1, self.param1)
        self.assertEqual(isinstance(matrix, Epetra.CrsMatrix), True)

    def testRis(self):
        "Test Galeri CreateCrsMatrix for problem 'Ris'"
        matrix = Galeri.CreateCrsMatrix("Ris", self.map1, self.param1)
        self.assertEqual(isinstance(matrix, Epetra.CrsMatrix), True)

    def testCross2D(self):
        "Test Galeri CreateCrsMatrix for problem 'Cross2D'"
        matrix = Galeri.CreateCrsMatrix("Cross2D", self.map2, self.param2)
        self.assertEqual(isinstance(matrix, Epetra.CrsMatrix), True)

    def testBigCross2D(self):
        "Test Galeri CreateCrsMatrix for problem 'BigCross2D'"
        matrix = Galeri.CreateCrsMatrix("BigCross2D", self.map2, self.param2)
        self.assertEqual(isinstance(matrix, Epetra.CrsMatrix), True)

    def testStar2D(self):
        "Test Galeri CreateCrsMatrix for problem 'Star2D'"
        matrix = Galeri.CreateCrsMatrix("Star2D", self.map2, self.param2)
        self.assertEqual(isinstance(matrix, Epetra.CrsMatrix), True)

    def testBigStar2D(self):
        "Test Galeri CreateCrsMatrix for problem 'BigStar2D'"
        matrix = Galeri.CreateCrsMatrix("BigStar2D", self.map2, self.param2)
        self.assertEqual(isinstance(matrix, Epetra.CrsMatrix), True)

    def testLaplace2D(self):
        "Test Galeri CreateCrsMatrix for problem 'Laplace2D'"
        matrix = Galeri.CreateCrsMatrix("Laplace2D", self.map2, self.param2)
        self.assertEqual(isinstance(matrix, Epetra.CrsMatrix), True)

    def testStretched2D(self):
        "Test Galeri CreateCrsMatrix for problem 'Stretched2D'"
        matrix = Galeri.CreateCrsMatrix("Stretched2D", self.map2, self.param2)
        self.assertEqual(isinstance(matrix, Epetra.CrsMatrix), True)

    def testUniFlow2D(self):
        "Test Galeri CreateCrsMatrix for problem 'UniFlow2D'"
        matrix = Galeri.CreateCrsMatrix("UniFlow2D", self.map2, self.param2)
        self.assertEqual(isinstance(matrix, Epetra.CrsMatrix), True)

    def testRecirc2D(self):
        "Test Galeri CreateCrsMatrix for problem 'Recirc2D'"
        matrix = Galeri.CreateCrsMatrix("Recirc2D", self.map2, self.param2)
        self.assertEqual(isinstance(matrix, Epetra.CrsMatrix), True)

    def testBiharmonic2D(self):
        "Test Galeri CreateCrsMatrix for problem 'Biharmonic2D'"
        matrix = Galeri.CreateCrsMatrix("Biharmonic2D", self.map2, self.param2)
        self.assertEqual(isinstance(matrix, Epetra.CrsMatrix), True)

    def testLaplace2DFourthOrder(self):
        "Test Galeri CreateCrsMatrix for problem 'Laplace2DFourthOrder'"
        matrix = Galeri.CreateCrsMatrix("Laplace2DFourthOrder", self.map2, self.param2)
        self.assertEqual(isinstance(matrix, Epetra.CrsMatrix), True)

    def testLaplace3D(self):
        "Test Galeri CreateCrsMatrix for problem 'Laplace3D'"
        matrix = Galeri.CreateCrsMatrix("Laplace3D", self.map3, self.param3)
        self.assertEqual(isinstance(matrix, Epetra.CrsMatrix), True)

##########################################################################

if __name__ == "__main__":

    # Create the test suite object
    suite = unittest.TestSuite()

    # Add the test cases to the test suite
    suite.addTest(unittest.makeSuite(CreateCrsMatrixTestCase))

    # Create a communicator
    comm    = Epetra.PyComm()
    iAmRoot = comm.MyPID() == 0

    # Run the test suite
    if iAmRoot:
        print("\n******************************\n"
              "Testing Galeri.CreateCrsMatrix\n"
              "******************************\n", file=sys.stderr)
    verbosity = options.verbosity * int(iAmRoot)
    result = unittest.TextTestRunner(verbosity=verbosity).run(suite)

    # Compute the total number of errors and failures
    errsPlusFails = comm.SumAll(len(result.errors) + len(result.failures))
    if errsPlusFails == 0 and iAmRoot: print("End Result: TEST PASSED")

    # Some versions of python don't properly delete suite upon exit
    del suite

    # Exit with error/nonerror code
    sys.exit(errsPlusFails)
