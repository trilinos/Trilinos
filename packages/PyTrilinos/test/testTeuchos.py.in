#! ${PYTHON_EXECUTABLE}
# -*- python -*-

# @HEADER
# ***********************************************************************
#
#          PyTrilinos: Python Interfaces to Trilinos Packages
#                 Copyright (2014) Sandia Corporation
#
# Under the terms of Contract DE-AC04-94AL85000 with Sandia
# Corporation, the U.S. Government retains certain rights in this
# software.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the Corporation nor the names of the
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Questions? Contact William F. Spotz (wfspotz@sandia.gov)
#
# ***********************************************************************
# @HEADER

#
# System imports
from   __future__ import print_function
import sys
from   time       import sleep
import unittest

#
# Parse the command-line arguments
#from optparse import *
#parser = OptionParser()
#parser.add_option("-t", "--testharness", action="store_true",
#                  dest="testharness", default=False,
#                  help="test local build modules; prevent loading system-installed modules")
#parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
#                  help="set the verbosity level [default 2]")
#options,args = parser.parse_args()
options = type("Options", (object,), {"testharness":True, "verbosity":2})
#
# Under normal usage, simply use 'from PyTrilinos import Teuchos'.  For testing,
# we want to be able to control whether we import from the build directory or
# from a system-installed version of PyTrilinos.
from testutil import fromPyTrilinosImport
Teuchos = fromPyTrilinosImport('Teuchos', options.testharness, globals(), locals())

####################################################################

class TeuchosTestCase(unittest.TestCase):
    "TestCase class for Teuchos module"

    def testVersion(self):
        "Test Teuchos Teuchos_Version function"
        front   = "Teuchos in Trilinos "
        version = Teuchos.Teuchos_Version()
        self.assertEquals(version[:len(front)], front)

####################################################################

class TeuchosXMLTestCase(unittest.TestCase):
    "TestCase class for Teuchos module XML classes"

    def testXMLObjectConstructor0(self):
        "Test Teuchos XMLObject empty constructor"
        xmlObj = Teuchos.XMLObject()
        self.failUnless(xmlObj.isEmpty())

    def testXMLObjectConstructor1(self):
        "Test Teuchos XMLObject string constructor"
        tag    = "Parameters"
        xmlObj = Teuchos.XMLObject(tag)
        self.failIf(xmlObj.isEmpty())

    def testXMLObjectDeepCopy(self):
        "Test Teuchos XMLObject deepCopy() method"
        tag    = "Parameters"
        xmlObj = Teuchos.XMLObject(tag)
        xmlCpy = xmlObj.deepCopy()
        self.assertEquals(xmlCpy.getTag(), xmlObj.getTag())

    def testXMLObjectDeepCopyEmpty(self):
        "Test Teuchos XMLObject deepCopy() method, empty"
        xmlObj = Teuchos.XMLObject()
        xmlCopy = xmlObj.deepCopy()
        self.assertEquals(type(xmlCopy), Teuchos.XMLObject)

    def testXMLObjectGetTag(self):
        "Test Teuchos XMLObject getTag() method"
        tag    = "Parameters"
        xmlObj = Teuchos.XMLObject(tag)
        self.assertEquals(xmlObj.getTag(), tag)

    def testXMLObjectGetTagEmpty(self):
        "Test Teuchos XMLObject getTag() method, empty"
        xmlObj = Teuchos.XMLObject()
        self.assertRaises(RuntimeError, xmlObj.getTag)

    def testXMLObjectAddAttributeBad(self):
        "Test Teuchos XMLObject addAttribute() method, no tag"
        xmlObj = Teuchos.XMLObject()
        self.assertRaises(RuntimeError, xmlObj.addAttribute, "date", "today")

    def testXMLObjectAttribute(self):
        "Test Teuchos XMLObject add/get attribute() methods"
        xmlObj = Teuchos.XMLObject("tag")
        xmlObj.addAttribute("date","today")
        self.assertEquals(xmlObj.getAttribute("date"), "today")

    def testXMLObjectBadAttribute(self):
        "Test Teuchos XMLObject getAttribute() method, nonexistent"
        xmlObj = Teuchos.XMLObject()
        self.assertRaises(RuntimeError, xmlObj.getAttribute, "date")

    def testXMLObjectHasAttribute(self):
        "Test Teuchos XMLObject hasAttribute() methods"
        xmlObj = Teuchos.XMLObject("tag")
        self.failIf(xmlObj.hasAttribute("date"))
        xmlObj.addAttribute("date","today")
        self.failUnless(xmlObj.hasAttribute("date"))

    def testXMLObjectGetRequired(self):
        "Test Teuchos XMLObject getRequired() method"
        xmlObj = Teuchos.XMLObject("tag")
        self.assertRaises(RuntimeError, xmlObj.getRequired, "date")
        xmlObj.addAttribute("date","today")
        self.assertEquals(xmlObj.getRequired("date"), "today")

    def testXMLObjectGetRequiredDouble(self):
        "Test Teuchos XMLObject getRequiredDouble() method"
        xmlObj = Teuchos.XMLObject("tag")
        self.assertRaises(RuntimeError, xmlObj.getRequiredDouble, "pi")
        xmlObj.addDouble("pi",3.14)
        self.assertEquals(xmlObj.getRequiredDouble("pi"), 3.14)

    def testXMLObjectGetRequiredInt(self):
        "Test Teuchos XMLObject getRequiredInt() method"
        xmlObj = Teuchos.XMLObject("tag")
        self.assertRaises(RuntimeError, xmlObj.getRequiredInt, "year")
        xmlObj.addInt("year",2007)
        self.assertEquals(xmlObj.getRequiredInt("year"), 2007)

    def testXMLObjectGetRequiredBool(self):
        "Test Teuchos XMLObject getRequiredBool() method"
        xmlObj = Teuchos.XMLObject("tag")
        self.assertRaises(RuntimeError, xmlObj.getRequiredBool, "flag")
        xmlObj.addBool("flag",True)
        self.assertEquals(xmlObj.getRequiredBool("flag"), True)

    # This test causes a segfault on the Linux test harness machine
    #def testXMLObjectGetWithDefault(self):
    #    "Test Teuchos XMLObject getWithDefault() method"
    #    xmlObj = Teuchos.XMLObject("tag")
    #    self.assertEquals(xmlObj.getWithDefault("country","USA"), "USA")
    #    xmlObj.addAttribute("country", "Canada")
    #    self.assertEquals(xmlObj.getWithDefault("country","USA"), "Canada")

    def testXMLObjectChild(self):
        "Test Teuchos XMLObject add/get child() methods"
        p = Teuchos.XMLObject("parent")
        self.assertEquals(p.numChildren(), 0)
        #self.assertRaises(RuntimeError, p.getChild, 0)
        c = Teuchos.XMLObject("child")
        p.addChild(c)
        self.assertEquals(p.numChildren(), 1)
        r = p.getChild(0)
        self.assertEquals(r.getTag(), c.getTag())

    def testXMLObjectContent(self):
        "Test Teuchos XMLObject add/get content() methods"
        poem = ["Twas brillig, and the slithy toves",
                "Did gyre and gimble in the wabe:"  ,
                "All mimsy were the borogoves,"     ,
                "And the mome raths outgrabe."       ]
        p = Teuchos.XMLObject("Jabberwocky")
        self.assertEquals(p.numContentLines(), 0)
        #self.assertRaises(RuntimeError, p.getContentLine, 0)
        for i in range(len(poem)):
            p.addContent(poem[i])
            self.assertEquals(p.numContentLines(), i+1)
        for i in range(len(poem)):
            self.assertEquals(p.getContentLine(i), poem[i])

    def testXMLObjectToStringEmpty(self):
        "Test Teuchos XMLObject toString() method, empty"
        xmlObj = Teuchos.XMLObject()
        self.assertRaises(RuntimeError, xmlObj.toString)

    def testXMLObjectHeader(self):
        "Test Teuchos XMLObject header() method"
        xmlObj = Teuchos.XMLObject("header")
        self.assertEquals(xmlObj.header(), "<header>")

    def testXMLObjectTerminatedHeader(self):
        "Test Teuchos XMLObject terminatedHeader() method"
        xmlObj = Teuchos.XMLObject("header")
        self.assertEquals(xmlObj.terminatedHeader(), "<header/>")

    def testXMLObjectFooter(self):
        "Test Teuchos XMLObject footer() method"
        xmlObj = Teuchos.XMLObject("footer")
        self.assertEquals(xmlObj.footer(), "</footer>")

    def testXMLObjectCheckTag(self):
        "Test Teuchos XMLObject checkTag() method"
        xmlObj = Teuchos.XMLObject("tag")
        xmlObj.checkTag("tag")
        self.assertRaises(RuntimeError, xmlObj.checkTag, "junk")

    def testXMLParameterListReaderWriter(self):
        "Test Teuchos XMLParameterList Reader/Writer classes"
        import sys
        dict = { "maxiters"       : 100,
                 "tol"            : 1.0e-6,
                 "preconditioner" : "IC" }
        writer = Teuchos.XMLParameterListWriter()
        reader = Teuchos.XMLParameterListReader()
        # Transform: dict -> XMLObject -> ParameterList
        xmlObj = writer.toXML(dict)
        pList  = reader.toParameterList(xmlObj)
        for parameter in dict:
            value = dict[parameter]
            pType = type(value)
            self.assertEquals(pType(pList[parameter]), value)

####################################################################

class TeuchosInputSourceTestCase(unittest.TestCase):
    "TestCase class for Teuchos module XML InputSource classes"

    def setUp(self):
        self.comm   = Teuchos.DefaultComm.getComm()
        self.params = {"precon" : "ILU",
                       "maxits" : 100,
                       "tol"    : 1.0e-6,
                       "poly"   : {"a" : 1.0, "b" : -0.75}
                       }
        self.file   = "params%d.xml" % self.comm.getRank()
        self.comm.barrier()

    def tearDown(self):
        self.comm.barrier()

    def testFileInputSource(self):
        "Test Teuchos FileInputSource class"
        open(self.file,"w").write(
            str(Teuchos.XMLParameterListWriter().toXML(self.params)))
        source = Teuchos.FileInputSource(self.file)
        xmlObj = source.getObject()
        pList  = Teuchos.XMLParameterListReader().toParameterList(xmlObj)
        # No exceptions? Test passes!

    def testFileInputSourceBad(self):
        "Test Teuchos FileInputSource class for bad input file"
        source = Teuchos.FileInputSource("testTeuchos.py") # Self-ref!
        self.assertRaises(RuntimeError, source.getObject)

    def testStringInputSource(self):
        "Test Teuchos StringInputSource class"
        open(self.file,"w").write(
            str(Teuchos.XMLParameterListWriter().toXML(self.params)))
        source = Teuchos.StringInputSource(open(self.file).read())
        xmlObj = source.getObject()
        pList  = Teuchos.XMLParameterListReader().toParameterList(xmlObj)
        # No exceptions? Test passes!

    def testStringInputSourceBad(self):
        "Test Teuchos StringInputSource class for bad input file"
        source = Teuchos.StringInputSource(open("testTeuchos.py").read()) # Self-ref!
        self.assertRaises(RuntimeError, source.getObject)

####################################################################

class TeuchosTimeTestCase(unittest.TestCase):
    "TestCase class for Teuchos Time class"

    def setUp(self):
        self.name  = "Solver Time"
        self.timer = Teuchos.Time(self.name)
        self.duration = 0.5

    def testConstructor1(self):
        "Test Teuchos Time string constructor"
        self.assertEquals(self.timer.name(), self.name)
        self.failIf(self.timer.isRunning())

    def testConstructor2(self):
        "Test Teuchos Time string,bool constructor"
        timer = Teuchos.Time(self.name, True)
        self.assertEquals(timer.name(), self.name)
        self.failUnless(timer.isRunning())

    def testStartStop(self):
        "Test Teuchos Time start() and stop() methods"
        self.failIf(self.timer.isRunning())
        self.timer.start()
        self.failUnless(self.timer.isRunning())
        self.timer.stop()
        self.failIf(self.timer.isRunning())

    #def testTotalElapsedTime(self):
    #    "Test Teuchos Time totalElapsedTime() method"
    #    self.timer.start()
    #    sleep(self.duration)
    #    self.timer.stop()
    #    self.failUnless(self.timer.totalElapsedTime() >= self.duration*0.9)

    def testReset(self):
        "Test Teuchos Time reset() method"
        self.timer.start()
        sleep(self.duration)
        self.timer.stop()
        self.timer.reset()
        self.assertEquals(self.timer.totalElapsedTime(), 0)

    def testNumCalls(self):
        "Test Teuchos Time numCalls() method"
        self.assertEquals(self.timer.numCalls(), 0)
        self.timer.incrementNumCalls()
        self.assertEquals(self.timer.numCalls(), 1)
        self.timer.incrementNumCalls()
        self.assertEquals(self.timer.numCalls(), 2)
        self.timer.reset()
        self.assertEquals(self.timer.numCalls(), 0)

    #def testWallTime(self):
    #    "Test Teuchos Time wallTime() method"
    #    self.failUnless(self.timer.wallTime() > 2*self.duration*0.9)

####################################################################

if __name__ == "__main__":

    # Create the test suite object
    suite = unittest.TestSuite()

    # Add the test cases to the test suite
    suite.addTest(unittest.makeSuite(TeuchosTestCase))
    suite.addTest(unittest.makeSuite(TeuchosXMLTestCase))
    suite.addTest(unittest.makeSuite(TeuchosInputSourceTestCase))
    suite.addTest(unittest.makeSuite(TeuchosTimeTestCase))

    # Create a communicator
    comm    = Teuchos.DefaultComm.getComm()
    iAmRoot = comm.getRank() == 0

    # Run the test suite
    if iAmRoot:
        print("\n***************\nTesting Teuchos\n***************\n",
              file=sys.stderr)
    v = options.verbosity * int(iAmRoot)
    result = unittest.TextTestRunner(verbosity=v).run(suite)

    # Compute the total number of errors and failures
    errsPlusFails = comm.reduceAll(Teuchos.REDUCE_SUM,
                                   len(result.errors) + len(result.failures))
    if errsPlusFails == 0 and iAmRoot: print("End Result: TEST PASSED")

    # Some versions of python don't properly delete suite upon exit
    del suite

    # Exit with error/nonerror code
    sys.exit(errsPlusFails)
