#! ${PYTHON_EXECUTABLE}
# -*- python -*-

# @HEADER
# ***********************************************************************
#
#          PyTrilinos: Python Interfaces to Trilinos Packages
#                 Copyright (2014) Sandia Corporation
#
# Under the terms of Contract DE-AC04-94AL85000 with Sandia
# Corporation, the U.S. Government retains certain rights in this
# software.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the Corporation nor the names of the
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Questions? Contact William F. Spotz (wfspotz@sandia.gov)
#
# ***********************************************************************
# @HEADER

#
# System imports
from __future__ import print_function
from   numpy    import *
import sys
import unittest

#
# Parse the command-line arguments
from optparse import *
parser = OptionParser()
parser.add_option("-t", "--testharness", action="store_true",
                  dest="testharness", default=False,
                  help="test local build modules; prevent loading system-installed modules")
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
options,args = parser.parse_args()
#
# Under normal usage, simply use 'from PyTrilinos import Epetra'.  For testing,
# we want to be able to control whether we import from the build directory or
# from a system-installed version of PyTrilinos.
from testutil import fromPyTrilinosImport
Epetra = fromPyTrilinosImport('Epetra', options.testharness)

##########################################################################

class EpetraMapTestCase(unittest.TestCase):
    "TestCase class for Map objects"

    def setUp(self):
        self.comm             = Epetra.PyComm()
        self.numProc          = self.comm.NumProc()
        self.myPID            = self.comm.MyPID()
        self.numMyElConst     = 4
        self.numMyEl          = self.numMyElConst + self.myPID
        self.numGlobalElConst = self.numMyElConst * self.numProc
        self.numGlobalEl      = self.comm.SumAll(self.numMyEl)
        self.elSize           = 1
        self.indexBase        = 0
        globalEls             = list(range(self.numGlobalEl))
        globalEls.reverse()  # Force this to be different from the linear distribution
        self.start            = 4*self.myPID + self.myPID*(self.myPID-1) // 2
        self.myGlobalEls      = globalEls[self.start:self.start+self.numMyEl]

        self.map1             = Epetra.Map(self.numGlobalElConst,
                                           self.indexBase,
                                           self.comm)

        self.map2             = Epetra.Map(self.numGlobalEl,
                                           self.numMyEl,
                                           self.indexBase,
                                           self.comm)

        self.map3             = Epetra.Map(self.numGlobalEl,
                                           self.myGlobalEls,
                                           self.indexBase,
                                           self.comm)

        self.comm.Barrier()

    def tearDown(self):
        self.comm.Barrier()

    def testConstructor1(self):
        "Test Epetra.Map uniform, linear constructor"
        self.assertEqual(self.map1.Label(),             "Epetra::Map"        )
        self.assertEqual(self.map1.NumGlobalElements(), self.numGlobalElConst)
        self.assertEqual(self.map1.ElementSize(),       self.elSize          )
        self.assertEqual(self.map1.IndexBase(),         self.indexBase       )

    def testConstructor2(self):
        "Test Epetra.Map nonuniform, linear constructor"
        self.assertEqual(self.map2.Label(),             "Epetra::Map"        )
        self.assertEqual(self.map2.NumGlobalElements(), self.numGlobalEl)
        self.assertEqual(self.map2.NumMyElements(),     self.numMyEl    )
        self.assertEqual(self.map2.ElementSize(),       self.elSize     )
        self.assertEqual(self.map2.IndexBase(),         self.indexBase  )

    def testConstructor3(self):
        "Test Epetra.Map nonuniform, arbitrary constructor"
        self.assertEqual(self.map3.Label(),             "Epetra::Map"        )
        self.assertEqual(self.map3.NumGlobalElements(), self.numGlobalEl)
        self.assertEqual(self.map3.NumMyElements(),     self.numMyEl    )
        self.assertEqual(self.map3.ElementSize(),       self.elSize     )
        self.assertEqual(self.map3.IndexBase(),         self.indexBase  )

    def testConstructor4(self):
        "Test Epetra.Map nonuniform, arbitrary constructor, bad list"
        self.myGlobalEls[-1] = "pi"
        self.assertRaises((TypeError,ValueError), Epetra.Map, self.numGlobalEl,
                          self.myGlobalEls, self.indexBase, self.comm)

    def testConstructor5(self):
        "Test Epetra.Map copy constructor"
        map1 = Epetra.Map(self.map1)
        map2 = Epetra.Map(self.map2)
        map3 = Epetra.Map(self.map3)
        self.assertEqual(self.map1.SameAs(map1), True)
        self.assertEqual(self.map2.SameAs(map2), True)
        self.assertEqual(self.map3.SameAs(map3), True)

    def testRemoteIDList1(self):
        "Test Epetra.Map RemoteIDList method for constant element size"
        gidList  = list(range(self.numGlobalEl))
        gidList.reverse()  # Match the setUp pattern
        pidList  = zeros( self.numGlobalEl)
        lidList  = arange(self.numGlobalEl)
        sizeList = ones(  self.numGlobalEl)
        for p in range(1,self.numProc):
            start  = 4*p + p*(p-1) // 2
            length = 4 + p
            pidList[start:] += 1
            lidList[ start:start+length] = list(range(length))
        result = self.map3.RemoteIDList(gidList)
        self.failUnless((result[0] == pidList ).all())
        self.failUnless((result[1] == lidList ).all())
        self.failUnless((result[2] == sizeList).all())

    def testRemoteIDList2(self):
        "Test Epetra.Map RemoteIDList method for variable element size"
        gidList  = list(range(self.numGlobalEl))
        gidList.reverse()  # Match the setUp pattern
        pidList  = zeros( self.numGlobalEl)
        lidList  = arange(self.numGlobalEl)
        sizeList = ones(  self.numGlobalEl)
        for p in range(1,self.numProc):
            start  = 4*p + p*(p-1) // 2
            length = 4 + p
            pidList[start:] += 1
            lidList[ start:start+length] = list(range(length))
        result = self.map3.RemoteIDList(gidList)
        self.failUnless((result[0] == pidList ).all())
        self.failUnless((result[1] == lidList ).all())
        self.failUnless((result[2] == sizeList).all())

    def testLID(self):
        "Test Epetra.Map LID method"
        for gid in range(self.map3.NumGlobalElements()):
            if gid in self.myGlobalEls:
                lid = self.myGlobalEls.index(gid)
            else:
                lid = -1
            self.assertEqual(self.map3.LID(gid),lid)

    def testGID(self):
        "Test Epetra.Map GID method"
        for lid in range(self.map3.NumMyElements()):
            self.assertEqual(self.map3.GID(lid), self.myGlobalEls[lid])

    def testFindLocalElementID(self):
        "Test Epetra.Map FindLocalElementID method"
        pointID = 0
        for lid in range(self.map3.NumMyElements()):
            result = self.map3.FindLocalElementID(pointID)
            self.assertEqual(result[0], lid)
            self.assertEqual(result[1], 0  )
            pointID += 1

    def testMyGID(self):
        "Test Epetra.Map MyGID method"
        for gid in range(self.map3.NumGlobalElements()):
            if gid in self.myGlobalEls:
                lid = self.myGlobalEls.index(gid)
            else:
                lid = -1
            self.assertEqual(self.map3.MyGID(gid), (lid != -1))

    def testMyLID(self):
        "Test Epetra.Map MyLID method"
        for gid in range(self.map3.NumGlobalElements()):
            if gid in self.myGlobalEls:
                lid = self.myGlobalEls.index(gid)
            else:
                lid = -1
            self.assertEqual(self.map3.MyLID(lid), (lid != -1))

    def testMinAllGID(self):
        "Test Epetra.Map MinAllGID method"
        self.assertEqual(self.map1.MinAllGID(), self.indexBase)
        self.assertEqual(self.map2.MinAllGID(), self.indexBase)
        self.assertEqual(self.map3.MinAllGID(), self.indexBase)

    def testMaxAllGID(self):
        "Test Epetra.Map MaxAllGID method"
        self.assertEqual(self.map1.MaxAllGID(), self.numGlobalElConst-1)
        self.assertEqual(self.map2.MaxAllGID(), self.numGlobalEl     -1)
        self.assertEqual(self.map3.MaxAllGID(), self.numGlobalEl     -1)

    def testMinMyGID(self):
        "Test Epetra.Map MinMyGID method"
        self.assertEqual(self.map1.MinMyGID(), self.myPID*self.numMyElConst)
        self.assertEqual(self.map2.MinMyGID(), self.start                  )
        self.assertEqual(self.map3.MinMyGID(), min(self.myGlobalEls)       )

    def testMaxMyGID(self):
        "Test Epetra.Map MaxMyGID method"
        self.assertEqual(self.map1.MaxMyGID(), (self.myPID+1)*self.numMyElConst-1)
        self.assertEqual(self.map2.MaxMyGID(), self.start+self.numMyEl-1         )
        self.assertEqual(self.map3.MaxMyGID(), max(self.myGlobalEls)             )

    def testMinLID(self):
        "Test Epetra.Map MinLID method"
        self.assertEqual(self.map1.MinLID(), self.indexBase)
        self.assertEqual(self.map2.MinLID(), self.indexBase)
        self.assertEqual(self.map3.MinLID(), self.indexBase)

    def testMaxLID(self):
        "Test Epetra.Map MaxLID method"
        self.assertEqual(self.map1.MaxLID(), self.numMyElConst-1)
        self.assertEqual(self.map2.MaxLID(), self.numMyEl-1     )
        self.assertEqual(self.map3.MaxLID(), self.numMyEl-1     )

    def testNumGlobalElements(self):
        "Test Epetra.Map NumGlobalElements method"
        self.assertEqual(self.map1.NumGlobalElements(), self.numGlobalElConst)
        self.assertEqual(self.map2.NumGlobalElements(), self.numGlobalEl     )
        self.assertEqual(self.map3.NumGlobalElements(), self.numGlobalEl     )

    def testNumMyElements(self):
        "Test Epetra.Map NumMyElements method"
        self.assertEqual(self.map1.NumMyElements(), self.numMyElConst)
        self.assertEqual(self.map2.NumMyElements(), self.numMyEl     )
        self.assertEqual(self.map3.NumMyElements(), self.numMyEl     )

    def testMyGlobalElements(self):
        "Test Epetra.Map MyGlobalElements method"
        result = self.map3.MyGlobalElements()
        self.failUnless((result == self.myGlobalEls).all())

    def testElementSize1(self):
        "Test Epetra.Map ElementSize method"
        self.assertEqual(self.map1.ElementSize(), self.elSize)
        self.assertEqual(self.map2.ElementSize(), self.elSize)
        self.assertEqual(self.map3.ElementSize(), self.elSize)

    def testElementSize2(self):
        "Test Epetra.Map ElementSize method for specified LID"
        for lid in range(self.map1.NumMyElements()):
            self.assertEqual(self.map1.ElementSize(lid), self.elSize)
        for lid in range(self.map2.NumMyElements()):
            self.assertEqual(self.map2.ElementSize(lid), self.elSize)
        for lid in range(self.map3.NumMyElements()):
            self.assertEqual(self.map3.ElementSize(lid), self.elSize)

    def testFirstPointInElement(self):
        "Test Epetra.Map FirstPointInElement method"
        for lid in range(self.map1.NumMyElements()):
            self.assertEqual(self.map1.FirstPointInElement(lid),lid)
        for lid in range(self.map2.NumMyElements()):
            self.assertEqual(self.map2.FirstPointInElement(lid),lid)
        for lid in range(self.map3.NumMyElements()):
            self.assertEqual(self.map3.FirstPointInElement(lid),lid)

    def testIndexBase(self):
        "Test Epetra.Map IndexBase method"
        self.assertEqual(self.map1.IndexBase(), self.indexBase)
        self.assertEqual(self.map2.IndexBase(), self.indexBase)
        self.assertEqual(self.map3.IndexBase(), self.indexBase)

    def testNumGlobalPoints(self):
        "Test Epetra.Map NumGlobalPoints method"
        self.assertEqual(self.map1.NumGlobalPoints(), self.numGlobalElConst)
        self.assertEqual(self.map2.NumGlobalPoints(), self.numGlobalEl     )
        self.assertEqual(self.map3.NumGlobalPoints(), self.numGlobalEl     )

    def testNumMyPoints(self):
        "Test Epetra.Map NumMyPoints method"
        self.assertEqual(self.map1.NumMyPoints(), self.numMyElConst)
        self.assertEqual(self.map2.NumMyPoints(), self.numMyEl     )
        self.assertEqual(self.map3.NumMyPoints(), self.numMyEl     )

    def testMinMyElementSize(self):
        "Test Epetra.Map MinMyElementSize method"
        self.assertEqual(self.map1.MinMyElementSize(), self.elSize)
        self.assertEqual(self.map2.MinMyElementSize(), self.elSize)
        self.assertEqual(self.map3.MinMyElementSize(), self.elSize)

    def testMaxMyElementSize(self):
        "Test Epetra.Map MaxMyElementSize method"
        self.assertEqual(self.map1.MaxMyElementSize(), self.elSize)
        self.assertEqual(self.map2.MaxMyElementSize(), self.elSize)
        self.assertEqual(self.map3.MaxMyElementSize(), self.elSize)

    def testMinElementSize(self):
        "Test Epetra.Map MinElementSize method"
        self.assertEqual(self.map1.MinElementSize(), self.elSize)
        self.assertEqual(self.map2.MinElementSize(), self.elSize)
        self.assertEqual(self.map3.MinElementSize(), self.elSize)

    def testMaxElementSize(self):
        "Test Epetra.Map MaxElementSize method"
        self.assertEqual(self.map1.MaxElementSize(), self.elSize)
        self.assertEqual(self.map2.MaxElementSize(), self.elSize)
        self.assertEqual(self.map3.MaxElementSize(), self.elSize)

    def testConstantElementSize(self):
        "Test Epetra.Map ConstantElementSize method"
        self.assertEqual(self.map1.ConstantElementSize(), True )
        self.assertEqual(self.map2.ConstantElementSize(), True )
        self.assertEqual(self.map3.ConstantElementSize(), True )

    def testSameAs(self):
        "Test Epetra.Map SameAs method"
        self.assertEqual(self.map1.SameAs(self.map1), True           )
        self.assertEqual(self.map1.SameAs(self.map2), self.numProc==1)
        self.assertEqual(self.map1.SameAs(self.map3), False          )
        self.assertEqual(self.map2.SameAs(self.map2), True           )
        self.assertEqual(self.map2.SameAs(self.map3), False          )
        self.assertEqual(self.map3.SameAs(self.map3), True           )

    def testPointSameAs(self):
        "Test Epetra.Map PointSameAs method"
        self.assertEqual(self.map1.PointSameAs(self.map1), True           )
        self.assertEqual(self.map1.PointSameAs(self.map2), self.numProc==1)
        self.assertEqual(self.map1.PointSameAs(self.map3), self.numProc==1)
        self.assertEqual(self.map2.PointSameAs(self.map2), True           )
        self.assertEqual(self.map2.PointSameAs(self.map3), True           ) # Same structure!
        self.assertEqual(self.map3.PointSameAs(self.map3), True           )

    def testLinearMap(self):
        "Test Epetra.Map LinearMap method"
        self.assertEqual(self.map1.LinearMap(), True )
        self.assertEqual(self.map2.LinearMap(), True )
        self.assertEqual(self.map3.LinearMap(), False)

    def testDistributedGlobal(self):
        "Test Epetra.Map DistributedGlobal method"
        distributedGlobal = (self.comm.Label() == "Epetra::MpiComm" and
                             self.numProc > 1)
        self.assertEqual(self.map1.DistributedGlobal(), distributedGlobal)
        self.assertEqual(self.map2.DistributedGlobal(), distributedGlobal)
        self.assertEqual(self.map3.DistributedGlobal(), distributedGlobal)

    def testFirstPointInElementList(self):
        "Test Epetra.Map FirstPointInElementList method"
        firstPoints1 = list(range(self.numMyElConst))
        firstPoints2 = list(range(self.numMyEl     ))
        firstPoints3 = firstPoints2
        result1      = self.map1.FirstPointInElementList()
        result2      = self.map2.FirstPointInElementList()
        result3      = self.map3.FirstPointInElementList()
        self.failUnless((result1 == firstPoints1).all())
        self.failUnless((result2 == firstPoints2).all())
        self.failUnless((result3 == firstPoints3).all())

    def testElementSizeList(self):
        "Test Epetra.Map ElementSizeList method"
        size1 = [self.elSize for lid in range(self.numMyElConst)]
        size2 = [self.elSize for lid in range(self.numMyEl     )]
        size3 = size2
        result1 = self.map1.ElementSizeList()
        result2 = self.map2.ElementSizeList()
        result3 = self.map3.ElementSizeList()
        self.failUnless((result1 == size1).all())
        self.failUnless((result2 == size2).all())
        self.failUnless((result3 == size3).all())

    def testPointToElementList(self):
        "Test Epetra.Map PointToElementList method"
        elementList = list(range(self.map3.NumMyElements()))
        result      = self.map3.PointToElementList()
        self.failUnless((result == elementList).all())

    def testAsMap(self):
        "Test Epetra.Map AsMap method"
        self.failUnless(self.map1.SameAs(self.map1.AsMap()))

    def testStr(self):
        "Test Epetra.Map __str__ method"
        # This does not work under MPI on my MacBook Pro yet...
        if not isinstance(self.comm, Epetra.SerialComm): return
        lines   = 7 + self.numMyElConst
        if self.myPID == 0: lines += 7
        s = str(self.map1)
        s = s.splitlines()
        self.assertEquals(len(s), lines)

    def testPrint(self):
        "Test Epetra.Map Print method"
        # This does not work under MPI on my MacBook Pro yet...
        if not isinstance(self.comm, Epetra.SerialComm): return
        myPID = self.myPID
        filename = "testMap%d.dat" % myPID
        f = open(filename, "w")
        self.map2.Print(f)
        f.close()
        s = open(filename, "r").readlines()
        lines = 7 + self.numMyEl
        if myPID == 0: lines += 7
        self.assertEquals(len(s), lines)

    def testComm(self):
        "Test Epetra.Map Comm method"
        comms = [self.map1.Comm(),
                 self.map2.Comm(),
                 self.map3.Comm()]
        for comm in comms:
            self.assertEqual(comm.NumProc(),self.comm.NumProc())
            self.assertEqual(comm.MyPID()  ,self.comm.MyPID()  )

##########################################################################

if __name__ == "__main__":

    # Create the test suite object
    suite = unittest.TestSuite()

    # Add the test cases to the test suite
    suite.addTest(unittest.makeSuite(EpetraMapTestCase))

    # Create a communicator
    comm    = Epetra.PyComm()
    iAmRoot = comm.MyPID() == 0

    # Run the test suite
    if iAmRoot: print("\n******************\nTesting Epetra.Map\n"
                      "******************\n", file=sys.stderr)
    v = options.verbosity * int(iAmRoot)
    result = unittest.TextTestRunner(verbosity=v).run(suite)

    # Compute the total number of errors and failures
    errsPlusFails = comm.SumAll(len(result.errors) + len(result.failures))
    if errsPlusFails == 0 and iAmRoot: print("End Result: TEST PASSED")

    # Some versions of python don't properly delete suite upon exit
    del suite

    # Exit with error/nonerror code
    sys.exit(errsPlusFails)
