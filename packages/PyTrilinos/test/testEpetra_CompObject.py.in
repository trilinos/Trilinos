#! ${PYTHON_EXECUTABLE}
# -*- python -*-

# @HEADER
# ***********************************************************************
#
#          PyTrilinos: Python Interfaces to Trilinos Packages
#                 Copyright (2014) Sandia Corporation
#
# Under the terms of Contract DE-AC04-94AL85000 with Sandia
# Corporation, the U.S. Government retains certain rights in this
# software.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the Corporation nor the names of the
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Questions? Contact William F. Spotz (wfspotz@sandia.gov)
#
# ***********************************************************************
# @HEADER

#
# System imports
from   __future__ import print_function
from   numpy    import *
from   optparse import *
import sys
import unittest

#
# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-t", "--testharness", action="store_true",
                  dest="testharness", default=False,
                  help="test local build modules; prevent loading system-installed modules")
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
options,args = parser.parse_args()

#
# Under normal usage, simply use 'from PyTrilinos import Epetra'.  For testing,
# we want to be able to control whether we import from the build directory or
# from a system-installed version of PyTrilinos.
from testutil import fromPyTrilinosImport
Epetra = fromPyTrilinosImport('Epetra', options.testharness)

##########################################################################

class EpetraCompObjectTestCase(unittest.TestCase):
    "TestCase for Epetra_CompObjects"

    def setUp(self):
        self.comm       = Epetra.PyComm()
        self.FLOPS      = Epetra.FLOPS()
        self.compObject = Epetra.CompObject()
        self.compObject.SetFlopCounter(self.FLOPS)
        self.comm.Barrier()

    def tearDown(self):
        self.comm.Barrier()

    def testConstructor1(self):
        "Test Epetra.CompObject constructor"
        self.assertEqual(type(self.compObject), Epetra.CompObject)

    def testConstructor2(self):
        "Test Epetra.CompObject copy constructor"
        compObject = Epetra.CompObject(self.compObject)
        self.assertEqual(type(compObject), Epetra.CompObject)

    def testSetFlopCounter1(self):
        "Test Epetra.CompObject SetFlopCounter method w/FLOPS arg"
        flops = 4
        self.compObject.UpdateFlops(flops)   # Change the current FLOP count
        self.assertEqual(self.compObject.Flops(), flops)
        flopCounter = Epetra.FLOPS()         # New counter set to zero
        self.compObject.SetFlopCounter(flopCounter)
        self.assertEqual(self.compObject.Flops(), 0)

    def testSetFlopCounter2(self):
        "Test Epetra.CompObject SetFlopCounter method w/CompObject arg"
        flops = 17
        FLOPS = Epetra.FLOPS()
        compObject = Epetra.CompObject()
        compObject.SetFlopCounter(FLOPS)
        compObject.UpdateFlops(flops)
        self.compObject.SetFlopCounter(compObject)
        self.assertEqual(self.compObject.Flops(), flops)

    def testUnsetFlopCounter(self):
        "Test Epetra.CompObject UnsetFlopCounter method"
        flops = 2004
        self.compObject.UpdateFlops(flops)  # Change the current FLOP count
        self.compObject.UnsetFlopCounter()
        self.assertEqual(self.compObject.Flops(), 0.0)

    def testGetFlopCounter(self):
        "Test Epetra.CompObject GetFlopCounter method"
        flops = 1
        self.compObject.UpdateFlops(flops)  # Change the current FLOP count
        FLOPS = self.compObject.GetFlopCounter()
        self.assertEqual(FLOPS.Flops(), flops)

    def testResetFlops(self):
        "Test Epetra.CompObject ResetFlops method"
        flops = 15
        self.compObject.UpdateFlops(flops)  # Change the current FLOP count
        self.assertEqual(self.compObject.Flops(), flops)
        self.compObject.ResetFlops()
        self.assertEqual(self.compObject.Flops(), 0.0)

    def testFlops(self):
        "Test Epetra.CompObject Flops method"
        flops = 2000
        self.compObject.UpdateFlops(flops)
        self.assertEqual(self.compObject.Flops(), flops)

    def testUpdateFlops1(self):
        "Test Epetra.CompObject UpdateFlops method w/int arg"
        flops = 11
        self.compObject.UpdateFlops(flops)
        self.assertEqual(self.compObject.Flops(), flops)

    def testUpdateFlops2(self):
        "Test Epetra.CompObject UpdateFlops method w/float arg"
        flops = 10.0
        self.compObject.UpdateFlops(flops)
        self.assertEqual(self.compObject.Flops(), flops)

##########################################################################

if __name__ == "__main__":

    # Create the test suite object
    suite = unittest.TestSuite()

    # Add the test cases to the test suite
    suite.addTest(unittest.makeSuite(EpetraCompObjectTestCase))

    # Create a communicator
    comm    = Epetra.PyComm()
    iAmRoot = comm.MyPID() == 0

    # Run the test suite
    if iAmRoot:
        print("\n*************************\nTesting Epetra.CompObject\n"
              "*************************\n", file=sys.stderr)
    verbosity = options.verbosity * int(iAmRoot)
    result = unittest.TextTestRunner(verbosity=verbosity).run(suite)

    # Compute the total number of errors and failures
    errsPlusFails = comm.SumAll(len(result.errors) + len(result.failures))
    if errsPlusFails == 0 and iAmRoot: print("End Result: TEST PASSED")

    # Some versions of python don't properly delete suite upon exit
    del suite

    # Exit with error/nonerror code
    sys.exit(errsPlusFails)
