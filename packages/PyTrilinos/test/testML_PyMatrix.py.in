#! ${PYTHON_EXECUTABLE}
# -*- python -*-

# @HEADER
# ***********************************************************************
#
#          PyTrilinos: Python Interfaces to Trilinos Packages
#                 Copyright (2014) Sandia Corporation
#
# Under the terms of Contract DE-AC04-94AL85000 with Sandia
# Corporation, the U.S. Government retains certain rights in this
# software.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the Corporation nor the names of the
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Questions? Contact William F. Spotz (wfspotz@sandia.gov)
#
# ***********************************************************************
# @HEADER

#
# System imports
from   __future__ import print_function
from   optparse   import *
import sys
import time
import unittest

#
# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-t", "--testharness", action="store_true",
                  dest="testharness", default=False,
                  help="test local build modules; prevent loading system-installed modules")
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
options,args = parser.parse_args()

#
# Under normal usage, simply use 'from PyTrilinos import Epetra'.  For testing,
# we want to be able to control whether we import from the build directory or
# from a system-installed version of PyTrilinos.
from testutil import fromPyTrilinosImport
Epetra = fromPyTrilinosImport('Epetra', options.testharness)
ML     = fromPyTrilinosImport('ML'    , options.testharness)

##########################################################################

class MLPyMatrixTestCase(unittest.TestCase):
    "TestCase for ML.PyMatrix objects"

    def setUp(self):
        self.comm = Epetra.PyComm()
        self.dataname = "testPyMatrix%d.dat" % comm.MyPID()
        myPID = self.comm.MyPID()
        # Create Spaces
        n = 10 * self.comm.NumProc()
        globalRows = list(range(myPID*10, (myPID+1)*10))
        rowSpace = ML.Space(n, globalRows)
        globalCols = globalRows[:]
        if myPID > 0:
            globalCols.insert(0,myPID*10-1)
        if myPID < self.comm.NumProc()-1:
            globalCols.append((myPID+1)*10)
        colSpace = ML.Space(-1, globalCols)
        # Create and fill matrix
        self.matrix = ML.PyMatrix(rowSpace, colSpace)
        for i in globalRows:
            if i > 0:
                self.matrix[i,i-1] =  1
            self.matrix[i,i] = -2
            if i < self.comm.NumProc()*10-1:
                self.matrix[i,i+1] =  1
        self.matrix.FillComplete()
        self.comm.Barrier()

    def tearDown(self):
        self.comm.Barrier()

    def testConstructor(self):
        "Test ML.PyMatrix constructor"
        rows = self.matrix.GetRowSpace().GetMyGlobalElements()
        for row in rows:
            if row > 0:
                self.assertEqual(self.matrix[row, row-1], 1)
            self.assertEqual(self.matrix[row,row], -2)
            if row < 10*self.comm.NumProc()-1:
                self.assertEqual(self.matrix[row, row+1], 1)

    def testGetRowSpace(self):
        "Test ML.PyMatrix GetRowSpace method"
        myPID = self.comm.MyPID()
        rows = list(range(myPID*10, (myPID+1)*10))
        rowSpace = self.matrix.GetRowSpace()
        self.failUnless(rowSpace.GetMyGlobalElements(), rows)

##########################################################################

if __name__ == "__main__":

    # Create the test suite object
    suite = unittest.TestSuite()

    # Add the test cases to the test suite
    suite.addTest(unittest.makeSuite(MLPyMatrixTestCase))

    # Create a communicator
    comm    = Epetra.PyComm()
    iAmRoot = comm.MyPID() == 0

    # Run the test suite
    if iAmRoot:
        print("\n*******************\nTesting ML.PyMatrix\n"
              "*******************\n", file=sys.stderr)
    verbosity = options.verbosity * int(iAmRoot)
    result = unittest.TextTestRunner(verbosity=verbosity).run(suite)

    # Compute the total number of errors and failures
    errsPlusFails = comm.SumAll(len(result.errors) + len(result.failures))
    if errsPlusFails == 0 and iAmRoot: print("End Result: TEST PASSED")

    # Some versions of python don't properly delete suite upon exit
    del suite

    # Exit with error/nonerror code
    sys.exit(errsPlusFails)
