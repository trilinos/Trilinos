#! ${PYTHON_EXECUTABLE}
# -*- python -*-

# @HEADER
# ***********************************************************************
#
#          PyTrilinos: Python Interfaces to Trilinos Packages
#                 Copyright (2014) Sandia Corporation
#
# Under the terms of Contract DE-AC04-94AL85000 with Sandia
# Corporation, the U.S. Government retains certain rights in this
# software.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the Corporation nor the names of the
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Questions? Contact William F. Spotz (wfspotz@sandia.gov)
#
# ***********************************************************************
# @HEADER

#
# System imports
from   __future__ import print_function
from   optparse import *
import setpath
import sys
import unittest

#
# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-t", "--testharness", action="store_true",
                  dest="testharness", default=False,
                  help="test local build modules; prevent loading system-installed modules")
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
options,args = parser.parse_args()

#
# Under normal usage, simply use 'from PyTrilinos import Epetra'.  For testing,
# we want to be able to control whether we import from the build directory or
# from a system-installed version of PyTrilinos.
from testutil import fromPyTrilinosImport
LOCA = fromPyTrilinosImport('LOCA' , options.testharness)

################################################################################

class ParameterVectorTestCase(unittest.TestCase):
    "TestCase for LOCA.ParameterVector"

    def setUp(self):
        self.pv = LOCA.ParameterVector()
        self.pv.addParameter("Zero"     )
        self.pv.addParameter("One", 1.0 )
        self.pv.addParameter("Pi" , 3.14)

    def testAddParameterNoValue(self):
        "Test LOCA.ParameterVector addParameter method with no value"
        self.assertEquals(self.pv.getValue("Zero"), 0.0)

    def testAddParameterWithValue(self):
        "Test LOCA.ParameterVector addParameter method with given value"
        self.assertEquals(self.pv.getValue("One"), 1.0)

    def testInit(self):
        "Test LOCA.ParameterVector init method"
        result = self.pv.init(2.0)
        self.assert_(result)
        self.assertEquals(self.pv.getValue("Zero"), 2.0)
        self.assertEquals(self.pv.getValue("One" ), 2.0)
        self.assertEquals(self.pv.getValue("Pi"  ), 2.0)

    def testScale(self):
        "Test LOCA.ParameterVector scale method"
        result = self.pv.scale(2.0)
        self.assert_(result)
        self.assertEquals(self.pv.getValue("Zero"), 0.0 )
        self.assertEquals(self.pv.getValue("One" ), 2.0 )
        self.assertEquals(self.pv.getValue("Pi"  ), 6.28)

    def testOperatorEquals(self):
        "Test LOCA.ParameterVector operator= method"
        newPV = self.pv
        self.assertEquals(newPV.getValue("Zero"), 0.0 )
        self.assertEquals(newPV.getValue("One" ), 1.0 )
        self.assertEquals(newPV.getValue("Pi"  ), 3.14)

    def testSetGetInt(self):
        "Test LOCA.ParameterVector setValue & getValue methods with integer key"
        self.pv.setValue(2,2.0)
        self.assertEquals(self.pv.getValue(2), 2.0)

    def testSetGetString(self):
        "Test LOCA.ParameterVector setValue & getValue methods with string key"
        self.pv.setValue("Pi",2.0)
        self.assertEquals(self.pv.getValue("Pi"), 2.0)

    def testGetIndex(self):
        "Test LOCA.ParameterVector getIndex method"
        index = self.pv.getIndex("One")
        self.assertEquals(index, 1)

    def testIsParameter(self):
        "Test LOCA.ParameterVector isParameter method"
        self.assert_(self.pv.isParameter("Zero"))
        self.assert_(self.pv.isParameter("One" ))
        self.assert_(self.pv.isParameter("Pi"  ))
        self.assert_(not self.pv.isParameter("Two"))

    def testGetLabel(self):
        "Test LOCA.ParameterVector getLabel method"
        self.assertEquals(self.pv.getLabel(0), "Zero")
        self.assertEquals(self.pv.getLabel(1), "One" )
        self.assertEquals(self.pv.getLabel(2), "Pi"  )

    def testLength(self):
        "Test LOCA.ParameterVector length method"
        self.assertEquals(self.pv.length(), 3)

################################################################################

if __name__ == "__main__":

    # Create the test suite object
    suite = unittest.TestSuite()

    # Add the test cases to the test suite
    suite.addTest(unittest.makeSuite(ParameterVectorTestCase ))

    # Create a communicator
    comm = Epetra.PyComm()
    iAmRoot = comm.MyPID() == 0

    # Run the test suite
    if iAmRoot:
        print("\n****************************\nTesting LOCA.ParameterVector\n"
              "****************************\n", file=sys.stderr)
    verbosity = options.verbosity * int(iAmRoot)
    result = unittest.TextTestRunner(verbosity=verbosity).run(suite)

    # Exit with a code that indicates the total number of errors and failures
    sys.exit(len(result.errors) + len(result.failures))
