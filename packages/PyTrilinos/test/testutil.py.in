#! ${PYTHON_EXECUTABLE}
# -*- python -*-

# @HEADER
# ***********************************************************************
#
#          PyTrilinos: Python Interfaces to Trilinos Packages
#                 Copyright (2014) Sandia Corporation
#
# Under the terms of Contract DE-AC04-94AL85000 with Sandia
# Corporation, the U.S. Government retains certain rights in this
# software.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the Corporation nor the names of the
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Questions? Contact William F. Spotz (wfspotz@sandia.gov)
#
# ***********************************************************************
# @HEADER

# System module imports
from   distutils.util import get_platform
import os.path
import sys

#
# Function fromPyTrilinosImport():  this function mimics the statement
#
#   from PyTrilinos import ...
#
# but allows the user to force the import to come from the local build
# directory.
#
def fromPyTrilinosImport(name, fromBuild=False, globals={}, locals={}):
    """
    fromPyTrilinosImport(name, fromBuild=False, globals={}, locals={}) -> module

    Return the requested PyTrilinos module.  Argument 'name' must be a valid
    PyTrilinos module name, such as 'Teuchos', Epetra', 'AztecOO', etc.  If
    argument 'fromBuild' is False, then this function returns what would be
    obtained from the statement 'from PyTrilinos import <name>', which in all
    liklihood will be a system-installed version of PyTrilinos.  If it is True,
    the function ensures that the module that gets returned is from the local
    build directory.

    fromPyTrilinosImport() is designed to work from the local build directory,
    whether that directory is an autotools build directory, or a cmake build
    directory.
    """

    PyTrilinosStr = "PyTrilinos"

    # If fromBuild is True, then we need to put the build directory into the
    # search path.  There are two posibilites: the autotools build directory or
    # the cmake build directory.  The cmake build system utilizes a directory
    # that should always exist, so we check for the existence of the autotools
    # build directory to determine which build system is being used.
    if fromBuild:
        myDir,myName = os.path.split(__file__)
        libDir = "lib.%s-%s" % (get_platform(), sys.version[0:3])
        autoDir = os.path.normpath(os.path.join(myDir, "..", "src", "build",
                                                libDir))
        cmakeDir = os.path.normpath(os.path.join(myDir, "..", "src"))
        if os.path.isdir(autoDir):
            buildDir = autoDir
        else:
            buildDir = cmakeDir
        # Update the sys.path list of search paths.
        if buildDir not in sys.path:
            sys.path.insert(1, buildDir)

    # Time to import the module from the PyTrilinos package, whether the build
    # directory has been added to the search path or not.
    fullname = PyTrilinosStr + "." + name
    try:
        PyTrilinosPkg = __import__(fullname, globals, locals)
    except ImportError as e:
        print(e)
        print("\nIf you are trying to run tests from the build directory, you\n"
              "need to run these scripts with either the '-t' or the\n"
              "'--testharness' command-line argument, to tell the script to look\n"
              "in the build directory for the PyTrilinos package.") 
        sys.exit(1)
    module = sys.modules[fullname]

    # If fromBuild is True, then the user is going to expect the module to have
    # been imported from the build directory.  If the local version has not yet
    # been built, it is possible that the __import__() function picked up a
    # system-installed PyTrilinos.  This scenario should raise an exception.
    if fromBuild:
        PyTrilinosDir = os.path.join(buildDir, PyTrilinosStr)
        importDir = PyTrilinosPkg.__path__[0]
        if importDir != PyTrilinosDir:
            print("PyTrilinos not imported from build directory\n\n"
                  "This can happen when you have a version of PyTrilinos\n"
                  "installed somewhere on your system, but have not yet built\n"
                  "PyTrilinos in the local build directory.")
            sys.exit(1)

    # We have the module and it is from the expected location, so return it to
    # the user.
    return module
