#! ${PYTHON_EXECUTABLE}
# -*- python -*-

# @HEADER
# ***********************************************************************
#
#          PyTrilinos: Python Interfaces to Trilinos Packages
#                 Copyright (2014) Sandia Corporation
#
# Under the terms of Contract DE-AC04-94AL85000 with Sandia
# Corporation, the U.S. Government retains certain rights in this
# software.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the Corporation nor the names of the
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Questions? Contact William F. Spotz (wfspotz@sandia.gov)
#
# ***********************************************************************
# @HEADER

#
# System imports
from   __future__ import print_function
import numpy
import sys
import unittest

#
# Parse the command-line arguments
from optparse import *
parser = OptionParser()
parser.add_option("-t", "--testharness", action="store_true",
                  dest="testharness", default=False,
                  help="test local build modules; prevent loading system-installed modules")
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
options,args = parser.parse_args()
#
# Under normal usage, simply use 'from PyTrilinos import Epetra'.  For testing,
# we want to be able to control whether we import from the build directory or
# from a system-installed version of PyTrilinos.
from testutil import fromPyTrilinosImport
Teuchos = fromPyTrilinosImport('Teuchos', options.testharness)
Tpetra  = fromPyTrilinosImport('Tpetra' , options.testharness)

##########################################################################

class TpetraVectorTestCase(unittest.TestCase):
    "TestCase class for Vector objects"

    def __init__(self, methodName="runTest"):
        unittest.TestCase.__init__(self, methodName)
        self.typeStr  = "double"
        self.typeCode = "d"

    def setUp(self):
        self.comm             = Teuchos.DefaultComm.getComm()
        self.numProc          = self.comm.getSize()
        self.myPID            = self.comm.getRank()
        self.numMyElConst     = 4
        self.numMyEl          = self.numMyElConst + self.myPID
        self.numGlobalElConst = self.numMyElConst * self.numProc
        self.numGlobalEl      = self.comm.reduceAll(Teuchos.REDUCE_SUM,
                                                    self.numMyEl)
        self.elSize           = 1
        self.indexBase        = 0
        globalEls             = list(range(self.numGlobalEl))
        globalEls.reverse()  # Force this to be different from the linear distribution
        self.start            = 4*self.myPID + self.myPID*(self.myPID-1) // 2
        self.myGlobalEls      = globalEls[self.start:self.start+self.numMyEl]

        self.map1             = Tpetra.Map(self.numGlobalElConst,
                                           self.indexBase,
                                           self.comm)

        self.map2             = Tpetra.Map(self.numGlobalEl,
                                           self.numMyEl,
                                           self.indexBase,
                                           self.comm)

        self.map3             = Tpetra.Map(self.numGlobalEl,
                                           self.myGlobalEls,
                                           self.indexBase,
                                           self.comm)

        self.comm.barrier()

    def tearDown(self):
        self.comm.barrier()

    def testConstructor1(self):
        "Test Tpetra.Vector constructor for uniform, linear Map"
        print(self.typeStr, end=" ... ", file=sys.stderr)
        vector = Tpetra.Vector(self.map1, dtype=self.typeCode)

    def testConstructor2(self):
        "Test Tpetra.Vector constructor for uniform, linear Map, without zero-out"
        print(self.typeStr, end=" ... ", file=sys.stderr)
        vector = Tpetra.Vector(self.map1, False, dtype=self.typeCode)

    def testConstructor3(self):
        "Test Tpetra.Vector copy constructors"
        print(self.typeStr, end=" ... ", file=sys.stderr)
        vector1 = Tpetra.Vector(self.map2, dtype=self.typeCode)
        vector2 = Tpetra.Vector(vector1)
        vector3 = Tpetra.Vector(vector1, Teuchos.Copy)
        vector4 = Tpetra.Vector(vector1, Teuchos.View)

##########################################################################

class TpetraVectorTestCase_int(TpetraVectorTestCase):
    def __init__(self, methodName="runTest"):
        TpetraVectorTestCase.__init__(self, methodName)
        self.typeStr  = "int"
        self.typeCode = "i"

##########################################################################

class TpetraVectorTestCase_long(TpetraVectorTestCase):
    def __init__(self, methodName="runTest"):
        TpetraVectorTestCase.__init__(self, methodName)
        self.typeStr  = "long"
        self.typeCode = "l"

##########################################################################

class TpetraVectorTestCase_float(TpetraVectorTestCase):
    def __init__(self, methodName="runTest"):
        TpetraVectorTestCase.__init__(self, methodName)
        self.typeStr  = "float"
        self.typeCode = "f"

##########################################################################

class TpetraVectorTestCase_double(TpetraVectorTestCase):
    def __init__(self, methodName="runTest"):
        TpetraVectorTestCase.__init__(self, methodName)
        self.typeStr  = "double"
        self.typeCode = "d"

##########################################################################

if __name__ == "__main__":

    # Create the test suite object
    suite = unittest.TestSuite()

    # Add the test cases to the test suite
    suite.addTest(unittest.makeSuite(TpetraVectorTestCase_int   ))
    suite.addTest(unittest.makeSuite(TpetraVectorTestCase_long  ))
    suite.addTest(unittest.makeSuite(TpetraVectorTestCase_double))
    # suite.addTest(unittest.makeSuite(TpetraVectorTestCase_float ))

    # Create a communicator
    comm    = Teuchos.DefaultComm.getComm()
    iAmRoot = comm.getRank() == 0

    # Run the test suite
    if iAmRoot:
        print("\n*********************\nTesting Tpetra.Vector\n"
              "*********************\n", file=sys.stderr)
    v = options.verbosity * int(iAmRoot)
    result = unittest.TextTestRunner(verbosity=v).run(suite)

    # Compute the total number of errors and failures
    errsPlusFails = comm.reduceAll(Teuchos.REDUCE_SUM,
                                   len(result.errors) + len(result.failures))
    if errsPlusFails == 0 and iAmRoot: print("End Result: TEST PASSED")

    # Some versions of python don't properly delete suite upon exit
    del suite

    # Exit with error/nonerror code
    sys.exit(errsPlusFails)
