#! ${PYTHON_EXECUTABLE}
# -*- python -*-

# @HEADER
# ***********************************************************************
#
#          PyTrilinos: Python Interfaces to Trilinos Packages
#                 Copyright (2014) Sandia Corporation
#
# Under the terms of Contract DE-AC04-94AL85000 with Sandia
# Corporation, the U.S. Government retains certain rights in this
# software.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the Corporation nor the names of the
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Questions? Contact William F. Spotz (wfspotz@sandia.gov)
#
# ***********************************************************************
# @HEADER

#
# System imports
from   __future__ import print_function
import numpy
from   optparse import *
import sys
import unittest

#
# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-t", "--testharness", action="store_true",
                  dest="testharness", default=False,
                  help="test local build modules; prevent loading system-installed modules")
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
options,args = parser.parse_args()

#
# Under normal usage, simply use 'from PyTrilinos import Epetra'.  For testing,
# we want to be able to control whether we import from the build directory or
# from a system-installed version of PyTrilinos.
from testutil import fromPyTrilinosImport
Teuchos   = fromPyTrilinosImport('Teuchos'  , options.testharness)
Epetra    = fromPyTrilinosImport('Epetra'   , options.testharness)
EpetraExt = fromPyTrilinosImport('EpetraExt', options.testharness)

####################################################################

class HDF5TestCase(unittest.TestCase):
    "TestCase class for EpetraExt HDF5 class"

    def setUp(self):
        self.comm = Epetra.PyComm()
        self.size = 9 * self.comm.NumProc()
        self.map  = Epetra.Map(self.size,0,self.comm)
        self.hdf5 = EpetraExt.HDF5(self.comm)
        self.name = "testEpetraExt_HDF5.h5"

    def tearDown(self):
        del self.hdf5

    def testBasic(self):
        "Test EpetraExt HDF5 basic functions"
        self.failIf(self.hdf5.IsOpen())
        self.hdf5.Create(self.name)
        self.failUnless(self.hdf5.IsOpen())
        self.hdf5.Close()
        self.failIf(self.hdf5.IsOpen())
        self.hdf5.Open(self.name)
        self.failUnless(self.hdf5.IsOpen())
        self.hdf5.Close()
        self.failIf(self.hdf5.IsOpen())

    def testPrimitive(self):
        "Test EpetraExt HDF5 primitive write/read"
        self.hdf5.Create(self.name)
        group = "Primitives"
        i = 11
        d = 2.17
        s = "HDF5"
        self.hdf5.CreateGroup(group)
        self.hdf5.Write(group, "int"   , i)
        self.hdf5.Write(group, "double", d)
        self.hdf5.Write(group, "string", s)
        self.failUnless(self.hdf5.IsContained(group))
        self.assertEqual(self.hdf5.ReadInt(   group, "int"   ), i)
        self.assertEqual(self.hdf5.ReadFloat( group, "double"), d)
        self.assertEqual(self.hdf5.ReadString(group, "string"), s)
        self.hdf5.Close()

    def testComment(self):
        "Test EpetraExt HDF5 comment write/read"
        self.hdf5.Create(self.name)
        group   = "Comment"
        comment = "You look marvelous!"
        self.hdf5.CreateGroup(group)
        self.hdf5.WriteComment(group, comment)
        self.failUnless(self.hdf5.IsContained(group))
        self.assertEqual(self.hdf5.ReadComment(group), comment)
        self.hdf5.Close()

    #def testBlockMap(self):
    #    "Test EpetraExt HDF5 BlockMap write/read"
    #    blockMap = Epetra.BlockMap(self.map)
    #    self.hdf5.Create(self.name)
    #    group = "BlockMap"
    #    self.hdf5.Write(group, blockMap)
    #    self.hdf5.Close()
    #    self.hdf5.Open(self.name)
    #    self.failUnless(self.hdf5.IsContained(group))
    #    blockMap2 = self.hdf5.ReadBlockMap(group)
    #    #self.failUnless(self.hdf5.ReadBlockMap(group).SameAs(blockMap))
    #    self.hdf5.Close()

    def testMap(self):
        "Test EpetraExt HDF5 Map write/read"
        self.hdf5.Create(self.name)
        group = "Map"
        self.hdf5.Write(group, self.map)
        self.hdf5.Close()
        self.hdf5.Open(self.name)
        self.failUnless(self.hdf5.IsContained(group))
        self.failUnless(self.hdf5.ReadMap(group).SameAs(self.map))
        props = self.hdf5.ReadMapProperties(group)
        self.assertEqual(props[0], self.map.NumGlobalElements())
        self.assertEqual(props[1], self.map.IndexBase()        )
        self.assertEqual(props[2], self.comm.NumProc()         )
        self.hdf5.Close()

    def testCrsGraph(self):
        "Test EpetraExt HDF5 CrsGraph write/read"
        crsg = Epetra.CrsGraph(Epetra.Copy, self.map, 3)
        n    = self.size
        for grid in self.map.MyGlobalElements():
            if   grid == 0  : indices = [0,1]
            elif grid == n-1: indices = [n-2,n-1]
            else            : indices = [grid-1,grid,grid+1]
            crsg.InsertGlobalIndices(grid,indices)
        crsg.FillComplete()
        self.hdf5.Create(self.name)
        group = "CrsGraph"
        self.hdf5.Write(group, crsg)
        self.hdf5.Close()
        self.hdf5.Open(self.name)
        self.failUnless(self.hdf5.IsContained(group))
        crsg2 = self.hdf5.ReadCrsGraph(group)
        self.failUnless(isinstance(crsg2, Epetra.CrsGraph))
        props = self.hdf5.ReadCrsGraphProperties(group)
        self.assertEqual(props[0], crsg.NumGlobalRows()     )
        self.assertEqual(props[1], crsg.NumGlobalCols()     )
        self.assertEqual(props[2], crsg.NumGlobalNonzeros() )
        self.assertEqual(props[3], crsg.NumGlobalDiagonals())
        self.assertEqual(props[4], crsg.MaxNumIndices()     )
        self.hdf5.Close()

    def testIntVector(self):
        "Test EpetraExt HDF5 IntVector write/read"
        start = self.comm.MyPID()*9
        stop  = start + 9
        data = numpy.arange(start, stop)
        iv = Epetra.IntVector(self.map)
        iv[:] = data
        self.hdf5.Create(self.name)
        group = "IntVector"
        self.hdf5.Write(group, iv)
        self.hdf5.Close()
        self.hdf5.Open(self.name)
        self.failUnless(self.hdf5.IsContained(group))
        iv2 = self.hdf5.ReadIntVector(group)
        self.failUnless((iv[:] == data[:]).all())
        props = self.hdf5.ReadIntVectorProperties(group)
        self.assertEqual(props, self.size)
        self.hdf5.Close()

    def testMultiVector(self):
        "Test EpetraExt HDF5 MultiVector write/read"
        start = self.comm.MyPID()*9.0
        stop  = start + 9.0
        data = numpy.arange(start, stop)
        mv = Epetra.MultiVector(self.map, data)
        self.hdf5.Create(self.name)
        group = "MultiVector"
        self.hdf5.Write(group, mv)
        self.hdf5.Close()
        self.hdf5.Open(self.name)
        self.failUnless(self.hdf5.IsContained(group))
        mv2 = self.hdf5.ReadMultiVector(group)
        self.failUnless((mv[:] == data[:]).all())
        props = self.hdf5.ReadMultiVectorProperties(group)
        self.assertEqual(props[0], self.size)
        self.assertEqual(props[1], 1        )
        self.hdf5.Close()

    def testVector(self):
        "Test EpetraExt HDF5 Vector write/read"
        start = self.comm.MyPID()*9.0
        stop  = start + 9.0
        data = numpy.arange(start, stop)
        v = Epetra.Vector(self.map, data)
        self.hdf5.Create(self.name)
        group = "Vector"
        self.hdf5.Write(group, v)
        self.hdf5.Close()
        self.hdf5.Open(self.name)
        self.failUnless(self.hdf5.IsContained(group))
        v2 = self.hdf5.ReadMultiVector(group)
        self.failUnless((v[:] == data[:]).all())
        props = self.hdf5.ReadMultiVectorProperties(group)
        self.assertEqual(props[0], self.size)
        self.assertEqual(props[1], 1        )
        self.hdf5.Close()

    def testCrsMatrix(self):
        "Test EpetraExt HDF5 CrsMatrix write/read"
        crsm = Epetra.CrsMatrix(Epetra.Copy, self.map, 3)
        n    = self.size
        for grid in self.map.MyGlobalElements():
            if   grid == 0  : indices = [0,]
            elif grid == n-1: indices = [n-1,]
            else            : indices = [grid-1,grid,grid+1]
            if len(indices) == 1: values = [1.0,]
            else                : values = [-1.0, 2.0, -1.0]
            crsm.InsertGlobalValues(grid,values,indices)
        crsm.FillComplete()
        self.hdf5.Create(self.name)
        group = "CrsMatrix"
        self.hdf5.Write(group, crsm)
        self.hdf5.Close()
        self.hdf5.Open(self.name)
        self.failUnless(self.hdf5.IsContained(group))
        crsm2 = self.hdf5.ReadCrsMatrix(group)
        self.failUnless(isinstance(crsm2, Epetra.CrsMatrix))
        props = self.hdf5.ReadCrsMatrixProperties(group)
        self.assertEqual(props[0], crsm.NumGlobalRows()     )
        self.assertEqual(props[1], crsm.NumGlobalCols()     )
        self.assertEqual(props[2], crsm.NumGlobalNonzeros() )
        self.assertEqual(props[3], crsm.NumGlobalDiagonals())
        self.assertEqual(props[4], crsm.MaxNumEntries()     )
        self.assertEqual(props[5], crsm.NormOne()           )
        self.assertEqual(props[6], crsm.NormInf()           )
        self.hdf5.Close()

    def testParameterList(self):
        "Test EpetraExt HDF5 Teuchos.ParameterList write/read"
        plDict = {"title"     : "Simulation",
                  "tolerance" : 1.0e-6,
                  "max iters" : 100          }
        #tpl = Teuchos.ParameterList(plDict)
        self.hdf5.Create(self.name)
        group = "ParameterList"
        self.hdf5.Write(group, plDict)
        self.hdf5.Close()
        self.hdf5.Open(self.name)
        self.failUnless(self.hdf5.IsContained(group))
        tpl = self.hdf5.ReadParameterList(group)
        self.failUnless(isinstance(tpl, Teuchos.ParameterList))
        self.assertEqual(tpl, plDict)
        self.hdf5.Close()

####################################################################

if __name__ == "__main__":

    # Create the test suite object
    suite = unittest.TestSuite()

    # Add the test cases to the test suite
    suite.addTest(unittest.makeSuite(HDF5TestCase))

    # Create a communicator
    comm    = Epetra.PyComm()
    iAmRoot = comm.MyPID() == 0

    # Run the test suite
    if iAmRoot:
        print("\n**********************\nTesting EpetraExt.HDF5\n"
              "**********************\n", file=sys.stderr)
    verbosity = options.verbosity * int(iAmRoot)
    result = unittest.TextTestRunner(verbosity=verbosity).run(suite)

    # Exit with a code that indicates the total number of errors and failures
    errsPlusFails = comm.SumAll(len(result.errors) + len(result.failures))
    if errsPlusFails == 0 and iAmRoot: print("End Result: TEST PASSED")
    sys.exit(errsPlusFails)
