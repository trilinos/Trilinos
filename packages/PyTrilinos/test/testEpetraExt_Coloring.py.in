#! ${PYTHON_EXECUTABLE}
# -*- python -*-

# @HEADER
# ***********************************************************************
#
#          PyTrilinos: Python Interfaces to Trilinos Packages
#                 Copyright (2014) Sandia Corporation
#
# Under the terms of Contract DE-AC04-94AL85000 with Sandia
# Corporation, the U.S. Government retains certain rights in this
# software.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the Corporation nor the names of the
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Questions? Contact William F. Spotz (wfspotz@sandia.gov)
#
# ***********************************************************************
# @HEADER

#
# System imports
from   __future__ import print_function
from   numpy    import *
from   optparse import *
import sys
import unittest

#
# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-t", "--testharness", action="store_true",
                  dest="testharness", default=False,
                  help="test local build modules; prevent loading system-installed modules")
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
options,args = parser.parse_args()

#
# Under normal usage, simply use 'from PyTrilinos import Epetra'.  For testing,
# we want to be able to control whether we import from the build directory or
# from a system-installed version of PyTrilinos.
from testutil import fromPyTrilinosImport
Epetra    = fromPyTrilinosImport('Epetra'   , options.testharness)
EpetraExt = fromPyTrilinosImport('EpetraExt', options.testharness)

####################################################################

class ColoringTestCase(unittest.TestCase):
    "TestCase class for EpetraExt coloring objects"

    def setUp(self):
        self.comm = Epetra.PyComm()
        self.size = 9 * self.comm.NumProc()
        self.map  = Epetra.Map(self.size,0,self.comm)
        self.crsg = Epetra.CrsGraph(Epetra.Copy, self.map, 3)
        n         = self.size
        for lrid in range(self.crsg.NumMyRows()):
            grid = self.crsg.GRID(lrid)
            if   grid == 0  : indices = [0,1]
            elif grid == n-1: indices = [n-2,n-1]
            else            : indices = [grid-1,grid,grid+1]
            self.crsg.InsertGlobalIndices(grid,indices)
        self.crsg.FillComplete()

    def testMapColoring(self):
        "Test EpetraExt CrsGraph-to-MapColoring transform"
        mapColoring  = EpetraExt.CrsGraph_MapColoring(False)
        colorMap     = mapColoring(self.crsg)
        numColors    = colorMap.NumColors()
        defaultColor = colorMap.DefaultColor()
        self.assertEqual(numColors   , 3)
        self.assertEqual(defaultColor, 0)
        for c in range(numColors):
            self.assert_(colorMap.NumElementsWithColor(c+1) in (3,4))

    def testColorMapIndex(self):
        "Test EpetraExt MapColoring-to-ColorMapIndex transform"
        mapColoring   = EpetraExt.CrsGraph_MapColoring(False)
        colorMap      = mapColoring(self.crsg)
        colorMapIndex = EpetraExt.CrsGraph_MapColoringIndex(colorMap)
        columns       = colorMapIndex(self.crsg)
        # No assert test here; just executing has to be enough

####################################################################

if __name__ == "__main__":

    # Create the test suite object
    suite = unittest.TestSuite()

    # Add the test cases to the test suite
    suite.addTest(unittest.makeSuite(ColoringTestCase))

    # Create a communicator
    comm    = Epetra.PyComm()
    iAmRoot = comm.MyPID() == 0

    # Run the test suite
    if iAmRoot:
        print("\n**************************\nTesting EpetraExt.Coloring\n"
              "**************************\n", file=sys.stderr)
    verbosity = options.verbosity * int(iAmRoot)
    result = unittest.TextTestRunner(verbosity=verbosity).run(suite)

    # Compute the total number of errors and failures
    errsPlusFails = comm.SumAll(len(result.errors) + len(result.failures))
    if errsPlusFails == 0 and iAmRoot: print("End Result: TEST PASSED")

    # Some versions of python don't properly delete suite upon exit
    del suite

    # Exit with error/nonerror code
    sys.exit(errsPlusFails)
