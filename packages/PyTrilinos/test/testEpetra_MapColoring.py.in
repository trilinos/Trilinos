#! ${PYTHON_EXECUTABLE}
# -*- python -*-

# @HEADER
# ***********************************************************************
#
#          PyTrilinos: Python Interfaces to Trilinos Packages
#                 Copyright (2014) Sandia Corporation
#
# Under the terms of Contract DE-AC04-94AL85000 with Sandia
# Corporation, the U.S. Government retains certain rights in this
# software.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the Corporation nor the names of the
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Questions? Contact William F. Spotz (wfspotz@sandia.gov)
#
# ***********************************************************************
# @HEADER

#
# System imports
from   __future__ import print_function
from   numpy    import *
from   optparse import *
import sys
import unittest

#
# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-t", "--testharness", action="store_true",
                  dest="testharness", default=False,
                  help="test local build modules; prevent loading system-installed modules")
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
options,args = parser.parse_args()

#
# Under normal usage, simply use 'from PyTrilinos import Epetra'.  For testing,
# we want to be able to control whether we import from the build directory or
# from a system-installed version of PyTrilinos.
from testutil import fromPyTrilinosImport
Epetra = fromPyTrilinosImport('Epetra', options.testharness)

##########################################################################

class EpetraMapColoringTestCase(unittest.TestCase):
    "TestCase for Epetra_MapColorings"

    def setUp(self):
        self.comm        = Epetra.PyComm()
        self.myPID       = self.comm.MyPID()
        self.numProc     = self.comm.NumProc()
        self.mySize      = 4
        self.globalSize  = self.numProc * self.mySize
        self.map         = Epetra.Map(self.globalSize,0,self.comm)
        self.comm.Barrier()

    def tearDown(self):
        self.comm.Barrier()

    def testConstructor0(self):
        "Test Epetra.MapColoring BlockMap constructor"
        mc = Epetra.MapColoring(self.map)
        self.assertEqual(mc.Label(),                        "Epetra::MapColoring")
        self.assertEqual(isinstance(mc,Epetra.MapColoring), True                 )

    def testConstructor1(self):
        "Test Epetra.MapColoring (BlockMap,int) constructor"
        mc = Epetra.MapColoring(self.map,8)
        self.assertEqual(mc.Label(),                        "Epetra::MapColoring")
        self.assertEqual(isinstance(mc,Epetra.MapColoring), True                 )

    def testConstructor2(self):
        "Test Epetra.MapColoring (BlockMap,array) constructor"
        colors = range(self.map.NumMyElements())
        mc = Epetra.MapColoring(self.map, colors)
        self.assertEqual(mc.Label(),                        "Epetra::MapColoring")
        self.assertEqual(isinstance(mc,Epetra.MapColoring), True                 )

    def testConstructor3(self):
        "Test Epetra.MapColoring (BlockMap,array,int) constructor"
        colors = range(self.map.NumMyElements())
        mc = Epetra.MapColoring(self.map,colors, 31)
        self.assertEqual(mc.Label(),                        "Epetra::MapColoring")
        self.assertEqual(isinstance(mc,Epetra.MapColoring), True                 )

    def testConstructor4(self):
        "Test Epetra.MapColoring copy constructor"
        mc1 = Epetra.MapColoring(self.map)
        mc2 = Epetra.MapColoring(mc1)
        self.assertEqual(mc2.Label(),                        mc1.Label())
        self.assertEqual(isinstance(mc2,Epetra.MapColoring), True       )

    def testSetGet(self):
        "Test Epetra.MapColoring set/get methods"
        mc = Epetra.MapColoring(self.map,0)
        for i in range(self.map.NumMyElements()):
            self.assertEqual(mc[i], 0)
        for i in range(self.map.NumMyElements()):
            mc[i] = i
            self.assertEqual(mc[i], i)

    def testNumColors(self):
        "Test Epetra.MapColoring NumColors method"
        mc = Epetra.MapColoring(self.map)
        self.assertEqual(mc.NumColors(), 1)
        n = self.map.NumMyElements()
        for i in range(n):
            mc[i] = i
        self.assertEqual(mc.NumColors(), n)

    def testMaxNumColors(self):
        "Test Epetra.MapColoring MaxNumColors method"
        mc = Epetra.MapColoring(self.map)
        self.assertEqual(mc.MaxNumColors(), 1)
        n = self.map.NumMyElements()
        for i in range(n):
            mc[i] = i
        self.assertEqual(mc.MaxNumColors(), n)

    def testListOfColors(self):
        "Test Epetra.MapColoring ListOfColors method"
        colors = range(self.mySize)
        mc     = Epetra.MapColoring(self.map,colors)
        result = mc.ListOfColors()
        self.assertEqual(len(result), self.mySize);
        for i in range(self.mySize):
            self.assertEqual(result[i], colors[i])

    def testDefaultColor(self):
        "Test Epetra.MapColoring DefaultColor method"
        mc = Epetra.MapColoring(self.map)
        self.assertEqual(mc.DefaultColor(), 0)
        dc = 1
        mc = Epetra.MapColoring(self.map,dc)
        self.assertEqual(mc.DefaultColor(), dc)

    def testNumElementsWithColor(self):
        "Test Epetra.MapColoring NumElementsWithColor method"
        colors = range(self.mySize)
        mc     = Epetra.MapColoring(self.map,colors)
        for i in range(self.mySize):
            self.assertEqual(mc.NumElementsWithColor(i), 1)

    def testColorLIDList(self):
        "Test Epetra.MapColoring ColorLIDList method"
        colors = range(self.mySize)
        mc     = Epetra.MapColoring(self.map,colors)
        for i in range(self.mySize):
            result = mc.ColorLIDList(i)
            self.assertEqual(len(result), 1);
            self.assertEqual(result[0], i)

    def testElementColors(self):
        "Test Epetra.MapColoring ElementColors method"
        colors = range(self.mySize)
        mc     = Epetra.MapColoring(self.map,colors)
        result = mc.ElementColors()
        self.assertEqual(len(result), self.mySize);
        for i in range(self.mySize):
            self.assertEqual(result[i], i)

    def testGenerateBlockMap(self):
        "Test Epetra.MapColoring GenerateBlockMap method"
        colors = range(self.mySize)
        mc     = Epetra.MapColoring(self.map,colors)
        for color in colors:
            blockMap = mc.GenerateBlockMap(color)
            result   = blockMap.MyGlobalElements()
            self.assertEqual(len(result), 1)
            self.assertEqual(result[0],self.map.GID(color))

    def testGenerateMap(self):
        "Test Epetra.MapColoring GenerateMap method"
        colors = range(self.mySize)
        mc     = Epetra.MapColoring(self.map,colors)
        for color in colors:
            map    = mc.GenerateMap(color)
            result = map.MyGlobalElements()
            self.assertEqual(len(result), 1)
            self.assertEqual(result[0],self.map.GID(color))

##########################################################################

if __name__ == "__main__":

    # Create the test suite object
    suite = unittest.TestSuite()

    # Add the test cases to the test suite
    suite.addTest(unittest.makeSuite(EpetraMapColoringTestCase))

    # Create a communicator
    comm    = Epetra.PyComm()
    iAmRoot = comm.MyPID() == 0

    # Run the test suite
    if iAmRoot:
        print("\n**************************\nTesting Epetra.MapColoring\n"
              "**************************\n", file=sys.stderr)
    verbosity = options.verbosity * int(iAmRoot)
    result = unittest.TextTestRunner(verbosity=verbosity).run(suite)

    # Compute the total number of errors and failures
    errsPlusFails = comm.SumAll(len(result.errors) + len(result.failures))
    if errsPlusFails == 0 and iAmRoot: print("End Result: TEST PASSED")

    # Some versions of python don't properly delete suite upon exit
    del suite

    # Exit with error/nonerror code
    sys.exit(errsPlusFails)
