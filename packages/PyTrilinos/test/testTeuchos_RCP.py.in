#! ${PYTHON_EXECUTABLE}
# -*- python -*-

# @HEADER
# ***********************************************************************
#
#          PyTrilinos: Python Interfaces to Trilinos Packages
#                 Copyright (2014) Sandia Corporation
#
# Under the terms of Contract DE-AC04-94AL85000 with Sandia
# Corporation, the U.S. Government retains certain rights in this
# software.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the Corporation nor the names of the
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Questions? Contact William F. Spotz (wfspotz@sandia.gov)
#
# ***********************************************************************
# @HEADER

#
# System imports
from   __future__ import print_function
import numpy
import os
import sys
import unittest

#
# Parse the command-line arguments
from optparse import *
parser = OptionParser()
parser.add_option("-t", "--testharness", action="store_true",
                  dest="testharness", default=False,
                  help="test local build modules; prevent loading system-installed modules")
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
options,args = parser.parse_args()
#
# Under normal usage, simply use 'from PyTrilinos import Teuchos'.  For testing,
# we want to be able to control whether we import from the build directory or
# from a system-installed version of PyTrilinos.
from testutil import fromPyTrilinosImport
Teuchos = fromPyTrilinosImport('Teuchos', options.testharness)

##########################################################################

class TeuchosRCPTeuchosTestCase(unittest.TestCase):
    "Test the Teuchos.RCP functions on a Teuchos object"

    def setUp(self):
        self.p = Teuchos.ParameterList()

    def testIsNull(self):
        "Test Teuchos.RCP.is_null() for a Teuchos object"
        self.assertEquals(Teuchos.RCP.is_null(self.p), False)

    def testIsValidPtr(self):
        "Test Teuchos.RCP.is_valid_ptr() for a Teuchos object"
        self.assertEquals(Teuchos.RCP.is_valid_ptr(self.p), True)

    def testHasOwnership(self):
        "Test Teuchos.RCP.has_ownership() for a Teuchos object"
        self.assertEquals(Teuchos.RCP.has_ownership(self.p), True)

    def testStrongCount(self):
        "Test Teuchos.RCP.strong_count() for a Teuchos object"
        self.assertEquals(Teuchos.RCP.strong_count(self.p), 1)

    def testWeakCount(self):
        "Test Teuchos.RCP.weak_count() for a Teuchos object"
        self.assertEquals(Teuchos.RCP.weak_count(self.p), 0)

    def testTotalCount(self):
        "Test Teuchos.RCP.total_count() for a Teuchos object"
        self.assertEquals(Teuchos.RCP.total_count(self.p), 1)

##########################################################################

if (${Trilinos_ENABLE_Epetra}):
    Epetra = fromPyTrilinosImport('Epetra', options.testharness)

    def buildGraph(comm, nRows):
        map = Epetra.Map(nRows, 0, comm)
        graph = Epetra.CrsGraph(Epetra.Copy, map, 3)
        for gid in map.MyGlobalElements():
            if gid == 0:
                indices = [0, 1]
            elif gid == nRows-1:
                indices = [nRows-2, nRows-1]
            else:
                indices = [gid-1, gid, gid+1]
            graph.InsertGlobalIndices(gid, indices)
        graph.FillComplete()
        return graph

    def buildMatrix(comm, nRows):
        map = Epetra.Map(nRows, 0, comm)
        matrix = Epetra.CrsMatrix(Epetra.Copy, map, 3)
        for gid in map.MyGlobalElements():
            if gid == 0:
                indices = [0, 1]
                values  = [2.0, -1.0]
            elif gid == nRows-1:
                indices = [nRows-2, nRows-1]
                values  = [-1.0, 2.0]
            else:
                indices = [gid-1, gid, gid+1]
                values  = [-1.0 , 2.0, -1.0 ]
            matrix.InsertGlobalValues(gid, values, indices)
        matrix.FillComplete()
        return matrix
    
    class TeuchosRCPEpetraTestCase(unittest.TestCase):
        "Test the Teuchos.RCP functions on Epetra objects"

        def setUp(self):
            self.comm = Epetra.PyComm()
            self.map  = Epetra.Map(100,0,self.comm)
            self.vec  = Epetra.Vector(self.map)
            self.mvec = Epetra.MultiVector(self.map,4)

        def testIsNull(self):
            "Test Teuchos.RCP.is_null() for an Epetra object"
            self.assertEquals(Teuchos.RCP.is_null(self.comm), False)
            self.assertEquals(Teuchos.RCP.is_null(self.map ), False)
            self.assertEquals(Teuchos.RCP.is_null(self.vec ), False)
            self.assertEquals(Teuchos.RCP.is_null(self.mvec), False)

        def testIsValidPtr(self):
            "Test Teuchos.RCP.is_valid_ptr() for an Epetra object"
            self.assertEquals(Teuchos.RCP.is_valid_ptr(self.comm), True)
            self.assertEquals(Teuchos.RCP.is_valid_ptr(self.map ), True)
            self.assertEquals(Teuchos.RCP.is_valid_ptr(self.vec ), True)
            self.assertEquals(Teuchos.RCP.is_valid_ptr(self.mvec), True)

        def testHasOwnership(self):
            "Test Teuchos.RCP.has_ownership() for an Epetra object"
            self.assertEquals(Teuchos.RCP.has_ownership(self.comm), True)
            self.assertEquals(Teuchos.RCP.has_ownership(self.map ), True)
            self.assertEquals(Teuchos.RCP.has_ownership(self.vec ), True)
            self.assertEquals(Teuchos.RCP.has_ownership(self.mvec), True)

        def testStrongCount(self):
            "Test Teuchos.RCP.strong_count() for an Epetra object"
            self.assertEquals(Teuchos.RCP.strong_count(self.comm), 1)
            self.assertEquals(Teuchos.RCP.strong_count(self.map ), 1)
            self.assertEquals(Teuchos.RCP.strong_count(self.vec ), 1)
            self.assertEquals(Teuchos.RCP.strong_count(self.mvec), 1)

        def testWeakCount(self):
            "Test Teuchos.RCP.weak_count() for an Epetra object"
            self.assertEquals(Teuchos.RCP.weak_count(self.comm), 0)
            self.assertEquals(Teuchos.RCP.weak_count(self.map ), 0)
            self.assertEquals(Teuchos.RCP.weak_count(self.vec ), 0)
            self.assertEquals(Teuchos.RCP.weak_count(self.mvec), 0)

        def testTotalCount(self):
            "Test Teuchos.RCP.total_count() for an Epetra object"
            self.assertEquals(Teuchos.RCP.total_count(self.comm), 1)
            self.assertEquals(Teuchos.RCP.total_count(self.map ), 1)
            self.assertEquals(Teuchos.RCP.total_count(self.vec ), 1)
            self.assertEquals(Teuchos.RCP.total_count(self.mvec), 1)

##########################################################################

if (${Trilinos_ENABLE_Tpetra}):
    Tpetra = fromPyTrilinosImport('Tpetra', options.testharness)

    class TeuchosRCPTpetraTestCase(unittest.TestCase):
        "Test the Teuchos.RCP functions on Tpetra objects"

        def setUp(self):
            self.comm = Teuchos.DefaultComm.getComm()
            self.map  = Tpetra.Map(100,0,self.comm)

        def testIsNull(self):
            "Test Teuchos.RCP.is_null() for a Tpetra object"
            self.assertEquals(Teuchos.RCP.is_null(self.map), False)

        def testIsValidPtr(self):
            "Test Teuchos.RCP.is_valid_ptr() for a Tpetra object"
            self.assertEquals(Teuchos.RCP.is_valid_ptr(self.map), True)

        def testHasOwnership(self):
            "Test Teuchos.RCP.has_ownership() for a Tpetra object"
            self.assertEquals(Teuchos.RCP.has_ownership(self.map), True)

        def testStrongCount(self):
            "Test Teuchos.RCP.strong_count() for a Tpetra object"
            self.assertEquals(Teuchos.RCP.strong_count(self.map), 1)

        def testWeakCount(self):
            "Test Teuchos.RCP.weak_count() for a Tpetra object"
            self.assertEquals(Teuchos.RCP.weak_count(self.map), 0)

        def testTotalCount(self):
            "Test Teuchos.RCP.total_count() for a Tpetra object"
            self.assertEquals(Teuchos.RCP.total_count(self.map), 1)

##########################################################################

if (${Trilinos_ENABLE_Domi}):
    Domi = fromPyTrilinosImport('Domi', options.testharness)

    class TeuchosRCPDomiTestCase(unittest.TestCase):
        "Test the Teuchos.RCP functions on Domi objects"

        def setUp(self):
            self.comm   = Teuchos.DefaultComm.getComm()
            self.p      = {"comm dimensions" : numpy.array((-1,-1),dtype='i'),
                           "dimensions"      : numpy.array((50, 75),dtype='i')}
            self.mdMap  = Domi.MDMap(self.comm, self.p)
            self.mdVec  = Domi.MDVector(self.mdMap)

        def testIsNull(self):
            "Test Teuchos.RCP.is_null() for a Domi object"
            self.assertEquals(Teuchos.RCP.is_null(self.mdMap), False)
            self.assertEquals(Teuchos.RCP.is_null(self.mdVec), False)

        def testIsValidPtr(self):
            "Test Teuchos.RCP.is_valid_ptr() for a Domi object"
            self.assertEquals(Teuchos.RCP.is_valid_ptr(self.mdMap), True)
            self.assertEquals(Teuchos.RCP.is_valid_ptr(self.mdVec), True)

        def testHasOwnership(self):
            "Test Teuchos.RCP.has_ownership() for a Domi object"
            self.assertEquals(Teuchos.RCP.has_ownership(self.mdMap), True)
            self.assertEquals(Teuchos.RCP.has_ownership(self.mdVec), True)

        def testStrongCount(self):
            "Test Teuchos.RCP.strong_count() for a Domi object"
            self.assertEquals(Teuchos.RCP.strong_count(self.mdMap), 2)
            self.assertEquals(Teuchos.RCP.strong_count(self.mdVec), 1)

        def testWeakCount(self):
            "Test Teuchos.RCP.weak_count() for a Domi object"
            self.assertEquals(Teuchos.RCP.weak_count(self.mdMap), 0)
            self.assertEquals(Teuchos.RCP.weak_count(self.mdVec), 0)

        def testTotalCount(self):
            "Test Teuchos.RCP.total_count() for a Domi object"
            self.assertEquals(Teuchos.RCP.total_count(self.mdMap), 2)
            self.assertEquals(Teuchos.RCP.total_count(self.mdVec), 1)

##########################################################################

if (${Trilinos_ENABLE_Isorropia}):
    if (${Trilinos_ENABLE_Epetra}):
        Isorropia = fromPyTrilinosImport('Isorropia', options.testharness)

        class TeuchosRCPIsorropiaTestCase(unittest.TestCase):
            "Test the Teuchos.RCP functions on Isorropia objects"

            def setUp(self):
                self.p     = Teuchos.ParameterList({"PARTITIONING METHOD" : "CYCLIC"})
                self.comm  = Epetra.PyComm()
                self.nRows = 10 * self.comm.NumProc()
                self.map   = Epetra.Map(self.nRows, 0, self.comm)
                self.crsg  = buildGraph(self.comm, self.nRows)
                self.part  = Isorropia.Epetra.Partitioner(self.crsg, self.p)
                self.costs = Isorropia.Epetra.CostDescriber()

            def testIsNull(self):
                "Test Teuchos.RCP.is_null() for Isorropia objects"
                self.assertEquals(Teuchos.RCP.is_null(self.part ), False)
                self.assertEquals(Teuchos.RCP.is_null(self.costs), False)

            def testIsValidPtr(self):
                "Test Teuchos.RCP.is_valid_ptr() for Isorropia objects"
                self.assertEquals(Teuchos.RCP.is_valid_ptr(self.part ), True)
                self.assertEquals(Teuchos.RCP.is_valid_ptr(self.costs), True)

            def testHasOwnership(self):
                "Test Teuchos.RCP.has_ownership() for Isorropia objects"
                self.assertEquals(Teuchos.RCP.has_ownership(self.part ), True)
                self.assertEquals(Teuchos.RCP.has_ownership(self.costs), True)

            def testStrongCount(self):
                "Test Teuchos.RCP.strong_count() for Isorropia objects"
                self.assertEquals(Teuchos.RCP.strong_count(self.part ), 1)
                self.assertEquals(Teuchos.RCP.strong_count(self.costs), 1)

            def testWeakCount(self):
                "Test Teuchos.RCP.weak_count() for Isorropia objects"
                self.assertEquals(Teuchos.RCP.weak_count(self.part ), 0)
                self.assertEquals(Teuchos.RCP.weak_count(self.costs), 0)

            def testTotalCount(self):
                "Test Teuchos.RCP.total_count() for Isorropia objects"
                self.assertEquals(Teuchos.RCP.total_count(self.part ), 1)
                self.assertEquals(Teuchos.RCP.total_count(self.costs), 1)

##########################################################################

if (${Trilinos_ENABLE_Ifpack}):
    if (${Trilinos_ENABLE_Epetra}):
        IFPACK = fromPyTrilinosImport('IFPACK', options.testharness)

        class TeuchosRCPIFPACKTestCase(unittest.TestCase):
            "Test the Teuchos.RCP functions on IFPACK objects"

            def setUp(self):
                self.p     = Teuchos.ParameterList({"fact: level-of-fill" : 1})
                self.comm  = Epetra.PyComm()
                self.nRows = 10 * self.comm.NumProc()
                self.map   = Epetra.Map(self.nRows, 0, self.comm)
                self.crsm  = buildMatrix(self.comm, self.nRows)
                factory    = IFPACK.Factory()
                self.ict   = factory.Create("ICT", self.crsm)
                self.ilu   = factory.Create("ILU", self.crsm)

            def testIsNull(self):
                "Test Teuchos.RCP.is_null() for IFPACK objects"
                self.assertEquals(Teuchos.RCP.is_null(self.ict), False)
                self.assertEquals(Teuchos.RCP.is_null(self.ilu), False)

            def testIsValidPtr(self):
                "Test Teuchos.RCP.is_valid_ptr() for IFPACK objects"
                self.assertEquals(Teuchos.RCP.is_valid_ptr(self.ict), True)
                self.assertEquals(Teuchos.RCP.is_valid_ptr(self.ilu), True)

            def testHasOwnership(self):
                "Test Teuchos.RCP.has_ownership() for IFPACK objects"
                self.assertEquals(Teuchos.RCP.has_ownership(self.ict), True)
                self.assertEquals(Teuchos.RCP.has_ownership(self.ilu), True)

            def testStrongCount(self):
                "Test Teuchos.RCP.strong_count() for IFPACK objects"
                self.assertEquals(Teuchos.RCP.strong_count(self.ict), 1)
                self.assertEquals(Teuchos.RCP.strong_count(self.ilu), 1)

            def testWeakCount(self):
                "Test Teuchos.RCP.weak_count() for IFPACK objects"
                self.assertEquals(Teuchos.RCP.weak_count(self.ict), 0)
                self.assertEquals(Teuchos.RCP.weak_count(self.ilu), 0)

            def testTotalCount(self):
                "Test Teuchos.RCP.total_count() for IFPACK objects"
                self.assertEquals(Teuchos.RCP.total_count(self.ict), 1)
                self.assertEquals(Teuchos.RCP.total_count(self.ilu), 1)

##########################################################################

if (${Trilinos_ENABLE_ML}):
    ML = fromPyTrilinosImport('ML', options.testharness)

    class TeuchosRCPMLTestCase(unittest.TestCase):
        "Test the Teuchos.RCP functions on an ML object"

        def setUp(self):
            self.comm  = Epetra.PyComm()
            nRows      = 10 * self.comm.NumProc()
            matrix     = buildMatrix(self.comm, nRows)
            self.prec  = ML.MultiLevelPreconditioner(matrix, False)

        def testIsNull(self):
            "Test Teuchos.RCP.is_null() for an ML object"
            self.assertEquals(Teuchos.RCP.is_null(self.prec), False)

        def testIsValidPtr(self):
            "Test Teuchos.RCP.is_valid_ptr() for an ML object"
            self.assertEquals(Teuchos.RCP.is_valid_ptr(self.prec), True)

        def testHasOwnership(self):
            "Test Teuchos.RCP.has_ownership() for an ML object"
            self.assertEquals(Teuchos.RCP.has_ownership(self.prec), True)

        def testStrongCount(self):
            "Test Teuchos.RCP.strong_count() for an ML object"
            self.assertEquals(Teuchos.RCP.strong_count(self.prec), 1)

        def testWeakCount(self):
            "Test Teuchos.RCP.weak_count() for an ML object"
            self.assertEquals(Teuchos.RCP.weak_count(self.prec), 0)

        def testTotalCount(self):
            "Test Teuchos.RCP.total_count() for an ML object"
            self.assertEquals(Teuchos.RCP.total_count(self.prec), 1)

##########################################################################

if (${Trilinos_ENABLE_Anasazi}):
    Anasazi = fromPyTrilinosImport('Anasazi', options.testharness)

    class TeuchosRCPAnasaziTestCase(unittest.TestCase):
        "Test the Teuchos.RCP functions on Anasazi objects"

        def setUp(self):
            self.comm  = Epetra.PyComm()
            nRows      = 10 * self.comm.NumProc()
            matrix     = buildMatrix(self.comm, nRows)
            ivec       = Epetra.MultiVector(matrix.RowMap(), 5)
            self.bom   = Anasazi.BasicOutputManager()
            self.bep   = Anasazi.BasicEigenproblem(matrix,ivec)

        def testIsNull(self):
            "Test Teuchos.RCP.is_null() for Anasazi objects"
            self.assertEquals(Teuchos.RCP.is_null(self.bom), False)
            self.assertEquals(Teuchos.RCP.is_null(self.bep), False)

        def testIsValidPtr(self):
            "Test Teuchos.RCP.is_valid_ptr() for Anasazi objects"
            self.assertEquals(Teuchos.RCP.is_valid_ptr(self.bom), True)
            self.assertEquals(Teuchos.RCP.is_valid_ptr(self.bep), True)

        def testHasOwnership(self):
            "Test Teuchos.RCP.has_ownership() for Anasazi objects"
            self.assertEquals(Teuchos.RCP.has_ownership(self.bom), True)
            self.assertEquals(Teuchos.RCP.has_ownership(self.bep), True)

        def testStrongCount(self):
            "Test Teuchos.RCP.strong_count() for Anasazi objects"
            self.assertEquals(Teuchos.RCP.strong_count(self.bom), 1)
            self.assertEquals(Teuchos.RCP.strong_count(self.bep), 1)

        def testWeakCount(self):
            "Test Teuchos.RCP.weak_count() for Anasazi objects"
            self.assertEquals(Teuchos.RCP.weak_count(self.bom), 0)
            self.assertEquals(Teuchos.RCP.weak_count(self.bep), 0)

        def testTotalCount(self):
            "Test Teuchos.RCP.total_count() for Anasazi objects"
            self.assertEquals(Teuchos.RCP.total_count(self.bom), 1)
            self.assertEquals(Teuchos.RCP.total_count(self.bep), 1)

##########################################################################

if (${Trilinos_ENABLE_NOX}):
    NOX = fromPyTrilinosImport('NOX', options.testharness)

    class TeuchosRCPNOXTestCase(unittest.TestCase):
        "Test the Teuchos.RCP functions on NOX objects"

        def setUp(self):
            self.absResid  = NOX.StatusTest.NormF(1.0e-6)
            self.relResid  = NOX.StatusTest.NormF(1.0e-6,NOX.StatusTest.NormF.Unscaled)
            self.update    = NOX.StatusTest.NormUpdate(1.0e-5)
            self.wrms      = NOX.StatusTest.NormWRMS(1.0e-2, 1.0e-8)
            self.maxIters  = NOX.StatusTest.MaxIters(20)
            self.stagnate  = NOX.StatusTest.Stagnation()
            self.finiteVal = NOX.StatusTest.FiniteValue()
            self.converged = NOX.StatusTest.Combo(NOX.StatusTest.Combo.AND)
            self.converged.addStatusTest(self.absResid)
            self.converged.addStatusTest(self.relResid)
            self.converged.addStatusTest(self.wrms    )
            self.converged.addStatusTest(self.update  )
            self.combo = NOX.StatusTest.Combo(NOX.StatusTest.Combo.OR)
            self.combo.addStatusTest(self.maxIters)
            self.combo.addStatusTest(self.stagnate)
            self.combo.addStatusTest(self.finiteVal)

        def testIsNull(self):
            "Test Teuchos.RCP.is_null() for Anasazi objects"
            self.assertEquals(Teuchos.RCP.is_null(self.absResid ), False)
            self.assertEquals(Teuchos.RCP.is_null(self.relResid ), False)
            self.assertEquals(Teuchos.RCP.is_null(self.update   ), False)
            self.assertEquals(Teuchos.RCP.is_null(self.wrms     ), False)
            self.assertEquals(Teuchos.RCP.is_null(self.maxIters ), False)
            self.assertEquals(Teuchos.RCP.is_null(self.stagnate ), False)
            self.assertEquals(Teuchos.RCP.is_null(self.finiteVal), False)
            self.assertEquals(Teuchos.RCP.is_null(self.converged), False)
            self.assertEquals(Teuchos.RCP.is_null(self.combo    ), False)

        def testIsValidPtr(self):
            "Test Teuchos.RCP.is_valid_ptr() for Anasazi objects"
            self.assertEquals(Teuchos.RCP.is_valid_ptr(self.absResid ), True)
            self.assertEquals(Teuchos.RCP.is_valid_ptr(self.relResid ), True)
            self.assertEquals(Teuchos.RCP.is_valid_ptr(self.update   ), True)
            self.assertEquals(Teuchos.RCP.is_valid_ptr(self.wrms     ), True)
            self.assertEquals(Teuchos.RCP.is_valid_ptr(self.maxIters ), True)
            self.assertEquals(Teuchos.RCP.is_valid_ptr(self.stagnate ), True)
            self.assertEquals(Teuchos.RCP.is_valid_ptr(self.finiteVal), True)
            self.assertEquals(Teuchos.RCP.is_valid_ptr(self.converged), True)
            self.assertEquals(Teuchos.RCP.is_valid_ptr(self.combo    ), True)

        def testHasOwnership(self):
            "Test Teuchos.RCP.has_ownership() for Anasazi objects"
            self.assertEquals(Teuchos.RCP.has_ownership(self.absResid ), True)
            self.assertEquals(Teuchos.RCP.has_ownership(self.relResid ), True)
            self.assertEquals(Teuchos.RCP.has_ownership(self.update   ), True)
            self.assertEquals(Teuchos.RCP.has_ownership(self.wrms     ), True)
            self.assertEquals(Teuchos.RCP.has_ownership(self.maxIters ), True)
            self.assertEquals(Teuchos.RCP.has_ownership(self.stagnate ), True)
            self.assertEquals(Teuchos.RCP.has_ownership(self.finiteVal), True)
            self.assertEquals(Teuchos.RCP.has_ownership(self.converged), True)
            self.assertEquals(Teuchos.RCP.has_ownership(self.combo    ), True)

        def testStrongCount(self):
            "Test Teuchos.RCP.strong_count() for Anasazi objects"
            self.assertEquals(Teuchos.RCP.strong_count(self.absResid ), 2)
            self.assertEquals(Teuchos.RCP.strong_count(self.relResid ), 2)
            self.assertEquals(Teuchos.RCP.strong_count(self.update   ), 2)
            self.assertEquals(Teuchos.RCP.strong_count(self.wrms     ), 2)
            self.assertEquals(Teuchos.RCP.strong_count(self.maxIters ), 2)
            self.assertEquals(Teuchos.RCP.strong_count(self.stagnate ), 2)
            self.assertEquals(Teuchos.RCP.strong_count(self.finiteVal), 2)
            self.assertEquals(Teuchos.RCP.strong_count(self.converged), 1)
            self.assertEquals(Teuchos.RCP.strong_count(self.combo    ), 1)

        def testWeakCount(self):
            "Test Teuchos.RCP.weak_count() for Anasazi objects"
            self.assertEquals(Teuchos.RCP.weak_count(self.absResid ), 0)
            self.assertEquals(Teuchos.RCP.weak_count(self.relResid ), 0)
            self.assertEquals(Teuchos.RCP.weak_count(self.update   ), 0)
            self.assertEquals(Teuchos.RCP.weak_count(self.wrms     ), 0)
            self.assertEquals(Teuchos.RCP.weak_count(self.maxIters ), 0)
            self.assertEquals(Teuchos.RCP.weak_count(self.stagnate ), 0)
            self.assertEquals(Teuchos.RCP.weak_count(self.finiteVal), 0)
            self.assertEquals(Teuchos.RCP.weak_count(self.converged), 0)
            self.assertEquals(Teuchos.RCP.weak_count(self.combo    ), 0)

        def testTotalCount(self):
            "Test Teuchos.RCP.total_count() for Anasazi objects"
            self.assertEquals(Teuchos.RCP.total_count(self.absResid ), 2)
            self.assertEquals(Teuchos.RCP.total_count(self.relResid ), 2)
            self.assertEquals(Teuchos.RCP.total_count(self.update   ), 2)
            self.assertEquals(Teuchos.RCP.total_count(self.wrms     ), 2)
            self.assertEquals(Teuchos.RCP.total_count(self.maxIters ), 2)
            self.assertEquals(Teuchos.RCP.total_count(self.stagnate ), 2)
            self.assertEquals(Teuchos.RCP.total_count(self.finiteVal), 2)
            self.assertEquals(Teuchos.RCP.total_count(self.converged), 1)
            self.assertEquals(Teuchos.RCP.total_count(self.combo    ), 1)

##########################################################################

if __name__ == "__main__":

    # Create the test suite object
    suite = unittest.TestSuite()

    # Add the test cases to the test suite
    suite.addTest(unittest.makeSuite(TeuchosRCPTeuchosTestCase))
    if (${Trilinos_ENABLE_Epetra}):
        suite.addTest(unittest.makeSuite(TeuchosRCPEpetraTestCase))
    # if (${Trilinos_ENABLE_Tpetra}):
    #     suite.addTest(unittest.makeSuite(TeuchosRCPTpetraTestCase))
    if (${Trilinos_ENABLE_Domi}):
        suite.addTest(unittest.makeSuite(TeuchosRCPDomiTestCase))
    if (${Trilinos_ENABLE_Isorropia}):
        if (${Trilinos_ENABLE_Epetra}):
            suite.addTest(unittest.makeSuite(TeuchosRCPIsorropiaTestCase))
    if (${Trilinos_ENABLE_Ifpack}):
        suite.addTest(unittest.makeSuite(TeuchosRCPIFPACKTestCase))
    if (${Trilinos_ENABLE_ML}):
        suite.addTest(unittest.makeSuite(TeuchosRCPMLTestCase))
    if (${Trilinos_ENABLE_Anasazi}):
        suite.addTest(unittest.makeSuite(TeuchosRCPAnasaziTestCase))
    if (${Trilinos_ENABLE_NOX}):
        suite.addTest(unittest.makeSuite(TeuchosRCPNOXTestCase))

    # Create a communicator
    comm    = Teuchos.DefaultComm.getComm()
    iAmRoot = comm.getRank() == 0

    # Run the test suite
    if iAmRoot:
        print("\n********************\nTesting Teuchos.RCP\n"
              "********************\n", file=sys.stderr)
    v = options.verbosity * int(iAmRoot)
    result = unittest.TextTestRunner(verbosity=v).run(suite)

    # Compute the total number of errors and failures
    errsPlusFails = comm.reduceAll(Teuchos.REDUCE_SUM,
                                   len(result.errors) + len(result.failures))
    if errsPlusFails == 0 and iAmRoot: print("End Result: TEST PASSED")

    # Some versions of python don't properly delete suite upon exit
    del suite

    # Exit with error/nonerror code
    sys.exit(errsPlusFails)
