#! ${Python3_EXECUTABLE}
# -*- python -*-

# TODO:
#   - More thorough documentation, both in code and instructions for use.

# @HEADER
# ***********************************************************************
#
#          PyTrilinos: Python Interfaces to Trilinos Packages
#                 Copyright (2014) Sandia Corporation
#
# Under the terms of Contract DE-AC04-94AL85000 with Sandia
# Corporation, the U.S. Government retains certain rights in this
# software.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the Corporation nor the names of the
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Questions? Contact William F. Spotz (wfspotz@sandia.gov)
#
# ***********************************************************************
# @HEADER


# A good image to start with: ../../../../packages/isorropia/test/mtx/cage12.mtx

IMAGE_WIDTH = 400

METHODS_2D = ['HYPERGRAPH2D', 'RCB', 'CARTESIAN']
#
# System imports
from   optparse import *
import sys
from   types    import *
import random

USAGE = "Usage: IsorropiaVisualizer.py [options] matrixFile"

# Parse the command-line arguments
parser = OptionParser(usage=USAGE)
parser.add_option("-t", "--testharness", action="store_true",
                  dest="testharness", default=False,
                  help="test local build modules; prevent loading system-installed modules")
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=1,
                  help="set the verbosity level [default 1]")

parser.add_option("-x", "--width", type="int", dest="width", default=IMAGE_WIDTH,
                  help="set the width of the output image in pixels [default IMAGE_WIDTH constant]")

parser.add_option("-y", "--height", type="int", dest="height", default=-1,
                  help="set the height of the output image in pixels [default maintains aspect ratio]")

parser.add_option("-n", "--num-parts", type="int", dest="numParts", default=-1,
                  help="set the number of parts to distribute into [default is the number of processors run on]")

parser.add_option("-m", "--method", type="string", dest="method", default="BLOCK",
                  help="set the partitioning method (e.g. BLOCK, CYCLIC, RANDOM, HYPERGRAPH2D, RCB, CARTESIAN) [default BLOCK]")

parser.add_option("-c", "--background-color", type="int", dest="background", default=0x000000,
                  help="set the image background color in hex [default 0x000000]")

parser.add_option("-o", "--output-file", type="string", dest="outputFile", default="",
                  help="save the image generated to provided location. [default does not save output]")

parser.add_option("-s", "--show-image", type="string", dest="showImage", default="true",
                  help="show the image generated in a popup window. [default true]")

parser.add_option("-d", "--dimension", type="int", dest="dimension", default=-1,
                  help="Overrides whether to use a 2D or 1D partitioner [default assumes algorithm is 1D unless method is HYPERGRAPH2D, RCB or CARTESIAN]")

parser.add_option("-p", "--top-corner", type="string", dest="pointTL", default="0,0",
                  help="Defines the top-left corner of the window of interest to the given coordinates [default \"0,0\"]")

parser.add_option("-b", "--bottom-corner", type="string", dest="pointBR", default="-1,-1",
                  help="Defines the bottom-left corner of the window of interest to the given coordinates [default \"TOTAL_COLS,TOTAL_ROWS\"]")

parser.add_option("-r", "--random-seed", type="int", dest="seed", default=-1,
                  help="Sets the random seed so that colors are consistent between runs [no default value]")

options,args = parser.parse_args()

#
# Under normal usage, simply use 'from PyTrilinos import Epetra'.  For testing,
# we want to be able to control whether we import from the build directory or
# from a system-installed version of PyTrilinos.
from testutil import fromPyTrilinosImport
Epetra    = fromPyTrilinosImport('Epetra'   , options.testharness)
EpetraExt = fromPyTrilinosImport('EpetraExt', options.testharness)
Isorropia = fromPyTrilinosImport('Isorropia', options.testharness)
Teuchos   = fromPyTrilinosImport('Teuchos'  , options.testharness)

################################################################################

# Test script for drawing a matrix

def usage():
    if not iAmRoot: return
    print USAGE

if __name__ == "__main__":
    comm    = Epetra.PyComm()
    iAmRoot = comm.MyPID() == 0

    if iAmRoot and options.verbosity > 0: print "Loading Matrix"

    # Retrieve the filename from the argument list
    if len(args) != 1:
        usage()
        sys.exit(1)
    else: filename = args[0]

    # Deal with random seed
    if options.seed != -1:
        random.seed(options.seed)

    # Load the matrix
    crsm  = EpetraExt.MatrixMarketFileToCrsMatrix(filename, comm)

    # Determine the correct number of parts to run on. Default to the number of MPI processes.
    if options.numParts == -1:
        options.numParts = comm.NumProc()

    if iAmRoot and options.verbosity > 0: print "Constructing Partitioner"
    
    # Determine which partitioner to use, and construct it
    if options.dimension == 2 or (options.dimension == -1 and options.method.upper() in METHODS_2D):
        if iAmRoot and options.verbosity > 0: print "Using 2D Partitioner"
        part = Isorropia.Epetra.Partitioner2D(crsm,
                                            {"PARTITIONING METHOD": options.method, "NUM PARTS": str(options.numParts)},
                                            False)
    elif options.dimension == 1 or options.dimension == -1:
        if iAmRoot and options.verbosity > 0: print "Using 1D Partitioner"
        part = Isorropia.Epetra.Partitioner(crsm,
                                            {"PARTITIONING METHOD": options.method, "NUM PARTS": str(options.numParts)},
                                            False)

    if iAmRoot and options.verbosity > 0: print "Partitioning"
    part.compute(True)

    if iAmRoot and options.verbosity > 0: print "Constructing Visualizer"
    vis = Isorropia.Epetra.Visualizer(part, options.numParts, 0, options.verbosity)

    if iAmRoot and options.verbosity > 0: print "Setting Preferences"
    pointTL = options.pointTL.partition(",")
    pointBR = options.pointBR.partition(",")
    vis.setBgColor(options.background)
    vis.setImageWidth(options.width)
    vis.setImageHeight(options.height)
    vis.setViewingWindow((int(pointTL[0]),int(pointTL[2])), (int(pointBR[0]),int(pointBR[2])))

    if iAmRoot and options.verbosity > 0: print "Generating Image"
    vis.generateImage()
        
    # Save the image?
    if options.outputFile != "":
        if iAmRoot and options.verbosity > 0: print "Saving Image"
        vis.save(options.outputFile)

    # Show the image?
    if options.showImage.lower() == "true" or options.showImage.lower() == "yes":
        if iAmRoot and options.verbosity > 0: print "Showing Image"
        vis.show()

