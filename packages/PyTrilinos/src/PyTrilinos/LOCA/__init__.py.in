#! ${Python3_EXECUTABLE}
# -*- python -*-

# @HEADER
# ***********************************************************************
#
#          PyTrilinos: Python Interfaces to Trilinos Packages
#                 Copyright (2014) Sandia Corporation
#
# Under the terms of Contract DE-AC04-94AL85000 with Sandia
# Corporation, the U.S. Government retains certain rights in this
# software.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the Corporation nor the names of the
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Questions? Contact William F. Spotz (wfspotz@sandia.gov)
#
# ***********************************************************************
# @HEADER

"""
PyTrilinos.LOCA is the python interface to the Trilinos continuation
algorithm package LOCA:

    https://trilinos.org/docs/dev/packages/nox/doc/html/index.html

The purpose of LOCA is to provide a library of continuation
algorithms.  It include the following sub-modules:

    * Abstract           - Abstract continuation problem base classes
    * Extended           - Classes that extend NOX.Abstract classes to
                           handle an arbitrary number of multi-vectors
                           and scalars
    * MultiContinuation  - Groups and vectors for multi-parameter continuation
    * TimeDependent      - Abstract group for time dependent problems with a
                           mass matrix
    * TurningPoint       - Groups and vectors for turning point bifurcations
    * Hopf               - Groups and vectors for Hopf bifurcations
    * Pitchfork          - Groups and vectors for pitchfork bifurcations
    * Homotopy           - Groups that allow for Homotopy to be applied
    * PhaseTransition    - Groups and vectors for phase transition bifurcations
    * Parameter          - Centralized library for setting/retrieving numerical
                           parameter values in application codes
    * BorderedSolver     - Strategies for solving bordered systems of equations
    * BorderedSystem     - Interface for groups that are bordered systems
    * Bifurcation        - Strategies for creating bifurcation objects
    * StatusTest         - Status checkers
    * StepSize           - Collection of step size control strategies
    * MultiPredictor     - Predictor direction strategies

and classes:

    * GlobalData      - Container class that holds ref-count pointers to
                        'global' objects, i.e., objects that nearly every LOCA
                        object will need access to
    * ErrorCheck      - Error checking algorithm for NOX/LOCA routines
    * Factory         - Provides a single location for instantiating various
                        strategies based on parameter list choices
    * DerivUtils      - Generic derivative computation class to compute various
                        derivatives via finite differencing
    * Stepper         - Implementation of LOCA.Abstract.Iterator for computing
                        points along a continuation curve
    * ParameterVector - LOCA's container for holding a set of parameters that
                        are used by the LOCA continuation routines
"""

# We need to avoid the following being generated by SWIG:
#
#     class LOCAClass(__init__.BaseClass):
#
# So we put all of the classes, etc., that would logically go into this
# __init__.py file into a sub-module called "Base". SWIG will then generate
#
#     class LOCAClass(Base.BaseClass):
#
# and to make that work, we just import the Base module:
from . import Base

# Users, on the other hand, don't want to reference LOCA.Base, because the
# Base namespace is not a part of Trilinos. Users want to do this:
#
#    class MyClass(LOCA.BaseClass):
#
# and we make that work by creating a reference to all of the symbols in Base
# in this module, while preserving certain special variables:
this_name = __name__
this_doc  = __doc__
this_file = __file__
try:
    this_cached = __cached__
    this_loader = __loader__
    this_spec   = __spec__
except NameError:
    pass

globals().update(Base.__dict__)

__name__ = this_name
__doc__  = this_doc
__file__ = this_file
try:
    __cached__ = this_cached
    __loader__ = this_loader
    __spec__   = this_spec
except NameError:
    pass

# Note that this infrastructure means that LOCA.Base.Name and LOCA.Name
# are both references to the same object.

# Take care of importing all other sub-modules
import PyTrilinos.NOX

# LOCA sub-modules
__all__ = ['Abstract',
           'Extended',
           'MultiContinuation',
           'TimeDependent',
           'TurningPoint',
           'Hopf',
           'Pitchfork',
           'Homotopy',
           'PhaseTransition',
           'Abstract',
           'Parameter',
           'BorderedSolver',
           'BorderedSystem',
           'Bifurcation',
           'StatusTest',
           'StepSize',
           'MultiPredictor',
           'Eigensolver',
           'EigenvalueSort',
           'SaveEigenData',
           'AnasaziOperator'
           ]
from . import Abstract
from . import Extended
from . import MultiContinuation
from . import TimeDependent
from . import TurningPoint
from . import Hopf
from . import Pitchfork
from . import Homotopy
from . import PhaseTransition
from . import Parameter
from . import BorderedSolver
from . import BorderedSystem
from . import Bifurcation
from . import StatusTest
from . import StepSize
from . import MultiPredictor
from . import Eigensolver
from . import EigenvalueSort
from . import SaveEigenData
from . import AnasaziOperator

# LOCA.Epetra
if "${NOX_ENABLE_ABSTRACT_IMPLEMENTATION_EPETRA}".upper() not in ("", "0", "FALSE", "N", "NO", "OFF"):
    __all__.append("Epetra")
    from . import Epetra
