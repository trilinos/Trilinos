#! ${PYTHON_EXECUTABLE}
# -*- python -*-

import glob
import os
import re

################################################################################

def cmake_bool(value):
    """
    Return a Python boolean corresponding to a CMAKE string representation of a
    boolean
    """
    if value.upper() in ("", "0", "FALSE", "N", "NO", "OFF"):
        return False
    return True

################################################################################

# Get the PyTrilinos configuration
WITH_EPETRA    = cmake_bool("${PyTrilinos_ENABLE_Epetra}"   )
WITH_TRIUTILS  = cmake_bool("${PyTrilinos_ENABLE_Triutils}" )
WITH_TPETRA    = cmake_bool("${PyTrilinos_ENABLE_Tpetra}"   )
WITH_DOMI      = cmake_bool("${PyTrilinos_ENABLE_Domi}"     )
WITH_EPETRAEXT = cmake_bool("${PyTrilinos_ENABLE_EpetraExt}")
WITH_ISORROPIA = cmake_bool("${PyTrilinos_ENABLE_Isorropia}")
WITH_PLIRIS    = cmake_bool("${PyTrilinos_ENABLE_Pliris}"   )
WITH_AZTECOO   = cmake_bool("${PyTrilinos_ENABLE_AztecOO}"  )
WITH_GALERI    = cmake_bool("${PyTrilinos_ENABLE_Galeri}"   )
WITH_AMESOS    = cmake_bool("${PyTrilinos_ENABLE_Amesos}"   )
WITH_IFPACK    = cmake_bool("${PyTrilinos_ENABLE_Ifpack}"   )
WITH_KOMPLEX   = cmake_bool("${PyTrilinos_ENABLE_Komplex}"  )
WITH_ANASAZI   = cmake_bool("${PyTrilinos_ENABLE_Anasazi}"  )
WITH_ML        = cmake_bool("${PyTrilinos_ENABLE_ML}"       )
WITH_NOX       = cmake_bool("${PyTrilinos_ENABLE_NOX}"      )
WITH_LOCA      = cmake_bool("${NOX_ENABLE_LOCA}"            )

WITH_MPI       = cmake_bool("${TPL_ENABLE_MPI}"             )
WITH_PETSC     = cmake_bool("${TPL_ENABLE_PETSC}"           )

################################################################################

def get_mpi_version():
    header = "${MPI_BASE_DIR}/include/mpi.h"
    version = ""
    for line in open(header, 'r').readlines():
        if "MPI_VERSION" in line:
            version = line.split(" ")[2]
            break
    return version

################################################################################

def get_input_files():
    """
    Return the list of SWIG interface files that should be processed
    """
    excludes = ("Teuchos_RCP_typemaps.i")

    os.chdir("${CMAKE_CURRENT_SOURCE_DIR}")
    result = glob.glob("Teuchos*.i")
    if (WITH_EPETRA):
        result.extend(glob.glob("Epetra*.i"))
    if (WITH_TRIUTILS):
        result.extend(glob.glob("TriUtils*.i"))
    if (WITH_TPETRA):
        result.extend(glob.glob("Tpetra*.i"))
    if (WITH_DOMI):
        result.extend(glob.glob("Domi*.i"))
    if (WITH_EPETRAEXT):
        result.extend(glob.glob("EpetraExt*.i"))
    if (WITH_ISORROPIA):
        swig_files = glob.glob("Isorropia*.i")
        for file in swig_files:
            if "Epetra" in file:
                if (WITH_EPETRA):
                    result.append(file)
            else:
                result.append(file)
    if (WITH_PLIRIS):
        result.extend(glob.glob("Pliris*.i"))
    if (WITH_AZTECOO):
        result.extend(glob.glob("AztecOO*.i"))
    if (WITH_GALERI):
        result.extend(glob.glob("Galeri*.i"))
    if (WITH_AMESOS):
        result.extend(glob.glob("Amesos*.i"))
    if (WITH_IFPACK):
        result.extend(glob.glob("IFPACK*.i"))
    if (WITH_KOMPLEX):
        result.extend(glob.glob("Komplex*.i"))
    if (WITH_ANASAZI):
        result.extend(glob.glob("Anasazi*.i"))
    if (WITH_ML):
        result.extend(glob.glob("ML*.i"))
    if (WITH_NOX):
        swig_files = glob.glob("NOX*.i")
        for file in swig_files:
            if "Epetra" in file:
                if (WITH_EPETRA):
                    result.append(file)
            else:
                result.append(file)
    if (WITH_LOCA):
        swig_files = glob.glob("LOCA*.i")
        for file in swig_files:
            if "Epetra" in file:
                if (WITH_EPETRA):
                    result.append(file)
            else:
                result.append(file)

    for e in excludes:
        if e in result:
            result.remove(e)

    return result

################################################################################

def get_header_files():
    """
    Return the list of header files that should be #include-d in the generated
    SWIG interface file
    """
    result = ["PyTrilinos_config.h"]
    result.append("PyTrilinos_Teuchos_Headers.hpp")
    if (WITH_EPETRA):
        result.append("PyTrilinos_Epetra_Headers.hpp")
    if (WITH_TRIUTILS):
        result.append("PyTrilinos_TriUtils_Headers.hpp")
    if (WITH_EPETRAEXT):
        result.append("PyTrilinos_EpetraExt_Headers.hpp")
    if (WITH_DOMI):
        result.append("PyTrilinos_Domi_Headers.hpp")
    if (WITH_TPETRA):
        result.append("PyTrilinos_Tpetra_Headers.hpp")
    if (WITH_ISORROPIA):
        result.append("PyTrilinos_Isorropia_Headers.hpp")
    if (WITH_PLIRIS):
        result.append("PyTrilinos_Pliris_Headers.hpp")
    if (WITH_AZTECOO):
        result.append("PyTrilinos_AztecOO_Headers.hpp")
    if (WITH_GALERI):
        result.append("PyTrilinos_Galeri_Headers.hpp")
    if (WITH_AMESOS):
        result.append("PyTrilinos_Amesos_Headers.hpp")
    if (WITH_IFPACK):
        result.append("PyTrilinos_IFPACK_Headers.hpp")
    if (WITH_KOMPLEX):
        result.append("PyTrilinos_Komplex_Headers.hpp")
    if (WITH_ML):
        result.append("PyTrilinos_ML_Headers.hpp")
    if (WITH_ANASAZI):
        result.append("PyTrilinos_Anasazi_Headers.hpp")
    if (WITH_NOX):
        result.append("PyTrilinos_NOX_Headers.hpp")
        result.append("PyTrilinos_NOX_Abstract_Headers.hpp")
        result.append("PyTrilinos_NOX_Solver_Headers.hpp")
        result.append("PyTrilinos_NOX_StatusTest_Headers.hpp")
        if (WITH_EPETRA):
            result.append("PyTrilinos_NOX_Epetra_Headers.hpp")
        if (WITH_PETSC):
            result.append("PyTrilinos_NOX_PETSc_Headers.hpp")
    if (WITH_LOCA):
        result.append("PyTrilinos_LOCA_Headers.hpp")
        result.append("PyTrilinos_LOCA_Hopf_Headers.hpp")
        if (WITH_EPETRA):
            result.append("PyTrilinos_LOCA_Epetra_Headers.hpp")

    return result

################################################################################

def get_typedefs():
    """
    Return the list of typedefs that should be defined in the generated SWIG
    interface file
    """
    result = []
    if (WITH_TPETRA):
        result.append(("Tpetra::Details::DefaultTypes::scalar_type",
                       "DefaultScalarType"))
        result.append(("Tpetra::Details::DefaultTypes::local_ordinal_type",
                       "DefaultLOType"))
        result.append(("Tpetra::Details::DefaultTypes::global_ordinal_type",
                       "DefaultGOType"))
        result.append(("Tpetra::Details::DefaultTypes::node_type",
                       "DefaultNodeType"))

    return result

################################################################################

def parse_class(classname):
    """
    Given a string representation of a C++ class name, return a dictionary with
    three key-value pairs:

        "namespaces"    : a list of the class namespaces, possibly empty
        "name"          : the class name
        "template-args" : a list of template arguments (e.g. ["ARG1", "ARG2", ...])
    """
    result = {}
    if classname[-1] != ">":
        name = classname
        templates = []
    else:
        open_brackets = 1
        index = len(classname) - 1
        while open_brackets > 0 and index > 0:
            index -= 1
            if classname[index] == ">":
                open_brackets += 1
            elif classname[index] == "<":
                open_brackets -= 1
        name = classname[:index]
        templates = classname[index:].split(",")
    components = name.split("::")
    if len(components) == 1:
        result["namespaces"] = []
    else:
        result["namespaces"] = components[:-1]
    result["name"] = components[-1]
    result["template_args"] = []
    for i in range(len(templates)):
        result["template_args"].append("ARG%d" % (i+1))
    return result

################################################################################

def form_class_filename(parsed_class):
    """
    Given a class name dictionary obtained from parse_class(), return the
    Trilinos filename that contains the prototype for that class
    """

    # Determine the extension
    if parsed_class["name"].startswith("Epetra_"):
        ext = ".h"
    elif parsed_class["name"].startswith("Amesos_"):
        ext = ".h"
    elif parsed_class["name"].startswith("AztecOO_"):
        ext = ".h"
    elif parsed_class["name"].startswith("Ifpack_"):
        ext = ".h"
    elif parsed_class["name"].startswith("Komplex_"):
        ext = ".h"
    elif parsed_class["name"] == "Pliris":
        ext = ".h"
    elif parsed_class["name"].startswith("Trilinos_Util_"):
        ext = ".h"
    elif parsed_class["namespaces"][0] == "EpetraExt":
        ext = ".h"
    elif parsed_class["namespaces"][0] == "MLAPI":
        ext = ".h"
    elif parsed_class["namespaces"][0] in ("NOX", "LOCA"):
        ext = ".H"
    else:
        ext = ".hpp"

    # Generate the filename
    result = ""
    for namespace in parsed_class["namespaces"]:
        result += (namespace + "_")
    if parsed_class["namespaces"] == ["Teuchos"] and \
       parsed_class["name"].endswith("Comm"):
        result += ("Default" + parsed_class["name"] + ext)
    else:
        result += (parsed_class["name"] + ext)

    # Fix filenames for packages that break the rules
    if result == "Tpetra_Map.hpp":
        result = "Tpetra_Map_decl.hpp"
    if result == "Tpetra_Export.hpp":
        result = "Tpetra_Export_decl.hpp"
    if result == "Tpetra_Import.hpp":
        result = "Tpetra_Import_decl.hpp"
    if result.startswith("Isorropia_Epetra_"):
        result = "Isorropia_Epetra" + result[17:]
    if result == "MLAPI_DoubleVector.h":
        result = "MLAPI_MultiVector.h"
    if result == "MLAPI_ML_Operator_Box.h":
        result = "MLAPI_Operator_Box.h"
    if result == "ML_Epetra_MultiLevelPreconditioner.hpp":
        result = "ml_MultiLevelPreconditioner.h"
    if result.startswith("Anasazi_"):
        result = result[:7] + result[8:]
    if result.startswith("AnasaziEpetra"):
        result = "AnasaziEpetraAdapter.hpp"
    if result == "NOX_Epetra_LinearSystemAztecOO.H":
        result = "NOX_Epetra_LinearSystem_AztecOO.H"

    return result    

################################################################################

def get_ignores():
    result = []
    if (WITH_ML):
        result.append("MLAPI::MultiVector")
    return result

################################################################################

def get_rcp_classes(swig_filenames):
    """
    Return a list of strings that represent the C++ classes that are stored
    using a Teucho::RCP in PyTrilinos. The input argument, swig_filenames, is a
    list of SWIG interface files to search.
    """
    match_excludes = ("##", "CLASS", "%shared_ptr", "ostream", "std::vector")
    regexes = [re.compile(r"%teuchos_rcp\((.+)\)"       , re.MULTILINE),
               re.compile(r"%teuchos_rcp_dap\(.+,(.+)\)", re.MULTILINE)]
    result = set()
    for filename in swig_filenames:
        text = open(filename, 'r').read()
        for regex in regexes:
            matches = regex.findall(text)
            for match in matches:
                add_match = True
                for me in match_excludes:
                    if me in match: add_match = False
                if add_match:
                    match = match.replace("< ","<")
                    match = match.replace(" >",">")
                    match = match.replace(">>","> >")
                    if "Petsc" in match:
                        if (WITH_PETSC):
                            result.add(match)
                    else:
                        result.add(match)
    # Hack for Tpetra
    if "Tpetra.i" in swig_filenames:
        result.add("Tpetra::Map<PYTRILINOS_LOCAL_ORD, PYTRILINOS_GLOBAL_ORD, DefaultNodeType>")
        result.add("Tpetra::Details::Transfer<PYTRILINOS_LOCAL_ORD, PYTRILINOS_GLOBAL_ORD, DefaultNodeType>")
        result.add("Tpetra::Export<PYTRILINOS_LOCAL_ORD, PYTRILINOS_GLOBAL_ORD, DefaultNodeType>")
        result.add("Tpetra::Import<PYTRILINOS_LOCAL_ORD, PYTRILINOS_GLOBAL_ORD, DefaultNodeType>")
        regex = re.compile(r"%tpetra_scalars\((.+),.+\)", re.MULTILINE)
        text = open("Tpetra.i",'r').read()
        matches = regex.findall(text)
        for scalar in matches:
            if "SCALAR" not in scalar:
                scalar = scalar.strip()
                result.add("Tpetra::DistObject<%s, PYTRILINOS_LOCAL_ORD, PYTRILINOS_GLOBAL_ORD, DefaultNodeType>" % scalar)
                result.add("Tpetra::MultiVector<%s, PYTRILINOS_LOCAL_ORD, PYTRILINOS_GLOBAL_ORD, DefaultNodeType>" % scalar)
                result.add("Tpetra::Vector<%s, PYTRILINOS_LOCAL_ORD, PYTRILINOS_GLOBAL_ORD, DefaultNodeType>" % scalar)
    # End hack for Tpetra

    result = list(result)
    for i in range(len(result)):
        rcp = result[i].strip()
        result[i] = rcp
    result.sort()
    return result

################################################################################

def reorder_classnames(classnames):
    """
    Given a list of class names, reorder them such that base classes appear at
    the beginning of the list. This will be the order in which the %import
    statements are listed in the generated SWIG interface file, so the
    lowest-level base classes must appear first. Based on the logic here, the
    highest-level classes should appear first in the base_classes list.
    """
    base_classes = ["LOCA::MultiContinuation::ConstraintInterfaceMVDX",
                    "LOCA::MultiContinuation::ConstraintInterface",
                    "LOCA::Hopf::MooreSpence::SolverStrategy",
                    "LOCA::Epetra::Interface::Required",
                    "LOCA::Epetra::Group",
                    "LOCA::MultiContinuation::ConstrainedGroup",
                    "LOCA::Abstract::TransposeSolveGroup",
                    "LOCA::Abstract::Group",
                    "LOCA::PhaseTransition::AbstractGroup",
                    "LOCA::Hopf::MinimallyAugmented::FiniteDifferenceGroup",
                    "LOCA::Hopf::MooreSpence::FiniteDifferenceGroup",
                    "LOCA::Hopf::MinimallyAugmented::AbstractGroup",
                    "LOCA::Hopf::MooreSpence::AbstractGroup",
                    "LOCA::TimeDependent::AbstractGroup",
                    "LOCA::TurningPoint::MinimallyAugmented::FiniteDifferenceGroup",
                    "LOCA::TurningPoint::MooreSpence::FiniteDifferenceGroup",
                    "LOCA::MultiContinuation::FiniteDifferenceGroup",
                    "LOCA::Pitchfork::MinimallyAugmented::AbstractGroup",
                    "LOCA::Pitchfork::MooreSpence::AbstractGroup",
                    "LOCA::Homotopy::AbstractGroup",
                    "LOCA::TurningPoint::MinimallyAugmented::AbstractGroup",
                    "LOCA::TurningPoint::MooreSpence::AbstractGroup",
                    "LOCA::MultiContinuation::AbstractGroup",
                    "NOX::Epetra::Group",
                    "NOX::Abstract::Group",
                    "NOX::Epetra::Interface::Required",
                    "NOX::Epetra::Interface::Jacobian",
                    "NOX::Epetra::Interface::Preconditioner",
                    "NOX::StatusTest::Generic",
                    "Anasazi::OrthoManager<double, Epetra_MultiVector>",
                    "Anasazi::Eigenproblem<double, Epetra_MultiVector, Epetra_Operator>",
                    "Anasazi::SortManager<double>",
                    "Anasazi::OutputManager<double>",
                    "Ifpack_Preconditioner",
                    "Isorropia::Epetra::Operator",
                    "Isorropia::LevelScheduler",
                    "Isorropia::Orderer",
                    "Isorropia::Redistributor",
                    "Isorropia::Partitioner",
                    "Isorropia::Operator",
                    "Epetra_VbrMatrix",
                    "Epetra_RowMatrix",
                    "Epetra_Operator",
                    "Epetra_SerialDenseOperator",
                    "Epetra_MultiVector",
                    "Epetra_BLAS",
                    "Epetra_Map",
                    "Epetra_BlockMap",
                    "Epetra_DistObject",
                    "Epetra_SrcDistObject",
                    "Epetra_CompObject",
                    "Epetra_Object",
                    "Teuchos::Describable",
                    "Teuchos::LabeledObject"]
    for classname in base_classes:
        if classname in classnames:
            classnames.remove(classname)
            classnames.insert(0,classname)

################################################################################

def get_import_directives(teuchos_rcps):
    result = []
    for classname in teuchos_rcps:
        filename = form_class_filename(parse_class(classname))
        swig_directive = '%import "' + filename + '"'
        if swig_directive not in result:
            result.append(swig_directive)

    # if (WITH_TPETRA):
    #     # Find the Tpetra::Map import
    #     index = result.index('%import "Tpetra_Map_decl.hpp"')
    #     result.insert(index  , "%ignore Tpetra::Map::Map;")
    #     result.insert(index+1, "%ignore Tpetra::Map::getGlobalNumElements;")
    #     result.insert(index+2, "%ignore Tpetra::Map::getRemoteIndexList;")
    #     result.insert(index+3, "%ignore Tpetra::Map::getMyGlobalIndices;")
    #     result.insert(index+5, "%template(Map_default) Tpetra::Map<PYTRILINOS_LOCAL_ORD,PYTRILINOS_GLOBAL_ORD,DefaultNodeType>;")

    if (WITH_ANASAZI):
        # Find the first Anasazi import and insert AnasaziTypes.hpp before it
        index = result.index('%import "AnasaziOutputManager.hpp"')
        result.insert(index, '%import "AnasaziTypes.hpp"')
        if (WITH_EPETRA):
            # Move AnasaziEpetraAdapter.hpp to after last Anasazi import
            result.remove('%import "AnasaziEpetraAdapter.hpp"')
            index = result.index('%import "AnasaziStatusTestResNorm.hpp"')
            result.insert(index+1, '%import "AnasaziEpetraAdapter.hpp"')
        # Add %template directives needed as base classes
        index = result.index('%import "AnasaziMultiVec.hpp"')
        result.insert(index+1, "%template(MultiVecDouble) Anasazi::MultiVec<double>;")
        index = result.index('%import "AnasaziOperator.hpp"')
        result.insert(index+1, "%template(OperatorDouble) Anasazi::Operator<double>;")

    return result

################################################################################

def main():
    """
    Generate the SWIG interface file by printing the SWIG directives to stdout
    """

    swig_files    = get_input_files()
    header_files  = get_header_files()
    typedefs      = get_typedefs()
    ignores       = get_ignores()
    teuchos_rcps  = get_rcp_classes(swig_files)
    reorder_classnames(teuchos_rcps)
    import_directives = get_import_directives(teuchos_rcps)

    ############################################################
    # Generate the SWIG interface file for Teuchos.RCP
    ############################################################

    # Define the module
    print("%define %teuchos_rcp_docstring")
    print('"')
    print("PyTrilinos.Teuchos.RCP is a special PyTrilinos module designed to")
    print("provide access to RCP methods for PyTrilinos variables that are")
    print("stored internally via Teuchos::RCP reference counted pointers.")
    print("")
    print("Inspired by the python function sys.getrefcount(object), this module")
    print("provides a number of Teuchos::RCP methods as python functions that")
    print("take a PyTrilinos object as their argument. These functions include:")
    print("")
    print("    * is_null(obj)        - Return True if underlying pointer is NULL")
    print("    * is_valid_ptr(obj)   - Return True if underlying pointer is valid")
    print("    * has_ownership(obj)  - Return True if this RCP owns the object")
    print("    * strong_count(obj)   - Return the strong reference count")
    print("    * weak_count(obj)     - Return the weak reference count")
    print("    * total_count(obj)    - Return the total reference count")
    print('"')
    print("%enddef")
    print("")
    print('%module(package   = "PyTrilinos.Teuchos",')
    print("        docstring = %teuchos_rcp_docstring) RCP")
    print("")

    # Specify include files directly into the wrapper file
    print("%{")
    print("// Import the NumPy interface")
    print("#define NO_IMPORT_ARRAY")
    print('#include "numpy_include.hpp"')
    print("")
    print("// Include the header files")
    for header in header_files:
        print('#include "%s"' % header)
    print("%}")
    print("")

    # Standard %include files
    print("")
    print("// Standard SWIG %include files")
    print('%include "stl.i"')
    print('%include "std_iostream.i"')
    print("")
    print("// SWIG NumPy interface file")
    print('%include "numpy.i"')
    print("")

    # Define the typedefs for SWIG processing
    if len(typedefs) > 0:
        print("// Define the typedefs for SWIG processing")
        print("%inline")
        print("%{")
        for typedef in typedefs:
            print("  typedef %s %s;" % typedef)
        print("%}")
        print("")

    # Tell SWIG about the PyTrilinos configuration
    print("// Tell SWIG about the PyTrilinos configuration")
    print('%include "PyTrilinos_config.h"')
    print("")

    # Tell SWIG about MPI
    if (WITH_MPI):
        print("// Tell SWIG the MPI version")
        print("#define MPI_VERSION %s" % get_mpi_version())
        print("")

    # Tell SWIG about the DLL export macros
    print("// Tell SWIG about the DLL export macros")
    print('%include "Teuchos_DLLExportMacro.h"')
    if (WITH_EPETRA):
        print('%include "Epetra_DLLExportMacro.h"')
        if (WITH_ANASAZI):
            print('%include "Anasaziepetra_DLLExportMacro.h"')
    print("")

    # Turn off specific warnings
    print("// Turn off warnings")
    print("# pragma SWIG nowarn=302")
    print("# pragma SWIG nowarn=314")
    print("# pragma SWIG nowarn=317")
    print("# pragma SWIG nowarn=325")
    print("# pragma SWIG nowarn=362")
    print("# pragma SWIG nowarn=389")
    print("")

    # %ignore classes that will get %imported but whose base classes do not get
    # %imported
    print("// %ignore classes that will get %imported but whose base classes do not")
    print("// get %imported")
    for i in ignores:
        line = "ignore %s;" % i
        print("%" + line)
    print("")

    # %import the Trilinos header files
    print("// Import the Trilinos header files")
    for swig_directive in import_directives:
        print(swig_directive)
    print("")

    # Specify the python docstrings for the Teuchos.RCP functions
    print('%feature("docstring")')
    print("is_null")
    print('"is_null(obj) -> bool')
    print("")
    print("Return true if obj is a python wrapper for a C++ object stored as a")
    print('Teuchos::RCP and the underlying pointer is NULL"')
    print("")
    print('%feature("docstring")')
    print("is_valid_ptr")
    print('"is_valid_ptr(obj) -> bool')
    print("")
    print("Return true if obj is a python wrapper for a C++ object stored as a")
    print('Teuchos::RCP and the underlying pointer is valid"')
    print("")
    print('%feature("docstring")')
    print("has_ownership")
    print('"has_ownership(obj) -> bool')
    print("")
    print("Return true if obj is a python wrapper for a C++ object stored as a")
    print('Teuchos::RCP that has ownership of the underlying pointer"')
    print("")
    print('%feature("docstring")')
    print("strong_count")
    print('"strong_count(obj) -> int')
    print("")
    print("If obj is a python wrapper for a C++ object stored as a Teuchos::RCP,")
    print('return the strong reference count"')
    print("")
    print('%feature("docstring")')
    print("weak_count")
    print('"weak_count(obj) -> int')
    print("")
    print("If obj is a python wrapper for a C++ object stored as a Teuchos::RCP,")
    print('return the weak reference count"')
    print("")
    print('%feature("docstring")')
    print("total_count")
    print('"total_count(obj) -> int')
    print("")
    print("If obj is a python wrapper for a C++ object stored as a Teuchos::RCP,")
    print('return the total reference count"')
    print("")

    # Define the Teuchos.RCP functions
    print("%inline")
    print("{")
    print("")
    # Note: reverse teuchos_rcps to define functions for the base classes last
    for classname in reversed(teuchos_rcps):
        print("// %s" % classname)
        print("bool is_null(      Teuchos::RCP< %s > & object){ return object.is_null()      ; }" % classname)
        print("bool is_valid_ptr( Teuchos::RCP< %s > & object){ return object.is_valid_ptr() ; }" % classname)
        print("bool has_ownership(Teuchos::RCP< %s > & object){ return object.has_ownership(); }" % classname)
        print("int  strong_count( Teuchos::RCP< %s > & object){ return object.strong_count() ; }" % classname)
        #print('int  strong_count( Teuchos::RCP< %s > & object){ std::cout << "%s" << std::endl; return object.strong_count() ; }' % (classname, classname))
        print("int  weak_count(   Teuchos::RCP< %s > & object){ return object.weak_count()   ; }" % classname)
        print("int  total_count(  Teuchos::RCP< %s > & object){ return object.total_count()  ; }" % classname)
        print("")
    print("}")

################################################################################

if __name__ == "__main__":
    main()
