#! ${PYTHON_EXECUTABLE}
# -*- python -*-

# @HEADER
# ***********************************************************************
#
#          PyTrilinos: Python Interfaces to Trilinos Packages
#                 Copyright (2014) Sandia Corporation
#
# Under the terms of Contract DE-AC04-94AL85000 with Sandia
# Corporation, the U.S. Government retains certain rights in this
# software.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the Corporation nor the names of the
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Questions? Contact William F. Spotz (wfspotz@sandia.gov)
#
# ***********************************************************************
# @HEADER

# ============================================================================
# Shows the usage of various Domi clasases
#
# \author Bill Spotz, 1446
#
# \date Last updated on 08-Jul-2015
# ============================================================================

#
# System imports
from __future__ import print_function
from numpy      import *
from optparse   import *

#
# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-t", "--testharness", action="store_true",
                  dest="testharness", default=False,
                  help="test local build modules; prevent loading system-installed modules")
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
options,args = parser.parse_args()

#
# Under normal usage, simply use 'from PyTrilinos import Epetra'.  For testing,
# we want to be able to control whether we import from the build directory or
# from a system-installed version of PyTrilinos.
from testutil import fromPyTrilinosImport
Teuchos = fromPyTrilinosImport('Teuchos', options.testharness)
Domi    = fromPyTrilinosImport('Domi'   , options.testharness)

def main():

    # Get the default Teuchos communicator and print a header with the Domi
    # version
    comm = Teuchos.DefaultComm.getComm()
    rank = comm.getRank()
    if rank == 0:
        print("*******************")
        print("Simple Domi Example")
        print("*******************")
        print()
        print(Domi.Version())

    # Decide on the decomposition of the two-dimensional Domi MDComm object.  If
    # the number of processors is evenly divisible by 2, choose (n/2,2), else
    # choose (n,1)
    nproc = comm.getSize()
    if nproc % 2 == 0:
        procGrid = (nproc/2, 2)
    else:
        procGrid = (nproc, 1)

    # Construct the Domi MDComm and print communicator information
    mdComm = Domi.MDComm(comm, procGrid)
    if rank == 0:
        print("Teuchos.Comm number of processors =", nproc)
        print("Domi.MDComm shape =", \
              [mdComm.getCommDim(axis) for axis in range(mdComm.numDims())])

    # Constract a Domi MDMap, and print the index bounds along each axis for
    # every processor
    mdMap = Domi.MDMap(mdComm, (100,100))
    comm.barrier()
    print("Processor", rank,
          [mdMap.getGlobalRankBounds(axis) for axis in range(mdComm.numDims())])

    # Construct a Domi MDVector using the Domi MDMap we just created and a
    # leading dimension of 3.  Print the shape of the buffer on each processor.
    mdVector = Domi.MDVector(mdMap, 3)
    if rank == 0:
        print("MDVector dtype =", mdVector.dtype)
    print("Processor", rank, "buffer shape =", mdVector.shape)

    # Output for test harness
    comm.barrier()
    if rank == 0:
        print()
        print("End Result: TEST PASSED")

# This is a standard Python construct.  Put the code to be executed in a
# function [typically main()] and then use the following logic to call the
# function if the script has been called as an executable from the UNIX command
# line.  This also allows, for example, this file to be imported from a python
# debugger and main() called from there.
if __name__ == "__main__":
    main()
