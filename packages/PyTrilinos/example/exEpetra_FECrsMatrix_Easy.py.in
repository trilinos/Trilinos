#! ${PYTHON_EXECUTABLE}
# -*- python -*-

# @HEADER
# ***********************************************************************
#
#          PyTrilinos: Python Interfaces to Trilinos Packages
#                 Copyright (2014) Sandia Corporation
#
# Under the terms of Contract DE-AC04-94AL85000 with Sandia
# Corporation, the U.S. Government retains certain rights in this
# software.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the Corporation nor the names of the
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Questions? Contact William F. Spotz (wfspotz@sandia.gov)
#
# ***********************************************************************
# @HEADER

# ----------------------------------------------------------------------------
# This example shows how to work with FECrsMatrix to set non-local elements.
#
# This example should be run with more than one processor. A diagonal matrix
# is created, and all elements are set on processor zero only. Then the
# matrix is distributed, and the local entries are modified.
#
# \author Marzio Sala, SNL 9214
#
# \date Last updated on 02-Aug-05
# ----------------------------------------------------------------------------

#
# System imports
from   __future__ import print_function
from   optparse   import *
import sys

#
# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-t", "--testharness", action="store_true",
                  dest="testharness", default=False,
                  help="test local build modules; prevent loading system-installed modules")
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
options,args = parser.parse_args()

#
# Under normal usage, simply use 'from PyTrilinos import Epetra'.  For testing,
# we want to be able to control whether we import from the build directory or
# from a system-installed version of PyTrilinos.
from testutil import fromPyTrilinosImport
Epetra = fromPyTrilinosImport('Epetra', options.testharness)

def main():

  # Defines a communicator.
  Comm = Epetra.PyComm()
  NumGlobalRows = 10
  Map = Epetra.Map(NumGlobalRows, 0, Comm)
  Matrix = Epetra.FECrsMatrix(Epetra.Copy, Map, 0)

  # Fills the entire matrix on processor 0, setting both local
  # and non-local entries. Communication among processors will occur when
  # GlobalAssemble() is called. After GlobalAssemble(), elements cannot be
  # added to matrix; although the value local elements can be modified.
  #
  # Method Matrix[GlobalRow, GlobalCol] requires global IDs for rows
  # and columns.
  if Comm.MyPID() == 0:
    for i in range(NumGlobalRows):
      # Here i is the global ID or a given row
      Matrix[i, i] = 1.0
  
  Matrix.GlobalAssemble()
  print(Matrix)
  
  Comm.Barrier()
  
  # Gets a list containing the global ID or each local row 
  MyGlobalElements = Map.MyGlobalElements()
  
  # We can now extract local rows of the matrix. Method Matrix[i] returns
  # the nonzeros indices and values for the locally hosted global row `i'.
  for i in MyGlobalElements:
    print(Matrix[i])
  
  # new reset the local values.
  for i in MyGlobalElements:
    Indices, Values = Matrix[i]
    for j in range(len(Indices)):
      Matrix[i, Indices[j]] = 10 * Values[j]
  
  print(Matrix)

  # synchronize processors
  Comm.Barrier()

  if Comm.MyPID() == 0: print("End Result: TEST PASSED")

# This is a standard Python construct.  Put the code to be executed in a
# function [typically main()] and then use the following logic to call the
# function if the script has been called as an executable from the UNIX command
# line.  This also allows, for example, this file to be imported from a python
# debugger and main() called from there.
if __name__ == "__main__":
  main()
