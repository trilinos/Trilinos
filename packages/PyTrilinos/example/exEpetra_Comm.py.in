#! ${PYTHON_EXECUTABLE}
# -*- python -*-

# @HEADER
# ***********************************************************************
#
#          PyTrilinos: Python Interfaces to Trilinos Packages
#                 Copyright (2014) Sandia Corporation
#
# Under the terms of Contract DE-AC04-94AL85000 with Sandia
# Corporation, the U.S. Government retains certain rights in this
# software.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the Corporation nor the names of the
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Questions? Contact William F. Spotz (wfspotz@sandia.gov)
#
# ***********************************************************************
# @HEADER

# ============================================================================
# Shows the usage of Epetra.PyComm().
#
# The output of this example is trivial for serial runs. If you have
# configured Trilinos with MPI support, you can try something like:
# $ mpirun -np 4 python ./exComm.py
#
# \author Marzio Sala, 9214; Bill Spotz, 1433
#
# \date Last updated on 15-Oct-05
# ============================================================================

#
# System imports
from __future__ import print_function
from numpy      import *
from optparse   import *

#
# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-t", "--testharness", action="store_true",
                  dest="testharness", default=False,
                  help="test local build modules; prevent loading system-installed modules")
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
options,args = parser.parse_args()

#
# Under normal usage, simply use 'from PyTrilinos import Epetra'.  For testing,
# we want to be able to control whether we import from the build directory or
# from a system-installed version of PyTrilinos.
from testutil import fromPyTrilinosImport
Epetra = fromPyTrilinosImport('Epetra', options.testharness)

def main():

    # Defines a communicator, which will be an Epetra.SerialComm or
    # an Epetra.MpiComm depending on how Trilinos was configured
    Comm = Epetra.PyComm()
    base = Comm.MyPID() + 1
    # Defines here some source variable.
    source = [1.0*base, 2.0*base, 3.0*base]
    print("PE = ", base, ", source = ", source)

    # get the mininum element
    #target = Comm.GlobalOp(Epetra.MINALL, source)
    target = Comm.MinAll(source)
    if Comm.MyPID() == 0:
        print("MINALL = ", target)
    Comm.Barrier()

    # get the maximum element
    target = Comm.MaxAll(source)
    if Comm.MyPID() == 0:
        print("MAXALL = ", target)
    Comm.Barrier()

    # sum all the elements
    target = Comm.SumAll(source)
    if Comm.MyPID() == 0:
        print("SUMALL = ", target)
    Comm.Barrier()

    # scansum
    target = Comm.ScanSum(source)
    print("PE = ", base, ", SCANSUM = ", target)
    Comm.Barrier()

    # broadcast from processor 0
    if Comm.MyPID() == 0:
        source = [10, 20]
    else:
        source = [0, 0]

    #target = Comm.GlobalOp(Epetra.BROADCAST, source, 0)
    aSource = array(source,dtype='i')
    Comm.Broadcast(aSource,0)
    print("PE = ", base, ", BROADCAST = ", aSource)

    # synchronize processors
    Comm.Barrier()

    if Comm.MyPID() == 0: print("End Result: TEST PASSED")

# This is a standard Python construct.  Put the code to be executed in a
# function [typically main()] and then use the following logic to call the
# function if the script has been called as an executable from the UNIX command
# line.  This also allows, for example, this file to be imported from a python
# debugger and main() called from there.
if __name__ == "__main__":
    main()
