#! ${PYTHON_EXECUTABLE}
# -*- python -*-

# @HEADER
# ***********************************************************************
#
#          PyTrilinos: Python Interfaces to Trilinos Packages
#                 Copyright (2014) Sandia Corporation
#
# Under the terms of Contract DE-AC04-94AL85000 with Sandia
# Corporation, the U.S. Government retains certain rights in this
# software.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the Corporation nor the names of the
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Questions? Contact William F. Spotz (wfspotz@sandia.gov)
#
# ***********************************************************************
# @HEADER

# This example creates a (distributed) tridiagonal matrix, and vectors for the
# solution and the right-hand side. Then, it solves the corresponding linear
# system using Amesos' LAPACK. Note, however, that any Amesos supported (and
# enabled at configure time) solver can be adopted; simply change the value of
# the variable `Type'
#
# Last updated on 25-Jul-05
# Author Marzio Sala, SNL 9214

#
# System imports
from   optparse import *
import sys

#
# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-t", "--testharness", action="store_true",
                  dest="testharness", default=False,
                  help="test local build modules; prevent loading system-installed modules")
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
options,args = parser.parse_args()

#
# Under normal usage, simply use 'from PyTrilinos import Epetra'.  For testing,
# we want to be able to control whether we import from the build directory or
# from a system-installed version of PyTrilinos.
from testutil import fromPyTrilinosImport
Epetra = fromPyTrilinosImport('Epetra', options.testharness)
Amesos = fromPyTrilinosImport('Amesos', options.testharness)


def main():
  # dimension of the problem
  numGlobalRows = 10
  comm          = Epetra.PyComm()
  numProc       = comm.NumProc()
  iAmRoot       = comm.MyPID() == 0
  map           = Epetra.Map(numGlobalRows, 0, comm)
  numLocalRows  = map.NumMyElements()
  LHS_exact     = Epetra.Vector(map)
  LHS           = Epetra.Vector(map)
  RHS           = Epetra.Vector(map)
  matrix        = Epetra.CrsMatrix(Epetra.Copy, map, 0)

  # Populates the matrix by inserting one row at-a-time. Indices and Values
  # are defined as Python's lists (of the same length).
  for ii in range(0, numLocalRows):
    i = map.GID(ii)
    if i == 0:
      indices = [i, i + 1]
      values  = [2.0, -1.0]
    elif i == numGlobalRows - 1:
      indices = [i, i - 1]
      values  = [2.0, -1.0]
    else:
      indices = [  i,  i - 1, i + 1]
      values  = [2.0,   -1.0,  -1.0]
    matrix.InsertGlobalValues(i, values, indices)
  matrix.FillComplete()

  # Builds a solution that is `i' at node `i', then the
  # corresponding right-hand side, then set the solution to 0
  for i in range(0, numLocalRows):
    LHS[i] = i
  matrix.Multiply(False, LHS, RHS)
  LHS.PutScalar(0.0)

  problem = Epetra.LinearProblem(matrix, LHS, RHS)
  factory = Amesos.Factory()

  # Creates the solver using the Amesos' factory
  type = "Amesos_Lapack"
  if factory.Query(type) == False:
    raise NotImplementedError("Selected solver (%s) not supported" % (type))
  solver = factory.Create(type, problem)

  # Setting parameters using a Python dictionary. The list of supported
  # parameters can be found on the user's guide.
  amesosList = {"PrintTiming" : True,
                "PrintStatus" : True
                }
  solver.SetParameters(amesosList)

  # Note: we don't check here the return parameters for brevity. 
  solver.SymbolicFactorization()
  solver.NumericFactorization()
  ierr = solver.Solve()

  #del solver

  error = 0.0
  for i in range(0, numLocalRows):
    error = error + abs(LHS[i] - i)
  if iAmRoot:
    print("Using %s, ||x - x_ex||_1 = %e" % (type, error))

  # Exit with a code that indicates the total number of successes
  failures = comm.SumAll(ierr)
  if failures == 0 and iAmRoot: print("End Result: TEST PASSED")
  sys.exit(failures)

if __name__ == "__main__":
    main()
