#! ${PYTHON_EXECUTABLE}
# -*- python -*-

# @HEADER
# ***********************************************************************
#
#          PyTrilinos: Python Interfaces to Trilinos Packages
#                 Copyright (2014) Sandia Corporation
#
# Under the terms of Contract DE-AC04-94AL85000 with Sandia
# Corporation, the U.S. Government retains certain rights in this
# software.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the Corporation nor the names of the
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Questions? Contact William F. Spotz (wfspotz@sandia.gov)
#
# ***********************************************************************
# @HEADER

#
# System imports
from __future__ import print_function
import math
from   optparse import *
import sys

#
# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-t", "--testharness", action="store_true",
                  dest="testharness", default=False,
                  help="test local build modules; prevent loading system-installed modules")
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
options,args = parser.parse_args()

#
# Under normal usage, simply use 'from PyTrilinos import Epetra'.  For testing,
# we want to be able to control whether we import from the build directory or
# from a system-installed version of PyTrilinos.
from testutil import fromPyTrilinosImport
Epetra    = fromPyTrilinosImport('Epetra'   , options.testharness)
EpetraExt = fromPyTrilinosImport('EpetraExt', options.testharness)

# Build a global communicator
comm    = Epetra.PyComm()
numProc = comm.NumProc()
myPID   = comm.MyPID()
iAmRoot = myPID == 0

def main():

    # Construct a vector x and populate with random values.
    # Then construct a diagonal Epetra.CrsMatrix
    n   = 10 * numProc
    map = Epetra.Map(n, 0, comm)
    x   = Epetra.Vector(map)
    x.Random()

    matrix = Epetra.CrsMatrix(Epetra.Copy, map, 0)

    for lrid in range(matrix.NumMyRows()):
        grid = matrix.GRID(lrid)
        matrix[grid,grid] = grid

    matrix.FillComplete()
    matrix.Print()

    # -------------------------------- #
    # Part I: Write elements to a file #
    # -------------------------------- #

    filename = "Datafile.h5"
    Hdf5 = EpetraExt.HDF5(comm)
    Hdf5.Create(filename)
    if iAmRoot: print("Writing map...", end="")
    Hdf5.Write("map"   , map   )
    if iAmRoot: print("ok")
    if iAmRoot: print("Writing vector...", end="")
    Hdf5.Write("x"     , x     )
    if iAmRoot: print("ok")
    if iAmRoot: print("Writing matrix...", end="")
    Hdf5.Write("matrix", matrix)
    if iAmRoot: print("ok")
    Hdf5.Close()

    # ---------------------------------- #
    # Part II: Read elements from a file #
    # ---------------------------------- #

    failures = 0
    Hdf5.Open(filename)
    # Check group names
    for group in ("map", "map2", "x", "matrix"):
        if iAmRoot: print(group, "is", Hdf5.IsContained(group))

    # Read the map and check that it is the same
    map2    = Hdf5.ReadMap("map")
    if not map2.SameAs(map):
        print("map inconsistent on processor", myPID)
        failures += 1

    # Read the vector and check that it is the same
    x2 = Hdf5.ReadMultiVector("x")
    if iAmRoot:
        print("x  =", x )
        print("x2 =", x2)
    x2 = x2 - x
    error = math.sqrt((x2 * x2).sum())
    if error > 1.0e-8:
        print("x inconsistent on processor", myPID)
        failures += 1

    # Read the matrix
    try:
        matrix2 = Hdf5.ReadCrsMatrix("matrix")
    except:
        failures += 1

    Hdf5.Close()

    return failures

################################################################

if __name__ == "__main__":
    failures = main()
    failures = comm.SumAll(failures)
    if failures == 0 and iAmRoot: print("End Result: TEST PASSED")
    sys.exit(failures)
