#! ${PYTHON_EXECUTABLE}
# -*- python -*-

# @HEADER
# ***********************************************************************
#
#          PyTrilinos: Python Interfaces to Trilinos Packages
#                 Copyright (2014) Sandia Corporation
#
# Under the terms of Contract DE-AC04-94AL85000 with Sandia
# Corporation, the U.S. Government retains certain rights in this
# software.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the Corporation nor the names of the
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Questions? Contact William F. Spotz (wfspotz@sandia.gov)
#
# ***********************************************************************
# @HEADER

################################################################################
#
# Example of how to define an Epetra.Operator derived class in python
#
# An Epetra_Operator is an object that can be applied to vectors to return a
# vector, but has no structure -- that is, there is no "row" or "graph".
# Basically, an Epetra_Operator is defined by two methods: Apply() and
# ApplyInverse().  In this case, the operator represents a 1D Laplacian on a
# structured grid.  The linear system is solved using AztecOO and no
# preconditioning (since algebraic preconditioners are hard to define for pure
# Operator classes).
#
# Based on a script originally written by Marzio Sala.  Updated by Bill Spotz.
#
################################################################################

#
# System imports
from __future__ import print_function
from optparse   import *

#
# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-t", "--testharness", action="store_true",
                  dest="testharness", default=False,
                  help="test local build modules; prevent loading system-installed modules")
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
parser.add_option("-n", type="int", dest="nodes", default=100,
                  help="number of nodes [default 100]")
options,args = parser.parse_args()

#
# Under normal usage, simply use 'from PyTrilinos import Epetra'.  For testing,
# we want to be able to control whether we import from the build directory or
# from a system-installed version of PyTrilinos.
from testutil import fromPyTrilinosImport
Epetra  = fromPyTrilinosImport('Epetra' , options.testharness)
AztecOO = fromPyTrilinosImport('AztecOO', options.testharness)

################################################################################

class Laplace1D_Operator(Epetra.Operator):

    def __init__(self, n, comm=None):
        """
        __init__(self, n) -> Laplace1D_Operator (with an Epetra.PyComm() communicator)
        __init__(self, n, comm) -> Laplace1D_Operator (with given communicator)
        """
        # Initialize the base class.  This is REQUIRED
        Epetra.Operator.__init__(self)
        # Determine the communicator
        if comm is None:
            self.__comm = Epetra.PyComm()
        else:
            self.__comm = comm
        # Create the range map
        self.__map = Epetra.Map(n,0,self.__comm)
        # Range indexes
        self.__y0 =  1
        self.__y1 = -1
        if self.__comm.MyPID() > 0:
            self.__y0 = None
        if self.__comm.MyPID() < self.__comm.NumProc()-1:
            self.__y1 = None
        # Build the Import object
        self.buildImporter()
        # Store a label for the operator
        self.__label = "1D Laplace Operator"
        # Transpose flag
        self.__useTranspose = False

    def buildImporter(self):
        "Build the Import object for parallel communication"
        myPID   = self.__comm.MyPID()
        numProc = self.__comm.NumProc()
        map     = self.__map
        myGIDs  = map.MyGlobalElements()
        importGIDs = list(map.MyGlobalElements())
        if myPID > 0:
            importGIDs.insert(0,myGIDs[ 0]-1)
        if myPID < numProc-1:
            importGIDs.append(myGIDs[-1]+1)
        self.__importMap = Epetra.Map(-1, importGIDs, 0, self.__comm)
        self.__importer  = Epetra.Import(self.__importMap, map)

    def __str__(self):
        "Return the operator's label"
        return self.__label

    def Label(self):
        "Required implementation of Epetra.Operator class"
        return self.__label

    def OperatorDomainMap(self):
        "Required implementation of Epetra.Operator class"
        return self.__map

    def OperatorRangeMap(self):
        "Required implementation of Epetra.Operator class"
        return self.__map

    def Comm(self):
        "Required implementation of Epetra.Operator class"
        return self.__comm

    def Apply(self,x,y):
        """
        Required implementation of Epetra.Operator class.  This method will be
        called by the AztecOO solver in order to compute y = Ax, where A is this
        operator.
        """
        try:
            # Under GNU C++ 4.1.2, x and y are provided to this method as "raw"
            # Epetra.Epetra_MultiVectors rather than hybrid Epetra.MultiVectors
            # -- so we fix them.
            if not isinstance(x, Epetra.MultiVector):
                x = Epetra.MultiVector(Epetra.View, x)
            if not isinstance(y, Epetra.MultiVector):
                y = Epetra.MultiVector(Epetra.View, y)
            # Import the off-processor values
            xImp = Epetra.MultiVector(self.__importMap, x.NumVectors())
            xImp.Import(x, self.__importer, Epetra.Insert)
            # Apply operator to interior points
            y[:,self.__y0:self.__y1] = 2.0 * xImp[:,1:-1] - xImp[:,:-2] - \
                                       xImp[:,2:]
            # Apply boundary conditions.  Note that x[...] would attempt to
            # return a new Epetra.MultiVector, and this hangs when only
            # attempted on a single processor.  Therefore, we slice the
            # MultiVector's internal array
            if self.__comm.MyPID() == 0:
                y[:,:1] = x.array[:,:1]
            if self.__comm.MyPID() == self.__comm.NumProc() - 1:
                y[:,-1:] = x.array[:,-1:]
            # NB: For the boundary calculations, I wanted to use
            #
            #     y[:, 0] = x.array[:, 0]
            #     y[:,-1] = x.array[:,-1]
            #
            # but this raised a ValueError: Object too deep for desired array
            # under numpy 0.9.8.  The simpler notation in the comment above
            # works for newer versions of numpy.

        except Exception as e:
            print("Laplace1D_Operator.Apply error:", e)
            return -1

        return 0

    def ApplyInverse(self):
        "Required implementation of Epetra.Operator class"
        return -1

    def HasNormInf(self):
        "Required implementation of Epetra.Operator class"
        return True

    def NormInf(self):
        "Required implementation of Epetra.Operator class"
        return 4.0

    def SetUseTranspose(self, useTranspose):
        "Required implementation of Epetra.Operator class"
        self.__useTranspose = bool(useTranspose)

    def UseTranspose(self):
        "Required implementation of Epetra.Operator class"
        return self.__useTranspose

################################################################################

def main():

    # Problem initialization
    n     = options.nodes
    bc0   = 0.0
    bc1   = 1.0
    tol   = 1.0e-5
    comm  = Epetra.PyComm()
    lap1d = Laplace1D_Operator(n, comm)

    # Create solution and RHS vectors
    x = Epetra.Vector(lap1d.OperatorDomainMap())
    b = Epetra.Vector(lap1d.OperatorRangeMap())

    # Initialize vectors: x will be a straight line between its boundary values,
    # and b=1, with its boundary values equal to x on the boundaries
    x[:] = bc0 + (bc1-bc0) * (x.Map().MyGlobalElements() / (n-1.0))
    b.PutScalar(1.0)
    if comm.MyPID() == 0:
        b[0] = bc0
    if comm.MyPID() == comm.NumProc()-1:
        b[-1] = bc1

    # Build the linear system solver
    problem = Epetra.LinearProblem(lap1d, x, b)
    solver  = AztecOO.AztecOO(problem)
    solver.SetParameters({"Solver"  : "CG",
                          "Precond" : "None",
                          "Output"  : 16    })

    # Solve the problem
    solver.Iterate(n, tol)
    if comm.MyPID() == 0:
        if solver.ScaledResidual() < tol: print("End Result: TEST PASSED")
        else:                             print("End Result: TEST FAILED")

################################################################################

if __name__ == "__main__":
    main()
