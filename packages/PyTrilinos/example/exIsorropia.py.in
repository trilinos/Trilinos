#! ${PYTHON_EXECUTABLE}
# -*- python -*-

# @HEADER
# ***********************************************************************
#
#          PyTrilinos: Python Interfaces to Trilinos Packages
#                 Copyright (2014) Sandia Corporation
#
# Under the terms of Contract DE-AC04-94AL85000 with Sandia
# Corporation, the U.S. Government retains certain rights in this
# software.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the Corporation nor the names of the
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Questions? Contact William F. Spotz (wfspotz@sandia.gov)
#
# ***********************************************************************
# @HEADER

# This example script currently builds an Epetra.CrsGraph object and uses it to
# build an Isorropia.Epetra.Colorer.

#
# System imports
from   optparse import *
import sys
from   types    import *

#
# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-t", "--testharness", action="store_true",
                  dest="testharness", default=False,
                  help="test local build modules; prevent loading system-installed modules")
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
options,args = parser.parse_args()

#
# Under normal usage, simply use 'from PyTrilinos import Epetra'.  For testing,
# we want to be able to control whether we import from the build directory or
# from a system-installed version of PyTrilinos.
from testutil import fromPyTrilinosImport
Epetra    = fromPyTrilinosImport('Epetra'   , options.testharness)
Isorropia = fromPyTrilinosImport('Isorropia', options.testharness)
Teuchos   = fromPyTrilinosImport('Teuchos'  , options.testharness)

################################################################################

def buildGraph(comm, nRows):
    map = Epetra.Map(nRows, 0, comm)
    graph = Epetra.CrsGraph(Epetra.Copy, map, 3)
    for gid in map.MyGlobalElements():
        if gid == 0:
            indices = [0, 1]
        elif gid == nRows-1:
            indices = [nRows-2, nRows-1]
        else:
            indices = [gid-1, gid, gid+1]
        graph.InsertGlobalIndices(gid, indices)
    graph.FillComplete()
    return graph

def main(comm):

    iAmRoot = comm.MyPID() == 0

    if iAmRoot: print("\nBuilding CRS graph")
    nRows = 10 * comm.NumProc()
    crsg = buildGraph(comm, nRows)

    print(crsg)

    if iAmRoot: print("Constructing Isorropia.Epetra.Colorer")
    colorer = Isorropia.Epetra.Colorer(crsg)

    print(colorer.elemsWithColor(0))


    pList = {"partitioning method": "random",
             "Zoltan": {"debug_level": "0"}}

    if iAmRoot: print("Constructing Isorropia.Epetra.Partitioner")
    partitioner = Isorropia.Epetra.Partitioner(crsg, pList)
    partitioner.partition(True)
    #print(partitioner)

    #pList["partitioning method"] = "hypergraph2d"
    #if iAmRoot: print("Constructing Isorropia.Epetra.Partitioner2D")
    #part2D = Isorropia.Epetra.Partitioner2D(crsg, pList)
    #print(part2D)

    pList["partitioning method"] = "hypergraph2d"
    if iAmRoot: print("Constructing Isorropia.Epetra.Partitioner")
    part2D = Isorropia.Epetra.Partitioner(crsg, pList)
    #print(part2D)

    if iAmRoot: print("Constructing Isorropia.Epetra.Redistributor")
    Redis = Isorropia.Epetra.Redistributor(partitioner)
    newCrsg = Redis.redistribute(crsg)
    #print(Redis)

    print(newCrsg)

    print("Building CostDescriber")
    costDesc = Isorropia.Epetra.CostDescriber()
    #print(costDesc)

################################################################################

if __name__ == "__main__":

    # Obtain the default communicator
    comm    = Epetra.PyComm()
    iAmRoot = comm.MyPID() == 0

    if iAmRoot:
        print("********************")
        print("** exIsorropia.py **")
        print("********************")

    # Run the test and catch any errors
    try:
        main(comm)
        errors = 0
    except Exception as e:
        print(e)
        errors = 1

    # Sum the errors, report the status and exit
    totalErrors = comm.SumAll(errors)
    if iAmRoot:
        print()
        if errors == 0:
            print("End Result: TEST PASSED")
        else:
            print("End Result: TEST FAILED")
    sys.exit(errors)
