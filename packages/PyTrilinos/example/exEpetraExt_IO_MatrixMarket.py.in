#! ${PYTHON_EXECUTABLE}
# -*- python -*-

# @HEADER
# ***********************************************************************
#
#          PyTrilinos: Python Interfaces to Trilinos Packages
#                 Copyright (2014) Sandia Corporation
#
# Under the terms of Contract DE-AC04-94AL85000 with Sandia
# Corporation, the U.S. Government retains certain rights in this
# software.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the Corporation nor the names of the
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Questions? Contact William F. Spotz (wfspotz@sandia.gov)
#
# ***********************************************************************
# @HEADER

#
# System imports
from   __future__ import print_function
from   optparse   import *
import sys

#
# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-t", "--testharness", action="store_true",
                  dest="testharness", default=False,
                  help="test local build modules; prevent loading system-installed modules")
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
options,args = parser.parse_args()

#
# Under normal usage, simply use 'from PyTrilinos import Epetra'.  For testing,
# we want to be able to control whether we import from the build directory or
# from a system-installed version of PyTrilinos.
from testutil import fromPyTrilinosImport
Epetra    = fromPyTrilinosImport('Epetra'   , options.testharness)
EpetraExt = fromPyTrilinosImport('EpetraExt', options.testharness)

# Build a global communicator
comm    = Epetra.PyComm()
numProc = comm.NumProc()
iAmRoot = comm.MyPID() == 0

def main():

    failures  = 0
    tolerance = 1.0e-12

    # Construct a vector x and populate with random values
    n       = 10 * numProc
    map     = Epetra.Map(n, 0, comm)
    x       = Epetra.Vector(map)
    x.Random()

    # ==================================================== #
    # Write map to file "map.mm" in MatrixMarket format,   #
    # read "map.mm" into map2, then check that map2 equals #
    # map.                                                 #
    # ==================================================== #

    if iAmRoot: print("I/O for Map ... ", end="")
    EpetraExt.BlockMapToMatrixMarketFile("map.mm", map)
    (ierr, map2) = EpetraExt.MatrixMarketFileToMap("map.mm", comm)
    if map2.SameAs(map):
        if iAmRoot: print("ok")
    else:
        if iAmRoot: print("FAILED")
        failures += 1

    # ===================================================== #
    # Write vector x to file "x.mm" in MatrixMarket format, #
    # read "x.mm" into y, then check that y equals x        #
    # ===================================================== #

    if iAmRoot: print("I/O for MultiVector ... ", end="")
    EpetraExt.MultiVectorToMatrixMarketFile("x.mm", x)
    (ierr, y) = EpetraExt.MatrixMarketFileToMultiVector("x.mm", map2)
    y.Update(1.0, x, -1.0)
    norm = y.Norm2()

    if abs(norm) < tolerance:
        if iAmRoot: print("ok")
    else:
        if iAmRoot: print("FAILED")
        failures += 1

    # ===================================================== #
    # Creates a simple CrsMatrix (diagonal) and             #
    # write matrix A to file "A.mm" in MatrixMarket format, #
    # read "A.mm" into B, then check that B equals A        #
    # ===================================================== #

    if iAmRoot: print("I/O for CrsMatrix ... ", end="")
    A       = Epetra.CrsMatrix(Epetra.Copy, map2, 0)
    for lrid in range(A.NumMyRows()):
        grid = A.GRID(lrid)
        A[grid,grid] = grid
    A.FillComplete()
    EpetraExt.RowMatrixToMatrixMarketFile("A.mm", A)
    (ierr, B) = EpetraExt.MatrixMarketFileToCrsMatrix("A.mm", map2)
    EpetraExt.Add(A, False, 1.0, B, -1.0)
    norm = B.NormInf()

    if abs(norm) < tolerance:
        if iAmRoot: print("ok")
    else:
        if iAmRoot: print("FAILED")
        failures += 1

    return failures

################################################################

if __name__ == "__main__":
    if numProc == 1:
        failures = main()
    else:
        failures = 0    # Not all I/O works in parallel
    failures = comm.SumAll(failures)
    if failures == 0 and iAmRoot: print("End Result: TEST PASSED")
    sys.exit(failures)
