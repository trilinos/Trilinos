#! ${PYTHON_EXECUTABLE}
# -*- python -*-

# @HEADER
# ***********************************************************************
#
#          PyTrilinos: Python Interfaces to Trilinos Packages
#                 Copyright (2014) Sandia Corporation
#
# Under the terms of Contract DE-AC04-94AL85000 with Sandia
# Corporation, the U.S. Government retains certain rights in this
# software.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the Corporation nor the names of the
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Questions? Contact William F. Spotz (wfspotz@sandia.gov)
#
# ***********************************************************************
# @HEADER

#
# System imports
from   __future__ import print_function
from   optparse   import *
import sys

#
# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-t", "--testharness", action="store_true",
                  dest="testharness", default=False,
                  help="test local build modules; prevent loading system-installed modules")
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
options,args = parser.parse_args()

#
# Under normal usage, simply use 'from PyTrilinos import Epetra'.  For testing,
# we want to be able to control whether we import from the build directory or
# from a system-installed version of PyTrilinos.
from testutil import fromPyTrilinosImport
Epetra = fromPyTrilinosImport('Epetra', options.testharness)
Galeri = fromPyTrilinosImport('Galeri', options.testharness)

# Create a communicator
comm    = Epetra.PyComm()
numProc = comm.NumProc()
iAmRoot = comm.MyPID() == 0

# Create a Cartesian map, containing nx x ny x NumProcs nodes
nx = 2
ny = 2 * numProc
List = {"nx": nx,               # number of nodes in the X-direction
        "ny": ny,               # number of nodes in the Y-directioN
        "mx": 1,                # number of processors in the X-direction
        "my": numProc           # number of processors in the Y-direction
        }

# Creating a map corresponding to a 2D Cartesian distribuion
if iAmRoot: print("Creating a Map...")

Map = Galeri.CreateMap("Cartesian2D", comm, List)

# creates a point matrix based on the previously created map
if iAmRoot: print("Creating an Epetra_CrsMatrix...")

CrsMatrix = Galeri.CreateCrsMatrix("Laplace2D", Map, List)

# extend the matrix into VBR format, by replicating each equation (twice
# in this example)
if iAmRoot: print("Extending the Epetra_CrsMatrix into an Epetra_VbrMatrix...")

VbrMatrix = Galeri.CreateVbrMatrix(CrsMatrix, 2);

# Now work a bit with vectors
LHS = Epetra.Vector(Map)
LHS.PutScalar(12.0)
RHS = Epetra.Vector(Map)
#LinearProblem = Epetra.LinearProblem(CrsMatrix, LHS, RHS)
# Now the linear problem is not solved, use for example AztecOO with IFPACK or
# ML, or Amesos
norm = Galeri.ComputeNorm(CrsMatrix, LHS, RHS)
if iAmRoot: print("||A x - b||_2 = ", norm)

# Indicate success
successes = comm.SumAll(1)
if successes == numProc and iAmRoot: print("End Result: TEST PASSED")

# It is possible to get the following error message with this script:
#
# *** The MPI_comm_size() function was called after MPI_FINALIZE was invoked.
# *** This is disallowed by the MPI standard.
# *** Your MPI job will now abort.
#
# What this means is that the Epetra module (which calls MPI_Finalize() when
# deleted) is getting deleted before the Epetra Map, CrsMatrix and VbrMatrix
# objects created by the Galeri module (as well as the LHS and RHS objects,
# constructed using Map). One workaround is to delete these objects before the
# exit process.
del Map, CrsMatrix, VbrMatrix, LHS, RHS

# Exit
sys.exit(numProc-successes)
