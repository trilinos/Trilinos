#! ${PYTHON_EXECUTABLE}
# -*- python -*-

# @HEADER
# ***********************************************************************
#
#          PyTrilinos: Python Interfaces to Trilinos Packages
#                 Copyright (2014) Sandia Corporation
#
# Under the terms of Contract DE-AC04-94AL85000 with Sandia
# Corporation, the U.S. Government retains certain rights in this
# software.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the Corporation nor the names of the
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Questions? Contact William F. Spotz (wfspotz@sandia.gov)
#
# ***********************************************************************
# @HEADER

#############################################################################
#
# This script solves the 2x2 problem
#
#     F[0] = x[0]^2 + x[1]^2 - 1  = 0
#     F[1] = x[1]   - x[0]^2      = 0
#
#############################################################################

# System imports
from __future__ import print_function
from optparse   import *

#
# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-t", "--testharness", action="store_true",
                  dest="testharness", default=False,
                  help="test local build modules; prevent loading system-installed modules")
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
options,args = parser.parse_args()

#
# Under normal usage, simply use 'from PyTrilinos import Epetra'.  For testing,
# we want to be able to control whether we import from the build directory or
# from a system-installed version of PyTrilinos.
from testutil import fromPyTrilinosImport
Epetra = fromPyTrilinosImport('Epetra', options.testharness)
NOX    = fromPyTrilinosImport('NOX'   , options.testharness)

#
# Define a class that is the interface to the nonlinear problem.  It derives
# from NOX.Epetra.Interface.Required in order to support the computeF() method.
# It derives from NOX.Epetra.Interface.Jacobian in order to support the
# computeJacobian() method.
class MyProblem(NOX.Epetra.Interface.Required,
                NOX.Epetra.Interface.Jacobian):

    def __init__(self):
        NOX.Epetra.Interface.Required.__init__(self)
        NOX.Epetra.Interface.Jacobian.__init__(self)
        self.__comm = Epetra.SerialComm()
        self.__map  = Epetra.Map(2, 0, self.__comm)
        self.__jac  = Epetra.CrsMatrix(Epetra.Copy, self.__map, 2)
        self.__soln = Epetra.Vector(self.__map)

    def getJacobian(self):
        return self.__jac

    def computeF(self,x,F,flag):
        try:
            F[0] = x[0]*x[0] + x[1]*x[1] - 1
            F[1] = x[1]      - x[0]*x[0]
        except Exception as e:
            print("Exception in MyProblem.computeF method")
            print(e)
            return False
        return True

    def computeJacobian(self, x, Jac):
        try:
            Jac.InsertGlobalValues(0, [ 2*x[0], 2*x[1]], [0,1])
            Jac.InsertGlobalValues(1, [-2*x[0], 1     ], [0,1])
            Jac.FillComplete()
        except Exception as e:
            print("Exception in MyProblem.computeJacobian method")
            print(e)
            return False
        return True

    def getSolution(self):
        return self.__soln

#
# Main function.  Create a solver based on the MyProblem class and solve it.
def main():

    # Initialize
    problem      = MyProblem()
    initGuess    = problem.getSolution()
    initGuess[:] = [.5,.5]
    jacobian     = problem.getJacobian()
    solver       = NOX.Epetra.defaultSolver(initGuess,
                                            problem,
                                            problem,
                                            jacobian,
                                            maxIters=40)
    print(solver.statusTest)

    # Solve
    solveStatus = solver.solve()
    print()
    if solveStatus != NOX.StatusTest.Converged:
        print("Nonlinear solver failed to converge")
        print("End Result: TEST FAILED")
    else:
        group = solver.getSolutionGroup()
        soln  = group.getX()
        print("Solution =", soln)
        print("End Result: TEST PASSED")

#
# Main script: call the main() function.
main()
