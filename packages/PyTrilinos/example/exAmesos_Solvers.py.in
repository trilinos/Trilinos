#! ${PYTHON_EXECUTABLE}
# -*- python -*-

# @HEADER
# ***********************************************************************
#
#          PyTrilinos: Python Interfaces to Trilinos Packages
#                 Copyright (2014) Sandia Corporation
#
# Under the terms of Contract DE-AC04-94AL85000 with Sandia
# Corporation, the U.S. Government retains certain rights in this
# software.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the Corporation nor the names of the
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Questions? Contact William F. Spotz (wfspotz@sandia.gov)
#
# ***********************************************************************
# @HEADER

"""
Usage is: ./exAmesos_Solvers.py <options> <solver-type>
    where <options> can be
        -t, --testharness    Force testing of local build modules
    where <solver-type> can be:
        Lapack (DEFAULT)
        Klu
        Umfpack
        Superlu
        Superludist
        Dscpack
        Mumps
"""

#
# System imports
from   optparse import *
import sys

#
# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-t", "--testharness", action="store_true",
                  dest="testharness", default=False,
                  help="test local build modules; prevent loading system-installed modules")
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
options,args = parser.parse_args()

#
# Under normal usage, simply use 'from PyTrilinos import Epetra'.  For testing,
# we want to be able to control whether we import from the build directory or
# from a system-installed version of PyTrilinos.
from testutil import fromPyTrilinosImport
Epetra = fromPyTrilinosImport('Epetra', options.testharness)
Amesos = fromPyTrilinosImport('Amesos', options.testharness)

######################################################################

def main():
    comm = Epetra.PyComm()
    numProc = comm.NumProc()
    iAmRoot = comm.MyPID() == 0

    if len(args) == 0:
        type = "Lapack"
    else:
        type = args[0]

    numGlobalRows = 10
    map           = Epetra.Map(numGlobalRows, 0, comm)
    LHS_exact     = Epetra.MultiVector(map, 1)
    LHS           = Epetra.MultiVector(map, 1)
    RHS           = Epetra.MultiVector(map, 1)
    matrix        = Epetra.CrsMatrix(Epetra.Copy, map, 0)
    numLocalRows  = map.NumMyElements()

    # Builds the matrix (1D Laplacian)
    for ii in range(0, numLocalRows):
        i = map.GID(ii)
        indices = [ i ]
        values  = [2.0]
        if i > 0:
          indices.append(i-1)
          values.append(-1)
        elif i < numGlobalRows - 1:
          indices.append(i+1)
          values.append(-1)
        matrix.InsertGlobalValues(i, values, indices)
    matrix.FillComplete()

    LHS_exact.Random()
    matrix.Multiply(False, LHS_exact, RHS)
    LHS.PutScalar(1.0)

    problem = Epetra.LinearProblem(matrix, LHS, RHS)

    if type == "Lapack":
        solver = Amesos.Lapack(problem)
    elif type == "Klu":
        solver = Amesos.Klu(problem)
    elif type == "Umfpack":
        solver = Amesos.Umfpack(problem)
    elif type == "Superlu":
        solver = Amesos.Superlu(problem)
    elif type == "Superludist":
        solver = Amesos.Superludist(problem)
    elif type == "Dscpack":
        solver = Amesos.Dscpack(problem)
    elif type == "Mumps":
        solver = Amesos.Mumps(problem)
    else:
        print('Selected solver (%s) not available' % type)
        print(__doc__)
        sys.exit(-2)

    print(solver)

    # Set the solver parameters
    #amesosList = {"PrintStatus": True,
    #              "PrintTiming": True
    #              }
    #solver.SetParameters(amesosList)

    # Perform the symbolic factorizations
    if iAmRoot:
        print("1) Performing symbolic factorizations...")
    solver.SymbolicFactorization()

    # Perform the numeric factorizations
    if iAmRoot:
        print("2) Performing numeric factorizations...")
    solver.NumericFactorization()

    # Solve the linear system
    if iAmRoot:
        print("3) Solving the linear system...")
    ierr = solver.Solve()

    # Output the return code
    if iAmRoot:
        print("   solver.Solve() return code = " + str(ierr))

    #del solver

    # Exit with a code that indicates the total number of successes
    failures = comm.SumAll(ierr)
    if failures == 0 and iAmRoot: print("End Result: TEST PASSED")
    sys.exit(failures)

if __name__ == "__main__":
    main()
