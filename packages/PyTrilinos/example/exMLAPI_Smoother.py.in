#! ${PYTHON_EXECUTABLE}
# -*- python -*-

# @HEADER
# ***********************************************************************
#
#          PyTrilinos: Python Interfaces to Trilinos Packages
#                 Copyright (2014) Sandia Corporation
#
# Under the terms of Contract DE-AC04-94AL85000 with Sandia
# Corporation, the U.S. Government retains certain rights in this
# software.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the Corporation nor the names of the
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Questions? Contact William F. Spotz (wfspotz@sandia.gov)
#
# ***********************************************************************
# @HEADER

# -------------------------------------------------------------------------- #
# This example shows how to derive class MLAPI_BaseOperator to define 
# smoothers in the ML module of Python. Class `MyJacobiSmoother' is a 
# very simple example of the procedure to follow. Basically, one just has
# to modify Apply(), by replacing the Jacobi smoother with the operator
# of choice. 
#
# This multilevel cycle is applied by function MultiLevelCycle(). A more
# elegant example is reported in file exMLAPI.py
#
# \author Marzio Sala, SNL 9214
# 
# \date Last updated on 05-Aug-05
# -------------------------------------------------------------------------- #

#
# System imports
from   __future__ import print_function
from   optparse   import *
import sys

#
# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-t", "--testharness", action="store_true",
                  dest="testharness", default=False,
                  help="test local build modules; prevent loading system-installed modules")
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
options,args = parser.parse_args()

#
# Under normal usage, simply use 'from PyTrilinos import Epetra'.  For testing,
# we want to be able to control whether we import from the build directory or
# from a system-installed version of PyTrilinos.
from testutil import fromPyTrilinosImport
Epetra = fromPyTrilinosImport('Epetra', options.testharness)
ML     = fromPyTrilinosImport('ML'    , options.testharness)

################################################################################

# ----------------------- #
# User's Defined Smoother #
# ----------------------- #
#
class MyJacobiSmoother(ML.BaseOperator): 
    def Reshape(self, A, omega, sweeps):
        self.A_ = A
        self.DomainSpace_ = A.GetOperatorDomainSpace()
        self.RangeSpace_  = A.GetOperatorRangeSpace()
        self.omega_ = omega
        self.sweeps_ = sweeps
        # Builds here a matrix whose diagonal entries are 1/a_{i,i}
        # This is only one way of doing things, here reported for simplicity.
        self.D_ = ML.PyMatrix(self.RangeSpace_, self.DomainSpace_)
        for i in self.DomainSpace_.GetMyGlobalElements():
            self.D_[i, i] = 1.0 / A[i, i]
        self.D_.FillComplete()

        # A note on Apply(): Recall that if you reassign the x object,
        # then the original x can remain untouched... For example,
        # something like
        #    x = x + y
        # means that a new `x' is created. For this reason, use the Update()
        # methods instead.
    def Apply(*args):
        self = args[0]
        y = args[1]
        x = args[2]
        for j in range(self.sweeps_):
            res = y - self.A_ * x
            x.Update(self.omega_, self.D_ * res, 1.0)
        return 0

    def GetOperatorDomainSpace(self):
        return(self.DomainSpace_)

    def GetOperatorRangeSpace(self):
        return(self.RangeSpace_)

    def __str__(self):
        return "MyJacobiSmoother"

    def __mul__(*args):
        self = args[0]
        rhs = args[1]
        res = ML.MultiVector(rhs.GetVectorSpace())
        self.Apply(rhs, res)
        return(res)

################################################################################

# -------------------------------------- #
# Function to apply the multilevel cycle #
# to vector b_f, and return the result.  #
# -------------------------------------- #
#
def MultiLevelCycle(A, P, R, S, b_f, level, MaxLevels):
    if level == MaxLevels - 1:
        return(S[level] * b_f)
    # apply pre-smoother
    x_f = S[level] * b_f
    # new residual
    r_f = b_f - A[level] * x_f
    # restrict to coarse
    r_c = R[level] * r_f
    # solve coarse problem
    z_c = MultiLevelCycle(A, P, R, S, r_c, level + 1, MaxLevels)
    # prolongate back and add to solution
    x_f = x_f + P[level] * z_c
    # apply post-smoother
    S[level].Apply(b_f, x_f)
    return(x_f)

################################################################################

# ----------- #
# Main driver #
# ----------- #
#
def main():
    # Defines a communicator (serial or parallel, depending on how Trilinos
    # was configured), and creates a matrix corresponding to a 1D Laplacian.
    Comm = Epetra.PyComm()

    n = 1000
    FineSpace = ML.Space(n)
  
    Matrix = ML.PyMatrix(FineSpace, FineSpace)
    for i in range(n):
        if i > 0:
            Matrix[i, i - 1] = -1.
        if i < n - 1:
            Matrix[i, i + 1] = -1.
        Matrix[i, i] = 2.0
    Matrix.FillComplete()

    # Declares the lists that will contain the matrices (A), the prolongator
    # operators (P), the restriction operator (R), and the smoother or
    # coarse solver (S). The finest level matrix will be stored in A[0].
    A = [Matrix]  
    P = []
    R = []
    S = []

    NullSpace = ML.MultiVector(Matrix.GetDomainSpace())
    NullSpace.Update(1.0)
  
    List = {"aggregation: type": "MIS",
            "PDE equations"    : 1
            }

    # -------------------------------------------- #
    # Start the construction of the preconditioner #
    # -------------------------------------------- #
    #
    MaxLevels = 3
    for level in range(MaxLevels):
        NextNullSpace = ML.MultiVector()
        # Constructs the non-smoothed prolongator...
        Ptent = ML.GetPNonSmoothed(A[level], NullSpace, NextNullSpace, List)
        # ...and smooth it
        I = ML.GetIdentity(A[level].GetRangeSpace(), A[level].GetRangeSpace())
        lambda_max = 1.0 / ML.MaxEigAnorm(A[level])
        P_level = (I - A[level] * lambda_max) * Ptent
        # Stores prolongator, restriction, and RAP product
        P.append((I - A[level] * lambda_max) * Ptent)
        R.append(ML.GetTranspose(P[level]))
        A.append(ML.GetRAP(R[level], A[level], P[level]))
        # Defines the coarse solver or smoother (symmetric Gauss-Seidel)
        if level == MaxLevels - 1:
            S.append(ML.InverseOperator(A[level], "Amesos"))
        else:
            S_level = MyJacobiSmoother()
            S_level.Reshape(A[level], 0.67, 2)
            S.append(S_level)
        NullSpace = NextNullSpace  
  
    # Defines a linear system with a given exact solution
    x = ML.MultiVector(FineSpace)
    x_exact = ML.MultiVector(FineSpace)
    x_exact.Random()
    x_exact_norm = x_exact.Norm2()
    y = A[0] * x_exact
  
    # ---------------------------------------------------- #
    # A very simple Richardson method to solve the problem #
    # using 10 iterations:                                 #
    # ---------------------------------------------------- #
    #
    for i in range(10):
        # compute non-preconditioned residual
        res = y - A[0] * x 
        # compute the preconditioned residual
        prec_res = MultiLevelCycle(A, P, R, S, res, 0, MaxLevels)
        # update the solution vector
        x = x + prec_res 
        # compute the energy of the error
        diff = x - x_exact
        norm = diff * (A[0] * diff)
        if Comm.MyPID() == 0:
            print("iter ", i, " ||x - x_exact||_A = ", norm)
    print("End Result: TEST PASSED")

################################################################################

if __name__ == "__main__":
  main()
