#! ${PYTHON_EXECUTABLE}
# -*- python -*-

# @HEADER
# ***********************************************************************
#
#          PyTrilinos: Python Interfaces to Trilinos Packages
#                 Copyright (2014) Sandia Corporation
#
# Under the terms of Contract DE-AC04-94AL85000 with Sandia
# Corporation, the U.S. Government retains certain rights in this
# software.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the Corporation nor the names of the
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Questions? Contact William F. Spotz (wfspotz@sandia.gov)
#
# ***********************************************************************
# @HEADER

#
# System imports
from   __future__ import print_function
from   optparse   import *
import sys

#
# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-t", "--testharness", action="store_true",
                  dest="testharness", default=False,
                  help="test local build modules; prevent loading system-installed modules")
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
options,args = parser.parse_args()

#
# Under normal usage, simply use 'from PyTrilinos import Epetra'.  For testing,
# we want to be able to control whether we import from the build directory or
# from a system-installed version of PyTrilinos.
from testutil import fromPyTrilinosImport
Epetra    = fromPyTrilinosImport('Epetra'   , options.testharness)
EpetraExt = fromPyTrilinosImport('EpetraExt', options.testharness)

# Build a global communicator
comm    = Epetra.PyComm()
numProc = comm.NumProc()
myPID   = comm.MyPID()
iAmRoot = myPID == 0

def main():

    tolerance = 1e-5

    # Construct a vector x and populate with random values.
    # Then construct a diagonal Epetra.CrsMatrix
    n   = 10 * numProc
    map = Epetra.Map(n, 0, comm)
    x   = Epetra.Vector(map)
    x.Random()

    matrix = Epetra.CrsMatrix(Epetra.Copy, map, 0)

    for lrid in range(matrix.NumMyRows()):
        grid = matrix.GRID(lrid)
        matrix[grid,grid] = grid

    matrix.FillComplete()
    matrix.Print()

    # -------------------------------- #
    # Part I: Write elements to a file #
    # -------------------------------- #

    XMLWriter = EpetraExt.XMLWriter(comm, "data.xml")

    XMLWriter.Create("test xml file")
    if iAmRoot: print("Writing map ...", end="")
    XMLWriter.Write("map"   , map   )
    if iAmRoot: print("ok")
    if iAmRoot: print("Writing vector ...", end="")
    XMLWriter.Write("x"     , x     )
    if iAmRoot: print("ok")
    if iAmRoot: print("Writing matrix ...", end="")
    XMLWriter.Write("matrix", matrix)
    if iAmRoot: print("ok")
    XMLWriter.Close()

    # --------------------------------- #
    # Part II:Read elements from a file #
    # --------------------------------- #

    XMLReader = EpetraExt.XMLReader(comm, "data.xml")

    if iAmRoot: print("Reading map ...", end="")
    map2 = XMLReader.ReadMap("map")
    if map2 is None:
        print("FAIL:  map2 is None on processor", myPID)
        return 1
    if iAmRoot: print("ok")

    if iAmRoot: print("Reading vector ...", end="")
    x2 = XMLReader.ReadMultiVector("x")
    if x2 is None:
        print("FAIL:  x2 is None on processor", myPID)
        return 1
    if iAmRoot: print("ok")

    if iAmRoot: print("Reading matrix ...", end="")
    matrix2 = XMLReader.ReadCrsMatrix("matrix")
    if matrix2 is None:
        print("FAIL: matrix2 is None on processor", myPID)
        return 1
    if iAmRoot: print("ok")

    x2.Update(1.0, x, -1.0)
    norm = x2.Norm2()

    if iAmRoot: print("Checking tolerance ...", end="")
    if abs(norm) < tolerance:
        if iAmRoot: print("ok")
    else:
        if iAmRoot:
            print("FAILED:")
            print("  abs(norm) =", abs(norm))
            print("  tolerance =", tolerance)
        return 1

    return 0

################################################################

if __name__ == "__main__":
    failures = main()
    failures = comm.SumAll(failures)
    if failures == 0 and iAmRoot: print("End Result: TEST PASSED")
    sys.exit(failures)
