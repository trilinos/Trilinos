#! ${PYTHON_EXECUTABLE}
# -*- python -*-

# @HEADER
# ***********************************************************************
#
#          PyTrilinos: Python Interfaces to Trilinos Packages
#                 Copyright (2014) Sandia Corporation
#
# Under the terms of Contract DE-AC04-94AL85000 with Sandia
# Corporation, the U.S. Government retains certain rights in this
# software.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the Corporation nor the names of the
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Questions? Contact William F. Spotz (wfspotz@sandia.gov)
#
# ***********************************************************************
# @HEADER

# System imports
from __future__ import print_function
from optparse   import *

# The point of this test is to make sure that if another python module calls
# MPI_Init(), then the Epetra module will not register Epetra.Finalize with the
# atexit module.

# For this test to work, I have to import another MPI module which calls
# MPI_Init().  I choose mpi4py, but protect things so that the test exits
# gracefully if mpi4py is not installed.
try:
    from mpi4py import MPI
    comm = MPI.COMM_WORLD
    rank = comm.Get_rank()
except ImportError:
    print("Python module 'mpi4py' not found -- skipping test")
    print("End Result: TEST PASSED")
    exit()

# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-t", "--testharness", action="store_true",
                  dest="testharness", default=False,
                  help="test local build modules; prevent loading system-installed modules")
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
options,args = parser.parse_args()

# Under normal usage, simply use 'from PyTrilinos import Epetra', etc.  For
# testing, we want to be able to control whether we import from the build
# directory or from a system-installed version of PyTrilinos.
from testutil import fromPyTrilinosImport
Epetra  = fromPyTrilinosImport('Epetra',  options.testharness)
Teuchos = fromPyTrilinosImport('Teuchos', options.testharness)

# Main routine, which checks the Teuchos and Epetra MPII finalization functions,
# which should be registered with the atexit module under normal conditions.
# Here, however, because we imported from mpi4py, the PyTrilinos modules should
# recognize that another module is responsible for finalization, and not
# register the functions.
def main():

    # Define the root processor
    iAmRoot = comm.Get_rank() == 0

    # Output a message
    if iAmRoot:
        print("Module mpi4py has been imported and implicitly called MPI_Init().")
        print("Under this circumstance the Epetra and Teuchos modules should")
        print("not register their finalization functions with the atexit module.")
        print("Test status depends only upon this status.\n")

    # Check the atexit module for instances of the Epetra or Teuchos
    # finalization functions
    import atexit
    fails = 0
    if ${TPL_ENABLE_MPI}:
        for handler in atexit._exithandlers:
            if handler[0] is Epetra.Epetra_MPI_Finalize:   fails += 1
            if handler[0] is Teuchos.Teuchos_MPI_Finalize: fails += 1

    # Output the results
    totalFails = comm.reduce(fails)
    if iAmRoot:
        print("End Result: TEST", end=" ")
        if totalFails > 0:
            print("FAILED")
        else:
            print("PASSED")

    return

################################################################################

if __name__ == "__main__":
    main()
