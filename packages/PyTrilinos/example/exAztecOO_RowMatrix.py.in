#! ${PYTHON_EXECUTABLE}
# -*- python -*-

# @HEADER
# ***********************************************************************
#
#          PyTrilinos: Python Interfaces to Trilinos Packages
#                 Copyright (2014) Sandia Corporation
#
# Under the terms of Contract DE-AC04-94AL85000 with Sandia
# Corporation, the U.S. Government retains certain rights in this
# software.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the Corporation nor the names of the
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Questions? Contact William F. Spotz (wfspotz@sandia.gov)
#
# ***********************************************************************
# @HEADER

######################################################################
#
# Example of how to define an Epetra.RowMatrix derived class in python
# 
# This example shows how to derive from the class Epetra.RowMatrix in python.
# The main procedure is as follows: - create a python class derived from
# Epetra.RowMatrix -- in this case a 1D Laplacian matrix.  Define all the
# methods as done in this file.  The most important methods are probably
# Apply(), Multiply(), and ExtractMyRowCopy() (note that the return signature
# for NumMyRowEntries() and ExtractMyRowCopy() are different for python than for
# C++).  Some methods do not need to be implemented; in this case they simply
# return -1.  You may now create an instance of your derived class and supply it
# to any Trilinos solver that can use it (in this case AztecOO).
#
# Based on a script originally written by Marzio Sala.  Updated by Bill Spotz.
#
######################################################################

#
# System imports
from   __future__ import print_function
import numpy
from   optparse   import *

#
# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-t", "--testharness", action="store_true",
                  dest="testharness", default=False,
                  help="test local build modules; prevent loading system-installed modules")
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
parser.add_option("-n", type="int", dest="nodes", default=100,
                  help="number of nodes [default 100]")
options,args = parser.parse_args()

#
# Under normal usage, simply use 'from PyTrilinos import Epetra'.  For testing,
# we want to be able to control whether we import from the build directory or
# from a system-installed version of PyTrilinos.
from testutil import fromPyTrilinosImport
Epetra  = fromPyTrilinosImport('Epetra' , options.testharness)
AztecOO = fromPyTrilinosImport('AztecOO', options.testharness)

################################################################################

class Laplace1D_Matrix(Epetra.RowMatrix):

    def __init__(self, n, comm=None):
        """
        __init__(self, n) -> Laplace1D_Matrix (with and Epetra.PyComm() communicator)
        __init__(self, n, comm) -> Laplace1D_Matrix (with given communicator)
        """
        # Initialize the base class.  This is REQUIRED
        Epetra.RowMatrix.__init__(self)
        # Determine the communicator
        if comm is None:
            self.__comm = Epetra.PyComm()
        else:
            self.__comm = comm
        # Default indexes
        self.__y0 =  1
        self.__y1 = -1
        # Create the row map
        self.__rowMap = Epetra.Map(n, 0, self.__comm)
        # Create the col map
        colIndexes = list(self.__rowMap.MyGlobalElements())
        if self.__comm.MyPID() < self.__comm.NumProc()-1:
            self.__y1 = None    # Equivalent to last index
            colIndexes.append(colIndexes[-1]+1)
        if self.__comm.MyPID() > 0:
            self.__y0 = None    # Equivalent to index 0
            colIndexes.append(colIndexes[0]-1)
        self.__colMap = Epetra.Map(-1, colIndexes, 0, self.__comm)
        # Create the import object
        self.__importer = Epetra.Import(self.__colMap, self.__rowMap)
        # Create the ordered column map and importer
        colIndexes.sort()
        self.__orderedColMap   = Epetra.Map(-1, colIndexes, 0, self.__comm)
        self.__orderedImporter = Epetra.Import(self.__orderedColMap,
                                               self.__rowMap)
        # Store a label for the row matrix
        self.__label = "1D Laplace Row Matrix"
        # Store the matrix properties
        self.__numRows = n
        self.__numCols = n
        self.__useTranspose = False

    def __str__(self):
        "Return the row matrix label"
        return self.__label

    def Map(self):
        "Required implementation of Epetra.SrcDistObject class"
        return self.__rowMap

    def SetUseTranspose(self, useTranspose):
        "Required implementation of Epetra.Operator class"
        self.__useTranspose = bool(useTranspose)

    def UseTranspose(self):
        "Required implementation of Epetra.Operator class"
        return self.__useTranspose

    def Apply(self, LHS, RHS):
        "Required implementation of Epetra.Operator class"
        return self.Multiply(self.__useTranspose, LHS, RHS)

    def ApplyInverse(self):
        "Required implementation of Epetra.Operator class"
        return -2

    def HasNormInf(self):
        "Required implementation of Epetra.Operator class"
        return True

    def NormInf(self):
        "Required implementation of Epetra.Operator class"
        return 4.0

    def Label(self):
        "Required implementation of Epetra.Operator class"
        return self.__label

    def Comm(self):
        "Required implementation of Epetra.Operator class"
        return self.__comm

    def OperatorDomainMap(self):
        "Required implementation of Epetra.Operator class"
        return self.__rowMap

    def OperatorRangeMap(self):
        "Required implementation of Epetra.Operator class"
        return self.__rowMap

    def NumMyRowEntries(self, MyRow, NumEntries):
        """
        Required implementation of Epetra.RowMatrix class.  In C++, NumEntries
        is an int& argument intended as output.  When called via callbacks from
        C++, this int& is converted to a numpy array of length 1 so that it can
        be altered in-place via NumEntries[0] = ...
        """
        globalRow = self.__rowMap.GID(MyRow)
        if globalRow == 0 or globalRow == self.__numRows-1:
            NumEntries[0] = 1
        else:
            NumEntries[0] = 3
        return 0

    def MaxNumEntries(self):
        "Required implementation of Epetra.RowMatrix class"
        return 3

    def ExtractMyRowCopy(self, MyRow, Length, NumEntries, Values, Indices):
        """
        Required implementation of Epetra.RowMatrix class.  In C++, NumEntries,
        Values, and Indices are all output arguments.  When called via callbacks
        from C++, these arguments are converted to numpy arrays so that we can
        manipulate the data in-place.  NumEntries is a scalar in C++, but must
        be accessed as NumEntries[0] in python.
        """
        globalRow = self.__rowMap.GID(MyRow)
        if globalRow == 0 or globalRow == self.__numRows-1:
            if (Length < 1):
                return -1
            NumEntries[0] = 1
            Values[0]     = 1.0
            Indices[0]    = MyRow
        else:
            if (Length < 3):
                return -1
            NumEntries[0] = 3
            Values[:3]    = [   -1.0,   2.0,    -1.0]
            Indices[:3]   = [MyRow-1, MyRow, MyRow+1]
        return 0

    def ExtractDiagonalCopy(self, Diagonal):
        "Required implementation of Epetra.RowMatrix class"
        Diagonal.PutScalar(2.0)
        myPID = self.__comm.MyPID()
        if myPID == 0:                       Diagonal[ 0] = 1.0
        if myPID == self.__comm.NumProc()-1: Diagonal[-1] = 1.0
        return 0

    def Multiply(self, UseTranspose, x, y):
        "Required implementation of Epetra.RowMatrix class"
        try:
            # Under GNU C++ 4.1.2, x and y are provided to this method as "raw"
            # Epetra.Epetra_MultiVectors rather than hybrid Epetra.MultiVectors
            # -- so we fix them.
            if not isinstance(x, Epetra.MultiVector):
                x = Epetra.MultiVector(Epetra.View, x)
            if not isinstance(y, Epetra.MultiVector):
                y = Epetra.MultiVector(Epetra.View, y)
            # Import the off-processor values
            if not x.Map().SameAs(self.__rowMap):
                print("Vector x must be distributed via the matrix row map")
                return -1
            xImp = Epetra.MultiVector(self.__orderedColMap, x.NumVectors())
            xImp.Import(x, self.__orderedImporter, Epetra.Insert)
            # Apply operator to interior points
            y[:,self.__y0:self.__y1] = 2.0 * xImp[:,1:-1] - xImp[:,:-2] - \
                                       xImp[:,2:]
            # Apply boundary conditions.  Note that x[...] would attempt to
            # return a new Epetra.MultiVector, and this hangs when only
            # attempted on a single processor.  Therefore, we slice the
            # MultiVector's internal array
            if self.__comm.MyPID() == 0:
                y[:,:1] = x.array[:,:1]
            if self.__comm.MyPID() == self.__comm.NumProc() - 1:
                y[:,-1:] = x.array[:,-1:]
            # NB: For the boundary calculations, I wanted to use
            #
            #     y[:, 0] = x.array[:, 0]
            #     y[:,-1] = x.array[:,-1]
            #
            # but this raised a ValueError: Object too deep for desired array on
            # beowulf, which was running numpy 0.9.8 at the time.  The simpler
            # notation in the comment above works for newer versions of numpy.

        except Exception as e:
            print("Laplace1D_Matrix.Multiply error:", e)
            return -1

        return 0

    def Solve(self, upper, trans, unitDiagonal, x, y):
        "Required implementation of Epetra.RowMatrix class"
        return -1

    def InvRowSums(self, x):
        "Required implementation of Epetra.RowMatrix class"
        return -1

    def LeftScale(self, x):
        "Required implementation of Epetra.RowMatrix class"
        return -1

    def InvColSums(self, x):
        "Required implementation of Epetra.RowMatrix class"
        return -1

    def RightScale(self, x):
        "Required implementation of Epetra.RowMatrix class"
        return -1

    def Filled(self):
        "Required implementation of Epetra.RowMatrix class"
        return True

    def NormOne(self):
        "Required implementation of Epetra.RowMatrix class"
        return 4.0

    ######################################################################
    # The following methods with "64" suffixes are temporary and should be
    # deprecated in the future in favor of the non-"64" versions of these
    # methods.

    def NumGlobalNonzeros64(self):
        "Required implementation of Epetra.RowMatrix class"
        return 3 * self.__numRows - 2

    def NumGlobalRows64(self):
        "Required implementation of Epetra.RowMatrix class"
        return self.__numRows

    def NumGlobalCols64(self):
        "Required implementation of Epetra.RowMatrix class"
        return self.__numCols

    def NumGlobalDiagonals64(self):
        "Required implementation of Epetra.RowMatrix class"
        return self.__numRows

    ######################################################################

    def NumMyNonzeros(self):
        "Required implementation of Epetra.RowMatrix class"
        return 3 * self.__numRows - 2

    def NumMyRows(self):
        "Required implementation of Epetra.RowMatrix class"
        return self.__numRows

    def NumMyCols(self):
        "Required implementation of Epetra.RowMatrix class"
        return self.__numCols

    def NumMyDiagonals(self):
        "Required implementation of Epetra.RowMatrix class"
        return self.__numRows

    def LowerTriangular(self):
        "Required implementation of Epetra.RowMatrix class"
        return False

    def UpperTriangular(self):
        "Required implementation of Epetra.RowMatrix class"
        return False

    def RowMatrixRowMap(self):
        "Required implementation of Epetra.RowMatrix class"
        return self.__rowMap

    def RowMatrixColMap(self):
        "Required implementation of Epetra.RowMatrix class"
        return self.__colMap

    def RowMatrixImporter(self):
        "Required implementation of Epetra.RowMatrix class"
        return self.__importer

################################################################################

def main():

    # Problem initialization
    n       = options.nodes
    bc0     = 0.0
    bc1     = 1.0
    tol     = 1.0e-5
    comm    = Epetra.PyComm()
    iAmRoot = (comm.MyPID() == 0)
    lap1d   = Laplace1D_Matrix(n, comm)

    # Create solution and RHS vectors
    x = Epetra.Vector(lap1d.OperatorDomainMap())
    b = Epetra.Vector(lap1d.OperatorRangeMap())

    # Initialize vectors: x will be a straight line between its boundary values,
    # and b=1, with its boundary values equal to x on the boundaries
    x[:] = bc0 + (bc1-bc0) * (x.Map().MyGlobalElements() / (n-1.0))
    b.PutScalar(1.0)
    if comm.MyPID() == 0:
        b[0] = bc0
    if comm.MyPID() == comm.NumProc()-1:
        b[-1] = bc1

    # Build the linear system solver
    problem = Epetra.LinearProblem(lap1d, x, b)
    solver  = AztecOO.AztecOO(problem)
    solver.SetParameters({"Solver"  : "CG",
                          "Precond" : "Jacobi",
                          "Output"  : 16      })

    # Solve the problem
    solver.Iterate(5*n, tol)
    if iAmRoot:
        if solver.ScaledResidual() < tol: print("End Result: TEST PASSED")
        else:                             print("End Result: TEST FAILED")

################################################################################

if __name__ == "__main__":
    main()
