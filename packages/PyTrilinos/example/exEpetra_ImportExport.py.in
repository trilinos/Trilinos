#! ${PYTHON_EXECUTABLE}
# -*- python -*-

# @HEADER
# ***********************************************************************
#
#          PyTrilinos: Python Interfaces to Trilinos Packages
#                 Copyright (2014) Sandia Corporation
#
# Under the terms of Contract DE-AC04-94AL85000 with Sandia
# Corporation, the U.S. Government retains certain rights in this
# software.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the Corporation nor the names of the
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Questions? Contact William F. Spotz (wfspotz@sandia.gov)
#
# ***********************************************************************
# @HEADER

# -------------------------------------------------------------------------
# This example shows how to redistribute Epetra distributed objects.
#
# The example creates two maps. The first map has all the elements on
# processor 0 only, the second has a linear distribution, so that 
# approximatively the same number of elements is given to each processor.
# Then, an Epetra.Import object is created, and used to move elements from
# a vector defined on processor 0 only, to a distributed vector.
# 
# This example should be run with more than one processor
# -------------------------------------------------------------------------

#
# System imports
from __future__ import print_function
from optparse import *

#
# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-t", "--testharness", action="store_true",
                  dest="testharness", default=False,
                  help="test local build modules; prevent loading system-installed modules")
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
options,args = parser.parse_args()

#
# Under normal usage, simply use 'from PyTrilinos import Epetra'.  For testing,
# we want to be able to control whether we import from the build directory or
# from a system-installed version of PyTrilinos.
from testutil import fromPyTrilinosImport
Epetra = fromPyTrilinosImport('Epetra', options.testharness)

def main():

  # Initializes the communicator (or do-nothing in serial runs), then
  # creates a communicator (Epetra.SerialComm in serial, or Epetra.MpiComm
  # in parallel).
  Comm  = Epetra.PyComm()

  NumGlobalRows = 10
  if Comm.MyPID() == 0:
    i = NumGlobalRows
  else:
    i = 0

  # Map1 contains all the elements on processor 0, Map2 is a linear map
  # with elements on all processes
  Map1 = Epetra.Map(-1, range(0, i), 0, Comm)
  Map2 = Epetra.Map(NumGlobalRows, 0, Comm)

  # Creates an importer from Map1 to Map2
  Importer = Epetra.Import(Map2, Map1)
  # Defines two vectors, X1 defined on Map1, and X2 defined on Map2,
  # then fix the values of X1, and let X2 import the values of X1
  X1 = Epetra.Vector(Map1)
  X1.Random()
  X2 = Epetra.Vector(Map2)
  X2.Import(X1, Importer, Epetra.Insert)
  print(X2)

  # We now do exactly the same thing, but using an export element,
  # and X1_bis should be equivalent to X1. The printed norm should
  # be zero
  Exporter = Epetra.Export(Map2, Map1)
  X1_bis = Epetra.Vector(Map1)
  X1_bis.Export(X2, Exporter, Epetra.Insert)

  X1_bis.Update(-1.0, X1, 1.0)
  Norm = X1_bis.Norm2()
  if Comm.MyPID() == 0:
    print('||X1 - X1_bis||_2 = ', Norm)

  # synchronize processors
  Comm.Barrier()

  if Comm.MyPID() == 0: print("End Result: TEST PASSED")

if __name__ == "__main__":
  main()
