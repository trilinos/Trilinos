#! ${PYTHON_EXECUTABLE}
# -*- python -*-

# ************************************************************************
# @HEADER

import sys

# System imports
from   numpy    import *
from   optparse import *
import sys

#
# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-t", "--testharness", action="store_true",
                  dest="testharness", default=False,
                  help="test local build modules; prevent loading system-installed modules")
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
parser.add_option("-n", "--numelem", type="int", dest="numelem", default=20,
                  help="set the number of elements [default 100]")
parser.add_option("--alpha", type="float", dest="alpha", default=1.0,
                  help="set alpha")
parser.add_option("--beta", type="float", dest="beta", default=2.0,
                  help="set beta")
parser.add_option("--scale", type="float", dest="scale", default=1.0,
                  help="set scale")
parser.add_option("--iters", type="int", dest="maxNewtonIters", default=100,
                  help="set maxNewtonIters")
parser.add_option("-N", type="int", dest="N", default=3,   # TODO: what is correct default?
                  help="set N")
options,args = parser.parse_args()


#
# Under normal usage, simply use 'from PyTrilinos import Epetra'.  For testing,
# we want to be able to control whether we import from the build directory or
# from a system-installed version of PyTrilinos.
from testutil import fromPyTrilinosImport
Teuchos   = fromPyTrilinosImport('Teuchos'  , options.testharness)
Epetra    = fromPyTrilinosImport('Epetra'   , options.testharness)
EpetraExt = fromPyTrilinosImport('EpetraExt', options.testharness)
NOX       = fromPyTrilinosImport('NOX'      , options.testharness)
LOCA      = fromPyTrilinosImport('LOCA'     , options.testharness)

# ######################################################################

class ChanProblemInterface(NOX.Epetra.Interface.Jacobian,
                           LOCA.Epetra.Interface.Required ):
  def __init__(self, comm, N):
    # Initialize base class first
    LOCA.Epetra.Interface.Required.__init__(self)

    self.__comm = comm
    self.n = N
    self.lambda_ = 1.0


    vec = zeros(N)
    for i in range(0,self.n):
      vec[i] = i*(self.n-1-i) / ((self.n-1.)*(self.n-1.)) + 0.001
    
    map_ = Epetra.Map(N,0,comm)
    self.initGuess = Epetra.Vector(map_,vec)  

  def printSolution(self,x,conParam):
      print(x)
    
  def computeF(self, x, F, fillFlag):
    # we ignore the fillFlag argument and always perform all computation
    n = self.n
    for i in range(0,n):
      F[i] = x[i]**2 - self.lambda_ * float(i)
    return True

  def InitialGuess(self):
      return self.initGuess

  def computeJacobian(self, x, Jac):
    raise
    return False

  def setParams(self, p):
    #self.sigma   = p.getValue("sigma"  )
    self.lambda_ = p.getValue("lambda_")
    
  def setParameters(self, p):
    self.lambda_ = p.getValue("lambda_")

######################################################################

# Main routine
def main():
    
  lambda0 = 0.0    

  # Communicator
  comm    = Epetra.PyComm()
  myPID   = comm.MyPID()
  numProc = comm.NumProc()

  # Suppress 'Aztec status AZ_loss: loss of precision' messages
  comm.SetTracebackMode(0)

  # Get the number of elements from the command line
  numGlobalElements = options.numelem + 1
  if numGlobalElements < numProc:
    msg = "numGlobalBlocks = %d cannot be < number of processors = %d" % \
          (numGlobalElements,numProc)
    msg += "\nTest failed!"
    raise RuntimeError(msg)

  # Get parameters
  scale = options.scale
  maxNewtonIters = options.maxNewtonIters
  N = options.N

  paramList = \
    LOCA.Epetra.defaultContinuationParameters(comm=comm,
                                              verbosity=options.verbosity)
  printParams = paramList["NOX"]["Printing"]
  lsParams    = paramList["NOX"]["Direction"]["Newton"]["Linear Solver"]
  stepper     = paramList["LOCA"]["Stepper"]
  stepSize    = paramList["LOCA"]["Step Size"]
  stepper["Continuation Parameter"] = "lambda_"
  stepper["Initial Value"] = 1.09
  stepper["Max Value"] = 2.8
  stepper["Max Steps"] = 400
  stepSize["Initial Step Size"] = -0.001
  stepSize["Max Step Size"] = 0.001
  lsParams["Size of Krylov Subspace"] = 200

  p = LOCA.ParameterVector()
  p.addParameter("lambda_", lambda0)

  interface = ChanProblemInterface(comm, N)
  soln      = interface.InitialGuess()
  noxSoln   = NOX.Epetra.Vector(soln, NOX.Epetra.Vector.CreateView)
  

  print('--> initial guess, done!')
  # Define the Jacobian linear system
  mfJac = NOX.Epetra.MatrixFree(printParams, interface, noxSoln)
  iReq = interface
  iJac = mfJac
  linSys = NOX.Epetra.LinearSystemAztecOO(printParams, lsParams, interface, mfJac, mfJac, soln) 
  # Create the Group
  locaSoln = NOX.Epetra.Vector(soln, NOX.Epetra.Vector.CreateView)

  globalData = LOCA.createGlobalData(paramList)
  group = LOCA.Epetra.Group(globalData, printParams, interface, locaSoln, linSys, p)

  print('--> group done!')

  # Create the convergence tests
  normF = NOX.StatusTest.NormF(1.0e-8)
  maxIters = NOX.StatusTest.MaxIters(maxNewtonIters)
  converged = NOX.StatusTest.Combo(NOX.StatusTest.Combo.OR, normF, maxIters)

  # Create the stepper
  stepper = LOCA.Stepper(globalData, group, converged, paramList)

  # Perform continuation run
  status = stepper.run()

  #
  # *** IMPORTANT ***
  # If you create a GlobalData object, as above with the line
  #     globalData = LOCA.createGlobalData(paramList)
  # you should destroy it with the following command in order to resolve
  # circular dependencies
  #
  LOCA.destroyGlobalData(globalData)

  return 0

# ######################################################################

if __name__ == "__main__":

    status = main()

    if status == 0:
        print("End Result: TEST PASSED")

    sys.exit(status)
