#! ${PYTHON_EXECUTABLE}
# -*- python -*-

# @HEADER
# ***********************************************************************
#
#          PyTrilinos: Python Interfaces to Trilinos Packages
#                 Copyright (2014) Sandia Corporation
#
# Under the terms of Contract DE-AC04-94AL85000 with Sandia
# Corporation, the U.S. Government retains certain rights in this
# software.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the Corporation nor the names of the
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Questions? Contact William F. Spotz (wfspotz@sandia.gov)
#
# ***********************************************************************
# @HEADER

#############################################################################
#
# This example script is intended to emulate a finite difference
# version of the 1D FEM test problem from NOX found in
# nox/test/epetra/NOX_1DFEMNonlinear.  It solves the 1D finite difference
# approximation to
#
#     d2u
#     --- - k * u**2 = 0
#     dx2
#
# Subject to Dirichlet boundary conditions at x=0, x=1.
#
#############################################################################

# System imports
from   __future__ import print_function
import numpy
from   optparse import *
import sys

#
# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-t", "--testharness", action="store_true",
                  dest="testharness", default=False,
                  help="test local build modules; prevent loading system-installed modules")
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
parser.add_option("-n", "--numelem", type="int", dest="numelem", default=100,
                  help="set the number of elements [default 100]")
parser.add_option("-k", "--force_const", type="float", dest="k", default=1000.0,
                  help="set the nonlinear forcing constant [default 1000]")
parser.add_option("--bc0", type="float", dest="bc0", default=1.0,
                  help="set the Dirichlet boundary condition value at x=0 [default 1]")
parser.add_option("--bc1", type="float", dest="bc1", default=2.0,
                  help="set the Dirichlet boundary condition value at x=1 [default 2]")
parser.add_option("-p", "--plot", action="store_true", dest="plot",
                  default=False, help="Plot the resulting solution")
options,args = parser.parse_args()

#
# Under normal usage, simply use 'from PyTrilinos import Epetra'.  For testing,
# we want to be able to control whether we import from the build directory or
# from a system-installed version of PyTrilinos.
from testutil import fromPyTrilinosImport
Teuchos   = fromPyTrilinosImport('Teuchos'  , options.testharness)
Epetra    = fromPyTrilinosImport('Epetra'   , options.testharness)
EpetraExt = fromPyTrilinosImport('EpetraExt', options.testharness)
NOX       = fromPyTrilinosImport('NOX'      , options.testharness)

# Plotting import
if options.plot:
    import pylab as mp

# ######################################################################

class MyInterface(NOX.Epetra.Interface.Required):

    def __init__(self, numElem, comm, bc0=1.0, bc1=2, xmin=0.0, xmax=1.0, k=1000.0):
        # Initialize the base class
        NOX.Epetra.Interface.Required.__init__(self)
        # MyInterface initialization
        self.__numElem  = numElem
        self.__comm     = comm
        self.__myPID    = comm.MyPID()
        self.__numProc  = comm.NumProc()
        self.__haveBC0  = (self.__myPID == 0)
        self.__haveBC1  = (self.__myPID == self.__numProc-1)
        self.bc0        = bc0
        self.bc1        = bc1
        self.k          = k
        self.initializeCommunication()
        self.initializeMesh(xmin, xmax)
        self.initializeSoln()
        self.initializeGraph()
        self.initializeSlice()

    def getComm(self):
        return self.__comm

    def initializeCommunication(self):
        # Get the standard map
        self.__stdMap = Epetra.Map(self.__numElem, 0, self.__comm)
        # Build the list of overlap elements
        newElems = list(self.__stdMap.MyGlobalElements())
        if not self.__haveBC0: newElems.append(newElems[ 0]-1)
        if not self.__haveBC1: newElems.append(newElems[-1]+1)
        # Get the overlap map
        self.__overlapMap = Epetra.Map(-1,newElems,0,self.__comm)
        # We are going to import to the overlap map from the standard map
        self.__importer = Epetra.Import(self.__overlapMap,
                                        self.__stdMap)

    def getMap(self):
        return self.__stdMap

    def getImporter(self):
        return self.__importer

    def initializeMesh(self, xmin, xmax):
        x = xmin + numpy.array(self.__stdMap.MyGlobalElements()) * \
            (xmax-xmin) / (self.__numElem-1.0)
        print("Proc", self.__myPID, "x =", x)
        self.__x = Epetra.Vector(self.__stdMap, x)
        self.__h = (xmax - xmin) / (self.__numElem - 1.0)

    def getMesh(self):
        return self.__x

    def getMeshSize(self):
        return self.__h

    def initializeSoln(self):
        # Allocate u and its overlap version
        self.__u        = Epetra.Vector(self.__stdMap    )
        self.__overlapU = Epetra.Vector(self.__overlapMap)
        # Initial guess is linear between Dirichlet boundary conditions
        self.__u[:] = self.bc0 + self.__stdMap.MyGlobalElements() * \
                      (self.bc1 - self.bc0) / (self.__numElem - 1.0)

    def getSolution(self):
        return self.__u

    def initializeGraph(self):
        self.__graph = Epetra.CrsGraph(Epetra.Copy, self.__stdMap, 3)
        for gid in self.__stdMap.MyGlobalElements():
            # Boundaries: Dirichlet boundary conditions
            if gid in (0, self.__numElem-1):
                self.__graph.InsertGlobalIndices(gid, [gid])
            # Interior: three-point centered stencil
            else:
                self.__graph.InsertGlobalIndices(gid, [gid-1, gid, gid+1])
        self.__graph.FillComplete()

    def getGraph(self):
        return self.__graph

    def initializeSlice(self):
        if self.__haveBC0:
            f0 = 1
        else:
            f0 = None
        if self.__haveBC1:
            f1 = -1
        else:
            f1 = None
        self.__slice = slice(f0, f1)

    def importVector(self, overlapVector, stdVector):
        """
        Import data into the overlap vector from the standard vector.  The data
        returned in the overlap vector will be ordered sequentially as the
        finite difference formulas expects them to be.  This requires
        importVector() to shift data around, because the internal overlap map
        requires that communicated elements be listed last.
        """
        overlapVector.Import(stdVector, self.__importer, Epetra.Insert)
        if self.__haveBC0:
            return
        n = self.__overlapMap.NumMyElements()
        if self.__haveBC1:
            index = n-1
        else:
            index = n-2
        left = overlapVector[index]
        # This data shift has to be done in reverse.  I can't seem to get
        # extended slicing to work, so I do it in a python loop.  Inefficient,
        # yes, but I haven't figured out a better solution.
        for i in range(index, 0, -1):
            overlapVector[i] = overlapVector[i-1]
        overlapVector[0] = left

    def computeF(self, u, F, flag):
        """
        This is the function that NOX calls back to in order to compute F(u).
        Arguments u and F are provided as Epetra.Vector objects, complete with
        numpy interface.
        """
        try:
            # Initialization: get the overlap u, mesh size, and perform the
            # communication
            ou = self.__overlapU
            h  = self.getMeshSize()
            self.importVector(ou, u)
            # Compute the residual on the interior
            F[self.__slice] = (ou[:-2] - 2*ou[1:-1] + ou[2:]) / (h*h) - \
                              self.k * ou[1:-1] * ou[1:-1]
            # Compute the residual on the boundaries
            if self.__haveBC0: F[ 0] = ou[ 0] - self.bc0
            if self.__haveBC1: F[-1] = ou[-1] - self.bc1
            return True
        except Exception as e:
            print("Proc", self.__myPID,
                  "MyInterface.computeF() has thrown an exception:")
            print(str(type(e))[18:-2] + ":", e)
            return False

######################################################################

# Main routine
def main():

    # Communicator
    comm    = Epetra.PyComm()
    myPID   = comm.MyPID()
    numProc = comm.NumProc()

    # Suppress 'Aztec status AZ_loss: loss of precision' messages
    comm.SetTracebackMode(0)

    # Get the number of grid points (elements) from the command line
    numElements = options.numelem
    if numElements < numProc:
        msg = "numBlocks = %d cannot be < number of processors = %d" % \
              (numElements,numProc)
        msg += "\nTest failed!"
        raise RuntimeError(msg)

    # Get the boundary conditions
    bc0 = options.bc0
    bc1 = options.bc1

    # Create the interface between NOX and the application.  This object is
    # derived from NOX.Epetra.Interface.
    interface = MyInterface(numElements, comm, bc0, bc1, k=options.k)

    # Get the initial solution vector from the problem
    initGuess    = interface.getSolution()
    noxInitGuess = NOX.Epetra.Vector(initGuess,NOX.Epetra.Vector.CreateView)

    # Define the ParameterLists
    nlParams    = NOX.Epetra.defaultNonlinearParameters(comm,2)
    printParams = nlParams["Printing"]
    lsParams    = nlParams["Linear Solver"]

    # Define the Jacobian interface/operator
    mf  = NOX.Epetra.MatrixFree(printParams,interface,noxInitGuess)
    # Define the Preconditioner interface/operator
    fdc = NOX.Epetra.FiniteDifferenceColoring(printParams, interface,
                                              initGuess, interface.getGraph(),
                                              True)

    # Create and execute the solver
    solver = NOX.Epetra.defaultSolver(initGuess, interface, mf, mf, fdc, fdc, nlParams)

    ### Begin Nonlinear Solve ###

    solveStatus = solver.solve()

    ### End Nonlinear Solve ###

    # Output the parameter list
    if options.verbosity:
        if myPID == 0:
            print("Final Parameters\n****************")
            solver.getList()._print()
            print()

    # Tests
    status = 0
    if solveStatus != NOX.StatusTest.Converged:
        status += 1
        if myPID == 0: print("Nonlinear solver failed to converge")

    # Summarize the test results
    if myPID == 0:
        if status == 0:
            print("End Result: TEST PASSED")
        else:
            print("End Result: TEST FAILED")

    # Obtain a view of the plot data. Note that the following code is the Python
    # alalog of what you might use in C++:
    #
    finalGroup = solver.getSolutionGroup()
    u = finalGroup.getX()
    x = interface.getMesh()

    # Plot the results
    if options.plot:
        stdMap   = interface.getMap()
        rootMap  = Epetra.Util_Create_Root_Map(stdMap)
        importer = Epetra.Import(rootMap, stdMap)
        xplot    = Epetra.Vector(rootMap)
        uplot    = Epetra.Vector(rootMap)
        xplot.Import(x, importer, Epetra.Insert)
        uplot.Import(u, importer, Epetra.Insert)
        if myPID == 0:
            print("Plotting results...")
            mp.plot(xplot,uplot)
            mp.title("exNOX_1Dfdm Problem Solution, k = %d" % options.k)
            mp.xlabel("x")
            mp.ylabel("u(x)")
            mp.show()

    return status

# ######################################################################

if __name__ == "__main__":

    status = main()

    sys.exit(status)
