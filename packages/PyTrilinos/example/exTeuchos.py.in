#! ${PYTHON_EXECUTABLE}
# -*- python -*-

# @HEADER
# ***********************************************************************
#
#          PyTrilinos: Python Interfaces to Trilinos Packages
#                 Copyright (2014) Sandia Corporation
#
# Under the terms of Contract DE-AC04-94AL85000 with Sandia
# Corporation, the U.S. Government retains certain rights in this
# software.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the Corporation nor the names of the
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Questions? Contact William F. Spotz (wfspotz@sandia.gov)
#
# ***********************************************************************
# @HEADER

# This example script builds Teuchos.ParameterList objects and functionally
# equivalent python dictionaries, demonstrating various capabilities of the
# Teuchos.ParameterList class.  These are then stored and read as XML files.

# Author: Bill Spotz, Sandia National Laboratories
# Date: 24 Apr 2007

#
# System imports
from   __future__ import print_function
import sys
import types

#
# Parse the command-line arguments
#from optparse import *
#parser = OptionParser()
#parser.add_option("-t", "--testharness", action="store_true",
#                  dest="testharness", default=False,
#                  help="test local build modules; prevent loading system-installed modules")
#parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
#                  help="set the verbosity level [default 2]")
#options,args = parser.parse_args()
options = type("Options", (object,), {"testharness":True, "verbosity":2})
#
# Under normal usage, simply use 'from PyTrilinos import Teuchos'.  For testing,
# we want to be able to control whether we import from the build directory or
# from a system-installed version of PyTrilinos.
from testutil import fromPyTrilinosImport
Teuchos = fromPyTrilinosImport('Teuchos', options.testharness)

################################################################################

def main(iAmRoot):

    # Create a ParameterList in the C++ way:
    pList = Teuchos.ParameterList()
    pList.set("maxiters", 100)
    pList.set("tol", 1.0e-6)
    pList.set("precond", "ILUT")
    if iAmRoot:
        print()
        print(pList)

    # The isType() method is disabled.  In its place is a type() method that
    # returns a python type object:
    assert(pList.type("maxiters") is int  )
    assert(pList.type("tol"     ) is float)
    assert(pList.type("precond" ) is str  )

    # The python ParameterList has been augmented to support python dictionary
    # methods:
    keys = pList.keys()  # Returns a list of parameter names
    assert("maxiters" in keys)
    assert("tol"      in keys)
    assert("precond"  in keys)

    # Actually, the "in" operator works on ParameterLists, too:
    assert("maxiters" in pList)
    assert("tol"      in pList)
    assert("precond"  in pList)

    # These additional methods include special methods that enable iteration:
    if iAmRoot: print()
    for name in pList:
        if iAmRoot:
            print(name, ":", pList[name])

    # PyTrilinos as a whole has been designed to accept python dictionaries
    # where ParameterLists are expected.  For example, there is an overloaded
    # version of "set" that accepts a ParameterList.  Here we give it a
    # dictionary:
    pList.set("coefs", {"a":1.0, "b":-0.5, "c":0.0})
    assert(pList.type("coefs") is Teuchos.ParameterList)

    # To retrieve data from a ParameterList, you can use the get() method, or
    # the more dictionary-like square-brackets:
    m1 = pList.get("maxiters")
    m2 = pList["maxiters"]
    assert(m1 == m2)

    # An asDict() method has been added, to convert a ParameterList to a
    # dictionary:
    d = pList.asDict()
    assert(isinstance(d, dict))
    del d["maxiters"]    # Deletion is not supported by ParameterList
    pList2 = Teuchos.ParameterList(d)  # New constructor that accepts a dictionary
    if iAmRoot:
        print()
        print(pList2)

    # The len() operator returns the number of top-level parameters:
    assert(len(pList) == len(pList2)+1)

    # ParameterList also supports comparison, and the square brackets can be
    # used for assignment, too:
    assert(pList != pList2)
    pList2["maxiters"] = 100
    assert(pList == pList2)

    # You can convert ParameterList objects and dictionaries to XMLObjects:
    writer = Teuchos.XMLParameterListWriter()
    xmlObj1 = writer.toXML(d)       # d is a dictionary
    xmlObj2 = writer.toXML(pList2)  # ParameterList argument

    # XMLObjects support the __str__() method
    assert(isinstance(xmlObj1, Teuchos.XMLObject))
    assert(isinstance(xmlObj2, Teuchos.XMLObject))
    if iAmRoot:
        print()
        print(xmlObj2)

    # Write the XMLObject to disk, read it back and check it:
    if iAmRoot:
        open("params.xml","w").write(xmlObj2.toString())
        source  = Teuchos.FileInputSource("params.xml")
        xmlObj3 = source.getObject()
        reader  = Teuchos.XMLParameterListReader()
        pList3  = reader.toParameterList(xmlObj3)
        assert(pList3 == pList2)

################################################################################

if __name__ == "__main__":

    # Obtain the default communicator
    comm    = Teuchos.DefaultComm.getComm()
    iAmRoot = comm.getRank() == 0

    if iAmRoot:
        print("******************")
        print("** exTeuchos.py **")
        print("******************")

    # Run the test and catch any errors
    errors = 0
    try:
        main(iAmRoot)
    except Exception as e:
        print("Processor", comm.getRank(), ": Exception raised")
        print("  Exception text = '%s'" % str(e))
        errors = 1

    # Sum the errors, report the status and exit
    print("Processor", comm.getRank(), ": errors =", errors)
    totalErrors = comm.reduceAll(Teuchos.REDUCE_SUM, errors)
    print("Processor", comm.getRank(), ": totalErrors =", totalErrors)
    if iAmRoot:
        if totalErrors == 0:
            print("End Result: TEST PASSED")
        else:
            print("End Result: TEST FAILED")
    sys.exit(totalErrors)
