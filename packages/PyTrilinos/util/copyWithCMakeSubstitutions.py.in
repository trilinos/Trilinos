#! ${PYTHON_EXECUTABLE}

# @HEADER
# ***********************************************************************
#
#          PyTrilinos: Python Interfaces to Trilinos Packages
#                 Copyright (2014) Sandia Corporation
#
# Under the terms of Contract DE-AC04-94AL85000 with Sandia
# Corporation, the U.S. Government retains certain rights in this
# software.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the Corporation nor the names of the
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Questions? Contact William F. Spotz (wfspotz@sandia.gov)
#
# ***********************************************************************
# @HEADER

"""
copyWithCMakeSubstitutions.py - This script is intended to be run as a script.
Its purpose is to copy a file from one location to another, and substitute
instances of '${VAR_NAME}' with the value of variable VAR_NAME, which comes from
the local build tree's CMakeCache.txt file.  If VAR_NAME is not a variable name
within the cache file, then substitute the null string.
"""

__version__ = "1.0"
__author__  = "Bill Spotz"
__date__    = "Nov 4 2010"

# Import python modules
import MakefileVariables
import CMakeCacheVariables
import optparse
import os
import re

#############################################################################

def main():
    """
    Process any command line arguments.  Query the build system to find the
    top-level binary directory, to find the CMakeCache.txt file.  Query the
    CMakeCache.txt file to get a dictionary of all the cache variables.  Read in
    the input file, make cache variable substitutions, and write the output
    file.
    """

    # Parse the command line options
    parser = optparse.OptionParser()
    parser.add_option("-v", "--version", action="store_true", dest="version",
                      default=False, help="Print the version number and exit")
    options,args = parser.parse_args()

    # Version
    if options.version:
        print("copyWithCMakeSubstitutions.py version " + __version__)
        exit()

    # Arguments
    if len(args) != 2:
        print("usage: copyWithCMakeSubstitutions.py infile outfile")
        exit(-1)
    infilename  = args[0]
    outfilename = args[1]
    if infilename == outfilename:
        print("outfile must be distinct from infile")
        exit(-2)

    # Obtain the dictionary of CMake cache variables
    makefileVariables   = MakefileVariables.processMakefile("Makefile")
    cmakeBinaryDir      = makefileVariables["CMAKE_BINARY_DIR"]
    # Remove quotes from cmakeBinaryDir.
    cmakeBinaryDir = cmakeBinaryDir.replace("\"", "").replace("'", "")
    cmakeCacheFile      = os.path.join(cmakeBinaryDir, "CMakeCache.txt")
    cmakeCacheVariables = CMakeCacheVariables.parseCMakeCacheFile(cmakeCacheFile)

    # Open the files
    infile  = open(infilename,  "r")
    outfile = open(outfilename, "w")

    # Read in the input source file, line by line, make substitutions, and write
    # the output target file
    substitution = re.compile(r"\$\{.*\}")
    line = infile.read()
    while line:
        match = re.search(substitution, line)
        while match:
            name  = line[match.start()+2:match.end()-1]
            line  = line.replace(match.group(), str(cmakeCacheVariables.get(name,"")))
            match = re.search(substitution, line)
        outfile.write(line)
        line = infile.read()

    # Close the files and transfer the protection mode
    infile.close()
    outfile.close()
    mode = os.stat(infilename)[0]
    os.chmod(outfilename, mode)

#############################################################################
# If called from the command line, call main()
#############################################################################

if __name__ == "__main__":
    main()
