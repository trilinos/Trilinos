// Copyright 2014 Sandia Corporation. Under the terms of
// Contract DE-AC04-94AL85000 with Sandia Corporation, the
// U.S. Government retains certain rights in this software.
//
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

#include "GregoryPatch.hpp"

namespace percept {

double GregoryPatch::
evalQuad(double u, double v, const MDArray& Cp)
{
  /*
     <* bcl[u,v] // ColumnForm *>

     0:  b[0, 0][u, v]
     1:  b[1, 0][u, v]
     2:  b[2, 0][u, v]
     3:  b[3, 0][u, v]

     4:  b[0, 1][u, v]
     5:  b[1, 1, 1, 0][u, v]
     6:  b[1, 1, 0, 1][u, v]
     7:  b[2, 1, 1, 0][u, v]
     8:  b[2, 1, 0, 1][u, v]
     9:  b[3, 1][u, v]

     10: b[0, 2][u, v]
     11: b[1, 2, 1, 0][u, v]
     12: b[1, 2, 0, 1][u, v]
     13: b[2, 2, 1, 0][u, v]
     14: b[2, 2, 0, 1][u, v]
     15: b[3, 2][u, v]

     16: b[0, 3][u, v]
     17: b[1, 3][u, v]
     18: b[2, 3][u, v]
     19: b[3, 3][u, v]

     edges:
     v = 0
     {0,1,2,3}
     u = 1
     {3,9,15,19}
     v = 1
     {19,18,17,16}
     u = 0
     {16, 10, 4, 0}

     ribbons: (convention is interior is on the left, 1st 4 are "q" boundary points, 2nd 4 are interior "p" points)
     v = 0
     {{0,1,2,3},{4,5,7,9}}
     u = 1
     {{3,9,15,19},{2, 8, 14, 18}}
     v = 1
     {{19,18,17,16},{15,13,11,10}}
     u = 0
     {{16, 10, 4, 0}, {17, 12, 6, 1}}

   */
  double p = 0;
#define NEAR(u,val) (std::fabs((u)-(val)) < 1.e-5)
  if (NEAR(u,0.0))
    {
      <* CodeGen[{p->EvalPatch[0,v]}] *>
    }
  else if (NEAR(u, 1))
    {
      <* CodeGen[{p->EvalPatch[1,v]}] *>
    }
  else if (NEAR(v, 0))
    {
      <* CodeGen[{p->EvalPatch[u,0]}] *>
    }
  else if (NEAR(v, 1))
    {
      <* CodeGen[{p->EvalPatch[u,1]}] *>
    }
  else
    {
      <* CodeGen[{p->EvalPatch[u,v]}] *>
    }
  return p;
}

/// @param Cp is for a single coordinate (x,y, or z)
void  GregoryPatch::
evalQuadGrad(double u, double v, const MDArray& Cp, double *grad)
{
  double gu = 0.0, gv=0.0;
  if (NEAR(u,0))
    {
      <* CodeGen[{gu -> DuDvQuad[[1,1]], gv -> DuDvQuad[[1,2]] }] *>
    }
  else if (NEAR(u , 1))
    {
      <* CodeGen[{gu -> DuDvQuad[[2,1]], gv -> DuDvQuad[[2,2]] }] *>
    }
  else if (NEAR(v, 0))
    {
      <* CodeGen[{gu -> DuDvQuad[[3,1]], gv -> DuDvQuad[[3,2]] }] *>
    }
  else if (NEAR(v, 1))
    {
      <* CodeGen[{gu -> DuDvQuad[[4,1]], gv -> DuDvQuad[[4,2]] }] *>
    }
  else
    {
      <* CodeGen[{gu -> du, gv -> dv}] *>
    }
  grad[0] = gu;
  grad[1] = gv;
}

/// @param Cp is for a single coordinate (x,y, or z)
void  GregoryPatch::
evalQuadHessian(double u, double v, const MDArray& Cp, double H[2][2])
{
  double H00, H01, H10, H11;
  if (NEAR(u,0))
    {
      <* CodeGen[{H00 -> HessQuadB[[1,1,1]], H01 -> HessQuadB[[1,1,2]], H10 -> HessQuadB[[1,2,1]], H11 -> HessQuadB[[1,2,2]] }] *>
    }
  else if (NEAR(u , 1))
    {
      <* CodeGen[{H00 -> HessQuadB[[2,1,1]], H01 -> HessQuadB[[2,1,2]], H10 -> HessQuadB[[2,2,1]], H11 -> HessQuadB[[2,2,2]] }] *>
    }
  else if (NEAR(v, 0))
    {
      <* CodeGen[{H00 -> HessQuadB[[3,1,1]], H01 -> HessQuadB[[3,1,2]], H10 -> HessQuadB[[3,2,1]], H11 -> HessQuadB[[3,2,2]] }] *>
    }
  else if (NEAR(v, 1))
    {
      <* CodeGen[{H00 -> HessQuadB[[4,1,1]], H01 -> HessQuadB[[4,1,2]], H10 -> HessQuadB[[4,2,1]], H11 -> HessQuadB[[4,2,2]] }] *>
    }
  else
    {
      <* CodeGen[{H00 -> HessQuad[[1,1]], H01 -> HessQuad[[1,2]], H10 -> HessQuad[[2,1]], H11 -> HessQuad[[2,2]] }] *>
    }
  H[0][0] = H00;
  H[0][1] = H01;
  H[1][0] = H10;
  H[1][1] = H11;
}

#undef NEAR

}
