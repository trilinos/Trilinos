#define YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION    2
#define YY_FLEX_MINOR_VERSION    5
#define YY_FLEX_SUBMINOR_VERSION 39
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* The c++ scanner is a mess. The FlexLexer.h header file relies on the
 * following macro. This is required in order to pass the c++-multiple-scanners
 * test in the regression suite. We get reports that it breaks inheritance.
 * We will address this in a future release of flex, or omit the C++ scanner
 * altogether.
 */
#define yyFlexLexer SEAMSFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types.
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t   flex_int8_t;
typedef uint8_t  flex_uint8_t;
typedef int16_t  flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t  flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char        flex_int8_t;
typedef short int          flex_int16_t;
typedef int                flex_int32_t;
typedef unsigned char      flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int       flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN (-32767 - 1)
#endif
#ifndef INT32_MIN
#define INT32_MIN (-2147483647 - 1)
#endif
#ifndef INT8_MAX
#define INT8_MAX (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <errno.h>
#include <iostream>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else /* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined(__STDC__)

#define YY_USE_CONST

#endif /* defined (__STDC__) */
#endif /* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int)(unsigned char)c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE  YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin)

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern yy_size_t yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE   1
#define EOB_ACT_LAST_MATCH    2

#define YY_LESS_LINENO(n)
#define YY_LINENO_REWIND_TO(ptr)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n)                                                                                  \
  do {                                                                                             \
    /* Undo effects of setting up yytext. */                                                       \
    int yyless_macro_arg = (n);                                                                    \
    YY_LESS_LINENO(yyless_macro_arg);                                                              \
    *yy_cp                                = (yy_hold_char);                                        \
    YY_RESTORE_YY_MORE_OFFSET(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ;        \
    YY_DO_BEFORE_ACTION; /* set up yytext again */                                                 \
  } while (0)

#define unput(c) yyunput(c, (yytext_ptr))

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
{
  /* %if-c-only */
  /* %endif */

  /* %if-c++-only */
  std::istream *yy_input_file;
  /* %endif */

  char *yy_ch_buf;  /* input buffer */
  char *yy_buf_pos; /* current position in input buffer */

  /* Size of input buffer in bytes, not including room for EOB
   * characters.
   */
  yy_size_t yy_buf_size;

  /* Number of characters read into yy_ch_buf, not including EOB
   * characters.
   */
  yy_size_t yy_n_chars;

  /* Whether we "own" the buffer - i.e., we know we created it,
   * and can realloc() it to grow it, and should free() it to
   * delete it.
   */
  int yy_is_our_buffer;

  /* Whether this is an "interactive" input source; if so, and
   * if we're using stdio for input, then we want to use getc()
   * instead of fread(), to make sure we stop fetching input after
   * each newline.
   */
  int yy_is_interactive;

  /* Whether we're considered to be at the beginning of a line.
   * If so, '^' rules will be active on the next match, otherwise
   * not.
   */
  int yy_at_bol;

  int yy_bs_lineno; /**< The line count. */
  int yy_bs_column; /**< The column count. */

  /* Whether to try to fill the input buffer when we reach the
   * end of it.
   */
  int yy_fill_buffer;

  int yy_buffer_status;

#define YY_BUFFER_NEW    0
#define YY_BUFFER_NORMAL 1
  /* When an EOF's been seen but there's still some text to process
   * then we mark the buffer as YY_EOF_PENDING, to indicate that we
   * shouldn't try reading from the input source any more.  We might
   * still have a bunch of tokens to match, though, because of
   * possible backing-up.
   *
   * When we actually see the EOF, we change the status to "new"
   * (via yyrestart()), so that the user can continue scanning by
   * just pointing yyin at a new input file.
   */
#define YY_BUFFER_EOF_PENDING 2
};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ((yy_buffer_stack) ? (yy_buffer_stack)[(yy_buffer_stack_top)] : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *SEAMSalloc(yy_size_t);
void *SEAMSrealloc(void *, yy_size_t);
void  SEAMSfree(void *);

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive)                                                         \
  {                                                                                                \
    if (!YY_CURRENT_BUFFER) {                                                                      \
      yyensure_buffer_stack();                                                                     \
      YY_CURRENT_BUFFER_LVALUE = yy_create_buffer(yyin, YY_BUF_SIZE);                              \
    }                                                                                              \
    YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive;                                  \
  }

#define yy_set_bol(at_bol)                                                                         \
  {                                                                                                \
    if (!YY_CURRENT_BUFFER) {                                                                      \
      yyensure_buffer_stack();                                                                     \
      YY_CURRENT_BUFFER_LVALUE = yy_create_buffer(yyin, YY_BUF_SIZE);                              \
    }                                                                                              \
    YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol;                                                  \
  }

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION                                                                        \
  (yytext_ptr) = yy_bp;                                                                            \
  /* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */                         \
  yyleng         = (size_t)(yy_cp - yy_bp);                                                        \
  (yy_hold_char) = *yy_cp;                                                                         \
  *yy_cp         = '\0';                                                                           \
  /* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */                        \
  (yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES     105
#define YY_END_OF_BUFFER 106
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
{
  flex_int32_t yy_verify;
  flex_int32_t yy_nxt;
};
static yyconst flex_int16_t yy_accept[750] = {
    0,   0,   0,   53,  53,  0,   0,   42,  42,  0,   0,   2,   2,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   106, 103, 103, 104, 103, 101, 102, 102, 102, 103, 98,
    53,  73,  88,  103, 103, 70,  103, 103, 74,  75,  66,  64,  76,  65,  52,  69,  51,
    78,  77,  80,  55,  81,  79,  54,  54,  54,  89,  90,  71,  98,  103, 93,  67,  103,
    103, 103, 101, 102, 102, 102, 103, 98,  45,  45,  46,  42,  45,  45,  42,  42,  42,
    42,  45,  45,  103, 3,   3,   4,   2,   3,   3,   2,   2,   2,   2,   3,   3,

    103, 103, 36,  103, 101, 102, 102, 102, 103, 98,  103, 103, 103, 101, 102, 102, 102,
    103, 98,  103, 103, 18,  103, 101, 102, 102, 102, 103, 98,  103, 103, 22,  103, 101,
    102, 102, 102, 103, 98,  103, 103, 26,  103, 101, 102, 102, 102, 103, 98,  0,   0,
    0,   0,   0,   102, 102, 102, 95,  96,  0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   97,  53,  0,   85,  0,   91,  0,   0,   86,  0,   92,  72,  58,  62,  56,
    63,  57,  52,  0,   68,  59,  52,  51,  0,   82,  84,  83,  54,  54,  54,

    60,  0,   87,  94,  0,   0,   0,   0,   0,   102, 102, 102, 95,  96,  0,   97,  0,
    0,   42,  42,  0,   0,   0,   42,  42,  42,  43,  44,  0,   0,   0,   2,   2,   2,
    2,   2,   0,   0,   36,  0,   0,   0,   0,   0,   102, 102, 102, 95,  96,  0,   0,
    0,   97,  0,   0,   0,   0,   0,   102, 102, 102, 95,  96,  0,   97,  0,   18,  0,
    0,   0,   102, 102, 102, 95,  96,  0,   0,   0,   97,  0,   22,  0,   0,   0,   102,
    102, 102, 95,  96,  0,   0,   0,   97,  0,   26,  0,   0,   0,   0,   0,

    102, 102, 102, 95,  96,  0,   0,   0,   0,   0,   97,  0,   0,   0,   102, 102, 0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   61,  0,   52,
    0,   51,  54,  54,  0,   0,   0,   102, 102, 0,   0,   0,   42,  42,  0,   0,   0,
    2,   2,   0,   0,   102, 102, 0,   0,   0,   0,   102, 102, 0,   0,   102, 102, 0,
    0,   0,   0,   102, 102, 0,   0,   0,   0,   102, 102, 0,   0,   0,   0,   0,   0,
    0,   99,  100, 0,   0,   0,   5,   0,   0,   0,   0,   0,   30,  0,   0,

    0,   0,   0,   0,   0,   0,   0,   54,  54,  0,   0,   50,  0,   99,  100, 0,   0,
    0,   42,  42,  0,   0,   0,   38,  0,   0,   2,   2,   0,   0,   99,  100, 0,   0,
    0,   0,   0,   0,   0,   14,  0,   99,  100, 0,   0,   99,  100, 0,   0,   0,   0,
    99,  100, 0,   0,   0,   0,   99,  100, 0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   34,  0,   0,   0,   0,   0,   0,

    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   13,  0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   23,  0,   0,   0,   0,   0,   0,   40,
    0,   0,   28,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   37,  0,
    0,   0,   36,  0,   0,   0,   0,   0,   0,   0,   0,   0,   18,  0,   0,

    0,   16,  0,   0,   22,  0,   0,   0,   20,  0,   26,  0,   0,   0,   0,   0,   0,
    0,   31,  0,   47,  0,   29,  0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,
    41,  0,   39,  0,   0,   32,  0,   33,  0,   0,   0,   0,   0,   0,   0,   18,  0,
    0,   0,   22,  0,   0,   26,  0,   0,   0,   0,   0,   0,   0,   48,  0,   0,   0,
    0,   0,   40,  0,   0,   0,   0,   0,   35,  0,   14,  0,   0,   0,   0,   15,  0,
    0,   19,  0,   0,   0,   0,   49,  0,   8,   0,   0,   0,   24,  0,   0,

    0,   0,   47,  0,   0,   0,   0,   14,  0,   0,   0,   0,   24,  0,   10,  0,   0,
    0,   0,   0,   0,   0,   0,   0,   17,  0,   21,  0,   0,   0,   0,   0,   27,  0,
    0,   25,  0,   0,   0,   0,   0,   0,   6,   0,   0,   11,  1,   12,  0};

static yyconst flex_int32_t yy_ec[256] = {
    0,  1,  1,  1,  1,  1,  1,  1,  1,  2,  3,  1,  2,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13,
    14, 15, 16, 17, 18, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 22, 23, 24, 25,
    26, 1,  27, 28, 29, 30, 31, 32, 33, 34, 35, 33, 33, 36, 37, 38, 39, 40, 41, 42, 43,
    44, 45, 46, 33, 47, 33, 33, 48, 49, 50, 51, 33, 1,  52, 53, 54, 55,

    56, 57, 33, 58, 59, 33, 33, 60, 33, 61, 62, 63, 64, 65, 66, 67, 68, 33, 69, 70, 33,
    33, 71, 72, 73, 74, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,

    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1};

static yyconst flex_int32_t yy_meta[75] = {0, 1, 2, 3, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                           1, 5, 6, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                                           5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1, 5, 5, 5, 5, 5,
                                           5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 1, 1, 1};

static yyconst flex_int16_t yy_base[800] = {
    0,    0,    0,    74,   0,    148,  0,    222,  0,    295,  296,  367,  0,    441,  0,
    515,  0,    589,  0,    663,  0,    737,  0,    2943, 2944, 810,  2944, 811,  2944, 0,
    254,  259,  234,  881,  815,  2944, 2918, 303,  818,  2944, 2931, 2929, 2944, 2944, 294,
    295,  2944, 296,  291,  293,  303,  2944, 2944, 2915, 2914, 2913, 2944, 0,    267,  270,
    2944, 2944, 2912, 285,  2863, 2861, 2944, 2920, 819,  822,  2919, 952,  278,  281,  803,
    821,  2944, 826,  2944, 829,  834,  2944, 825,  324,  833,  839,  258,  867,  838,  2944,
    842,  2944, 843,  849,  2944, 837,  329,  854,  866,  259,  875,

    2928, 859,  2944, 1025, 2927, 1096, 288,  294,  876,  1169, 2916, 1172, 1173, 2915, 1244,
    293,  297,  1017, 1018, 2924, 862,  2944, 1317, 2923, 1388, 802,  805,  1460, 1461, 2922,
    1463, 2944, 1466, 2921, 1537, 808,  823,  1609, 1610, 2920, 1612, 2944, 1615, 2919, 1686,
    848,  854,  1758, 1761, 1764, 1171, 1765, 1768, 1035, 0,    301,  869,  2944, 2944, 1177,
    2848, 880,  1004, 1006, 886,  2881, 2888, 2862, 998,  1014, 2944, 1769, 1004, 2944, 340,
    2944, 1772, 1775, 2944, 2906, 2944, 2892, 2944, 2944, 2944, 2944, 2944, 1025, 337,  2944,
    2944, 1030, 1037, 1062, 2944, 2944, 2944, 0,    1013, 1019,

    2944, 1146, 2944, 2944, 2902, 1776, 1781, 1170, 1784, 0,    1152, 1154, 2901, 2900, 1178,
    2899, 1791, 1321, 1794, 1779, 1797, 1798, 1326, 340,  1188, 1325, 2944, 2944, 1470, 1158,
    1019, 1802, 1782, 1184, 1327, 1328, 2880, 2907, 2944, 1805, 1816, 1808, 1819, 1854, 0,
    1162, 1163, 2906, 2905, 1476, 1617, 1319, 2904, 2893, 1463, 1857, 1313, 1879, 0,    1168,
    1175, 2892, 2891, 1458, 2890, 2899, 2944, 1891, 1851, 1894, 0,    1299, 1300, 2898, 2897,
    1472, 1864, 1622, 2896, 2895, 2944, 1902, 1881, 1912, 0,    1305, 1306, 2894, 2893, 1474,
    1885, 1860, 2892, 2891, 2944, 1927, 1932, 1936, 1940, 1618,

    0,    1307, 1308, 2890, 2889, 1949, 1953, 891,  1620, 1956, 2651, 1962, 1446, 1030, 888,
    1025, 1311, 1314, 2637, 1307, 2599, 1312, 1160, 1970, 2591, 1166, 1442, 2577, 2565, 2549,
    1169, 2944, 2585, 2584, 2583, 2582, 1441, 1442, 1444, 1956, 854,  1445, 1447, 1613, 1324,
    1458, 1957, 1975, 1462, 1450, 2008, 2005, 2011, 2559, 1628, 1580, 1583, 1924, 1811, 2032,
    1070, 1584, 1585, 1905, 1972, 1590, 1591, 2019, 2025, 1951, 2020, 1592, 1596, 2027, 2030,
    2037, 2036, 1598, 1600, 1784, 2034, 2044, 1759, 1038, 2049, 1826, 0,    0,    1602, 2545,
    2596, 2944, 1466, 2559, 1468, 1595, 2039, 2944, 1472, 1609,

    2552, 1612, 1750, 2567, 2566, 2541, 1768, 0,    0,    1901, 1228, 2944, 2081, 0,    0,
    2075, 2051, 2093, 1332, 1856, 1805, 1924, 2099, 2944, 1939, 2035, 1870, 1905, 2564, 2105,
    0,    0,    2099, 2077, 2111, 2588, 2113, 2115, 1370, 2944, 2047, 0,    0,    2106, 2108,
    0,    0,    2119, 2121, 2122, 2123, 0,    0,    2124, 2129, 2136, 2125, 0,    0,    2132,
    2137, 2138, 2073, 1996, 2139, 2103, 2524, 2115, 1972, 2121, 2121, 2144, 2148, 2545, 2138,
    2188, 2554, 2560, 2518, 2515, 2509, 2205, 1630, 2137, 2189, 2160, 2164, 2171, 2180, 2554,
    856,  2209, 2577, 2944, 2210, 2212, 2058, 2151, 2201, 2216,

    2144, 2217, 2222, 2227, 2219, 2223, 2224, 2231, 2250, 2229, 2232, 2237, 2576, 2235, 2241,
    2212, 2205, 2539, 2944, 2219, 2573, 2502, 2253, 2232, 2547, 2242, 2273, 2944, 2534, 2527,
    2510, 2510, 2135, 2235, 2245, 2250, 2286, 2255, 2524, 2564, 2242, 2297, 2288, 2289, 2246,
    2303, 2563, 2276, 2308, 2314, 2562, 2318, 2561, 2310, 2311, 2320, 2560, 2559, 2322, 2556,
    2944, 1917, 1821, 2297, 912,  2326, 2555, 2944, 2554, 2329, 2944, 2332, 2528, 2304, 2482,
    2519, 2486, 2485, 2340, 2353, 2345, 2548, 2357, 2944, 2360, 2515, 2545, 2944, 2544, 2372,
    2543, 2377, 2364, 2379, 2383, 2326, 2542, 2944, 2540, 2365,

    2539, 2944, 2348, 2533, 2944, 2531, 2368, 2530, 2944, 2528, 2944, 2527, 2334, 2337, 2359,
    2466, 2393, 2395, 2944, 2399, 2944, 2407, 2944, 2310, 2410, 2944, 2305, 2389, 2095, 2414,
    2400, 2417, 2421, 2143, 2944, 2431, 2944, 2096, 2054, 2944, 2053, 2944, 2434, 2051, 2426,
    2429, 2437, 2382, 2050, 2944, 1973, 2438, 1972, 2944, 1965, 1946, 2944, 2445, 2391, 2449,
    1851, 1771, 1811, 2452, 2944, 1825, 2396, 1830, 1617, 2452, 2944, 2455, 2468, 2460, 1661,
    1668, 2944, 2463, 2944, 2471, 2472, 2457, 1666, 2944, 2464, 1635, 2944, 2476, 1629, 2479,
    2484, 2944, 1457, 2944, 1511, 1444, 1378, 2944, 2487, 2499,

    2480, 2492, 2944, 2504, 1333, 2496, 2508, 2944, 2510, 1367, 1336, 1335, 2944, 2512, 2944,
    1294, 1289, 2488, 1234, 2522, 2516, 1203, 2519, 1227, 2944, 1226, 2944, 2536, 1199, 913,
    1180, 1082, 2944, 1052, 1077, 2944, 1021, 1034, 869,  835,  351,  282,  2944, 280,  278,
    2944, 2944, 2944, 2944, 2605, 2611, 2617, 2619, 2625, 2630, 2632, 2637, 2639, 2645, 2651,
    2657, 2663, 2669, 2675, 2681, 2687, 2693, 2699, 2705, 2711, 2717, 2723, 2729, 2735, 2741,
    2747, 2753, 2759, 2765, 2771, 2777, 2783, 2789, 2795, 2801, 2807, 2813, 2819, 2825, 2831,
    2837, 2843, 2849, 2855, 2861, 2867, 2873, 2879, 2885

};

static yyconst flex_int16_t yy_def[800] = {
    0,   749, 1,   749, 3,   749, 5,   749, 7,   1,   1,   749, 11,  749, 13,  749, 15,
    749, 17,  749, 19,  749, 21,  749, 749, 749, 749, 749, 749, 750, 750, 750, 749, 749,
    749, 749, 749, 751, 749, 749, 749, 752, 749, 749, 749, 749, 749, 749, 749, 749, 749,
    749, 749, 749, 749, 749, 749, 753, 753, 753, 749, 749, 749, 749, 749, 749, 749, 754,
    754, 754, 754, 749, 71,  71,  754, 754, 749, 749, 749, 755, 749, 749, 755, 756, 756,
    756, 749, 749, 749, 749, 749, 749, 757, 749, 749, 757, 758, 758, 758, 749, 749,

    759, 759, 749, 759, 759, 749, 106, 106, 759, 759, 760, 760, 760, 760, 749, 115, 115,
    760, 760, 761, 761, 749, 761, 761, 749, 125, 125, 761, 761, 762, 762, 749, 762, 762,
    749, 135, 135, 762, 762, 763, 763, 749, 763, 763, 749, 145, 145, 763, 763, 749, 33,
    749, 749, 749, 750, 750, 750, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749,
    749, 749, 749, 749, 749, 749, 751, 749, 749, 749, 749, 752, 749, 749, 749, 749, 749,
    749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 753, 753, 753,

    749, 749, 749, 749, 754, 754, 754, 754, 754, 71,  71,  71,  754, 754, 754, 754, 749,
    749, 755, 755, 749, 749, 749, 756, 756, 756, 749, 749, 749, 749, 749, 757, 757, 758,
    758, 758, 749, 759, 749, 759, 759, 759, 759, 759, 106, 106, 106, 759, 759, 759, 759,
    759, 759, 760, 760, 760, 760, 760, 115, 115, 115, 760, 760, 760, 760, 761, 749, 761,
    761, 761, 125, 125, 125, 761, 761, 761, 761, 761, 761, 762, 749, 762, 762, 762, 135,
    135, 135, 762, 762, 762, 762, 762, 762, 763, 749, 763, 763, 763, 763, 763,

    145, 145, 145, 763, 763, 763, 763, 763, 763, 763, 763, 749, 749, 749, 750, 750, 749,
    749, 764, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749,
    749, 749, 753, 753, 749, 754, 765, 71,  71,  754, 754, 749, 756, 756, 749, 749, 749,
    758, 758, 749, 759, 106, 106, 759, 759, 759, 766, 115, 115, 760, 760, 125, 125, 761,
    761, 761, 761, 135, 135, 762, 762, 762, 762, 145, 145, 763, 763, 763, 763, 763, 763,
    749, 750, 750, 749, 749, 764, 749, 749, 749, 749, 749, 749, 749, 749, 749,

    749, 749, 749, 749, 749, 749, 749, 753, 753, 749, 765, 749, 765, 71,  71,  754, 754,
    749, 756, 756, 749, 749, 749, 749, 749, 749, 758, 758, 749, 759, 106, 106, 759, 759,
    759, 767, 759, 759, 766, 749, 766, 115, 115, 760, 760, 125, 125, 761, 761, 761, 761,
    135, 135, 762, 762, 762, 762, 145, 145, 763, 763, 763, 763, 763, 763, 749, 749, 749,
    749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 765, 765, 754, 754,
    749, 749, 749, 749, 749, 759, 759, 767, 749, 759, 759, 766, 760, 760, 761,

    761, 761, 761, 761, 762, 762, 762, 762, 762, 763, 763, 763, 768, 763, 763, 749, 749,
    749, 749, 749, 769, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 770, 754,
    749, 749, 749, 749, 749, 771, 759, 759, 759, 772, 760, 761, 773, 761, 761, 761, 774,
    762, 775, 762, 762, 762, 776, 777, 763, 768, 749, 763, 763, 749, 749, 749, 769, 749,
    778, 749, 749, 749, 749, 749, 749, 749, 749, 749, 770, 770, 779, 780, 749, 749, 749,
    749, 771, 749, 781, 759, 782, 759, 772, 772, 783, 761, 773, 749, 784, 761,

    774, 749, 762, 775, 749, 785, 762, 776, 749, 777, 749, 786, 763, 763, 749, 749, 749,
    749, 749, 778, 749, 749, 749, 749, 749, 749, 749, 749, 749, 770, 787, 779, 779, 780,
    749, 749, 749, 749, 781, 749, 782, 749, 759, 788, 789, 783, 783, 761, 784, 749, 790,
    762, 785, 749, 791, 786, 749, 763, 763, 749, 749, 749, 749, 749, 749, 749, 749, 792,
    749, 787, 749, 787, 779, 793, 749, 788, 749, 789, 749, 789, 794, 761, 790, 749, 762,
    791, 749, 763, 795, 763, 749, 749, 749, 749, 749, 749, 792, 749, 749, 787,

    787, 793, 749, 793, 749, 789, 794, 749, 794, 796, 797, 795, 749, 763, 749, 749, 749,
    749, 798, 793, 793, 749, 794, 796, 749, 797, 749, 763, 799, 749, 749, 798, 749, 749,
    799, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 0,   749, 749,
    749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749,
    749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749,
    749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749

};

static yyconst flex_int16_t yy_nxt[3019] = {
    0,   24,  25,  26,  25,  24,  24,  27,  28,  24,  24,  24,  24,  24,  24,  24,  24,  24,
    24,  24,  24,  24,  24,  24,  24,  24,  24,  29,  29,  29,  29,  30,  29,  29,  29,  29,
    29,  29,  29,  29,  29,  31,  29,  29,  29,  29,  29,  29,  24,  32,  24,  24,  29,  29,
    29,  29,  30,  29,  29,  29,  29,  29,  29,  29,  31,  29,  29,  29,  29,  29,  29,  33,
    24,  24,  24,  24,  34,  35,  34,  36,  37,  38,  28,  39,  40,  41,  42,  43,  44,  45,
    46,  47,  48,  49,  50,  51,  52,  53,  54,  55,  56,

    57,  57,  57,  57,  58,  57,  57,  57,  57,  57,  57,  57,  57,  57,  59,  57,  57,  57,
    57,  57,  57,  60,  32,  61,  62,  57,  57,  57,  57,  58,  57,  57,  57,  57,  57,  57,
    57,  59,  57,  57,  57,  57,  57,  57,  63,  64,  65,  66,  67,  68,  26,  68,  67,  67,
    69,  70,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,
    67,  67,  71,  71,  71,  71,  72,  71,  71,  71,  71,  71,  71,  71,  71,  71,  73,  71,
    71,  71,  71,  71,  71,  67,  74,  67,  67,  71,

    71,  71,  71,  72,  71,  71,  71,  71,  71,  71,  71,  73,  71,  71,  71,  71,  71,  71,
    75,  67,  67,  67,  76,  77,  78,  79,  76,  76,  80,  81,  76,  76,  76,  76,  76,  76,
    76,  76,  76,  76,  76,  82,  76,  76,  76,  76,  76,  76,  83,  83,  83,  83,  84,  83,
    83,  83,  83,  83,  83,  83,  83,  83,  85,  83,  83,  83,  83,  83,  83,  76,  86,  76,
    76,  83,  83,  83,  83,  84,  83,  83,  83,  83,  83,  83,  83,  85,  83,  83,  83,  83,
    83,  83,  87,  76,  76,  76,  88,  88,  88,  88,

    156, 38,  38,  157, 158, 176, 159, 182, 176, 184, 188, 190, 186, 199, 200, 202, 191, 183,
    185, 187, 192, 189, 193, 156, 211, 212, 157, 220, 227, 158, 228, 159, 233, 194, 246, 315,
    199, 200, 247, 260, 202, 261, 176, 220, 155, 176, 189, 211, 212, 155, 748, 333, 747, 333,
    746, 171, 334, 246, 194, 315, 155, 247, 260, 745, 261, 63,  63,  89,  90,  91,  92,  89,
    89,  93,  94,  89,  89,  89,  89,  89,  89,  89,  89,  89,  89,  89,  95,  89,  89,  89,
    89,  89,  89,  96,  96,  96,  96,  97,  96,  96,

    96,  96,  96,  96,  96,  96,  96,  98,  96,  96,  96,  96,  96,  96,  89,  99,  89,  89,
    96,  96,  96,  96,  97,  96,  96,  96,  96,  96,  96,  96,  98,  96,  96,  96,  96,  96,
    96,  100, 89,  89,  89,  101, 102, 103, 102, 101, 101, 104, 105, 101, 101, 101, 101, 101,
    101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 106, 106, 106, 106, 107,
    106, 106, 106, 106, 106, 106, 106, 106, 106, 108, 106, 106, 106, 106, 106, 106, 101, 109,
    101, 101, 106, 106, 106, 106, 107, 106, 106, 106,

    106, 106, 106, 106, 108, 106, 106, 106, 106, 106, 106, 110, 101, 101, 101, 111, 112, 26,
    112, 111, 111, 113, 114, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
    111, 111, 111, 111, 111, 115, 115, 115, 115, 116, 115, 115, 115, 115, 115, 115, 115, 115,
    115, 117, 115, 115, 115, 115, 115, 115, 111, 118, 111, 111, 115, 115, 115, 115, 116, 115,
    115, 115, 115, 115, 115, 115, 117, 115, 115, 115, 115, 115, 115, 119, 111, 111, 111, 120,
    121, 122, 121, 120, 120, 123, 124, 120, 120, 120,

    120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 125, 125, 125,
    125, 126, 125, 125, 125, 125, 125, 125, 125, 125, 125, 127, 125, 125, 125, 125, 125, 125,
    120, 128, 120, 120, 125, 125, 125, 125, 126, 125, 125, 125, 125, 125, 125, 125, 127, 125,
    125, 125, 125, 125, 125, 129, 120, 120, 120, 130, 131, 132, 131, 130, 130, 133, 134, 130,
    130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 135,
    135, 135, 135, 136, 135, 135, 135, 135, 135, 135,

    135, 135, 135, 137, 135, 135, 135, 135, 135, 135, 130, 138, 130, 130, 135, 135, 135, 135,
    136, 135, 135, 135, 135, 135, 135, 135, 137, 135, 135, 135, 135, 135, 135, 139, 130, 130,
    130, 140, 141, 142, 141, 140, 140, 143, 144, 140, 140, 140, 140, 140, 140, 140, 140, 140,
    140, 140, 140, 140, 140, 140, 140, 140, 140, 145, 145, 145, 145, 146, 145, 145, 145, 145,
    145, 145, 145, 145, 145, 147, 145, 145, 145, 145, 145, 145, 140, 148, 140, 140, 145, 145,
    145, 145, 146, 145, 145, 145, 145, 145, 145, 145,

    147, 145, 145, 145, 145, 145, 145, 149, 140, 140, 140, 150, 152, 150, 152, 206, 172, 153,
    172, 177, 207, 177, 207, 207, 178, 207, 749, 217, 209, 217, 217, 206, 219, 206, 206, 221,
    220, 221, 749, 177, 222, 177, 220, 177, 177, 177, 232, 744, 272, 273, 177, 215, 177, 155,
    286, 178, 412, 233, 239, 155, 240, 239, 240, 268, 267, 268, 413, 287, 229, 233, 229, 272,
    273, 213, 155, 214, 215, 286, 239, 225, 151, 154, 160, 226, 160, 173, 155, 161, 173, 208,
    287, 216, 208, 295, 302, 749, 218, 230, 303, 218,

    235, 231, 225, 316, 223, 202, 226, 749, 173, 162, 236, 163, 173, 173, 320, 164, 165, 302,
    166, 173, 237, 303, 230, 235, 327, 231, 167, 316, 540, 241, 202, 387, 269, 236, 162, 168,
    169, 171, 320, 170, 165, 743, 383, 616, 737, 171, 248, 327, 249, 617, 738, 171, 205, 205,
    387, 205, 205, 205, 205, 205, 205, 205, 205, 205, 206, 205, 205, 205, 205, 205, 205, 210,
    210, 205, 205, 205, 205, 205, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
    210, 210, 210, 210, 210, 210, 210, 210, 210, 205,

    205, 205, 205, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
    210, 210, 210, 210, 205, 205, 205, 205, 242, 239, 242, 255, 255, 243, 321, 322, 202, 323,
    312, 324, 312, 322, 295, 323, 325, 326, 188, 324, 742, 337, 264, 188, 351, 326, 741, 338,
    192, 189, 193, 322, 331, 202, 189, 386, 324, 322, 323, 313, 326, 194, 388, 314, 324, 337,
    440, 264, 326, 351, 335, 338, 335, 736, 189, 336, 441, 740, 733, 189, 386, 262, 265, 263,
    313, 388, 194, 314, 464, 244, 238, 238, 239, 238,

    238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 245, 245, 238,
    238, 238, 238, 238, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245,
    245, 245, 245, 245, 245, 245, 245, 238, 238, 238, 238, 245, 245, 245, 245, 245, 245, 245,
    245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 238, 238, 238, 238, 250, 239,
    250, 256, 256, 256, 256, 749, 160, 258, 160, 339, 206, 323, 255, 255, 342, 233, 343, 396,
    206, 220, 739, 350, 402, 323, 356, 357, 396, 251,

    215, 736, 362, 252, 155, 339, 323, 317, 155, 363, 342, 314, 343, 344, 396, 345, 749, 350,
    323, 402, 356, 357, 347, 407, 251, 215, 362, 252, 727, 725, 412, 168, 318, 363, 734, 314,
    733, 344, 345, 253, 413, 749, 257, 257, 254, 254, 347, 254, 254, 254, 254, 254, 254, 254,
    254, 254, 255, 254, 254, 254, 254, 254, 254, 259, 259, 254, 254, 254, 254, 254, 259, 259,
    259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259,
    259, 254, 254, 254, 254, 259, 259, 259, 259, 259,

    259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 254, 254, 254, 254,
    268, 267, 268, 239, 229, 270, 229, 255, 731, 229, 220, 229, 233, 233, 730, 366, 367, 220,
    206, 713, 727, 372, 373, 378, 379, 264, 393, 155, 389, 155, 155, 389, 360, 230, 155, 417,
    395, 231, 230, 366, 367, 348, 346, 352, 353, 372, 373, 378, 379, 393, 264, 725, 389, 722,
    440, 389, 390, 360, 230, 395, 417, 231, 698, 230, 441, 348, 346, 352, 353, 269, 266, 266,
    267, 266, 266, 266, 266, 266, 266, 266, 266, 266,

    266, 266, 266, 266, 266, 266, 266, 271, 271, 266, 266, 266, 266, 266, 271, 271, 271, 271,
    271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 266,
    266, 266, 266, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271,
    271, 271, 271, 271, 266, 266, 266, 266, 267, 267, 282, 281, 282, 282, 281, 282, 255, 229,
    284, 229, 267, 255, 281, 250, 239, 250, 403, 322, 717, 323, 408, 409, 410, 276, 414, 418,
    415, 277, 422, 364, 468, 365, 278, 421, 470, 368,

    349, 374, 472, 403, 346, 322, 323, 408, 409, 410, 355, 414, 276, 415, 418, 422, 277, 364,
    365, 468, 278, 421, 716, 470, 368, 349, 374, 472, 346, 715, 274, 279, 275, 283, 355, 361,
    283, 280, 280, 281, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280,
    280, 280, 285, 285, 280, 280, 280, 280, 280, 285, 285, 285, 285, 285, 285, 285, 285, 285,
    285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 280, 280, 280, 280, 285, 285,
    285, 285, 285, 285, 285, 285, 285, 285, 285, 285,

    285, 285, 285, 285, 285, 285, 285, 280, 280, 280, 280, 281, 281, 296, 295, 296, 298, 295,
    298, 239, 295, 299, 295, 431, 267, 206, 432, 442, 443, 471, 239, 713, 412, 446, 447, 452,
    290, 687, 473, 453, 291, 458, 413, 459, 466, 292, 431, 475, 307, 432, 442, 443, 358, 471,
    359, 416, 446, 447, 452, 430, 371, 290, 453, 473, 458, 291, 459, 466, 684, 292, 677, 475,
    705, 307, 699, 384, 358, 359, 416, 288, 293, 289, 297, 371, 430, 300, 294, 294, 295, 294,
    294, 294, 294, 294, 294, 294, 294, 294, 294, 294,

    294, 294, 294, 294, 294, 301, 301, 294, 294, 294, 294, 294, 301, 301, 301, 301, 301, 301,
    301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 294, 294, 294,
    294, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
    301, 301, 294, 294, 294, 294, 295, 295, 306, 295, 306, 150, 152, 150, 152, 152, 172, 152,
    172, 177, 153, 177, 177, 340, 177, 340, 749, 178, 207, 749, 207, 207, 295, 207, 206, 476,
    209, 307, 217, 206, 217, 217, 206, 219, 221, 221,

    221, 221, 471, 177, 222, 232, 240, 239, 240, 242, 239, 242, 476, 239, 308, 309, 310, 250,
    239, 250, 242, 239, 242, 295, 463, 243, 471, 397, 304, 397, 305, 311, 698, 480, 151, 154,
    696, 398, 154, 173, 434, 695, 173, 694, 460, 173, 251, 486, 341, 749, 252, 208, 749, 267,
    208, 250, 239, 250, 256, 220, 256, 218, 281, 693, 218, 434, 267, 223, 223, 255, 486, 251,
    173, 233, 252, 241, 155, 276, 244, 614, 256, 277, 256, 281, 251, 258, 278, 281, 355, 244,
    155, 255, 268, 267, 268, 268, 267, 268, 377, 369,

    270, 370, 276, 282, 281, 282, 277, 290, 233, 251, 278, 291, 355, 282, 281, 282, 292, 255,
    284, 295, 375, 377, 376, 369, 370, 155, 239, 257, 296, 295, 296, 481, 290, 306, 295, 306,
    291, 298, 295, 298, 292, 298, 295, 298, 375, 376, 299, 444, 657, 257, 306, 295, 306, 267,
    487, 295, 481, 340, 295, 340, 220, 269, 307, 312, 269, 312, 433, 687, 206, 488, 444, 397,
    283, 397, 654, 684, 613, 155, 220, 487, 450, 398, 283, 518, 255, 308, 309, 310, 381, 433,
    382, 381, 317, 382, 488, 155, 314, 297, 295, 399,

    419, 445, 308, 309, 380, 450, 300, 400, 233, 423, 300, 423, 381, 382, 233, 381, 385, 317,
    420, 424, 314, 267, 267, 419, 399, 155, 445, 267, 341, 281, 400, 155, 281, 435, 239, 435,
    295, 425, 281, 281, 397, 420, 397, 436, 519, 426, 295, 514, 427, 440, 398, 295, 650, 677,
    428, 642, 640, 448, 451, 441, 440, 437, 425, 206, 489, 454, 456, 449, 426, 438, 441, 427,
    455, 462, 457, 295, 461, 428, 462, 239, 448, 451, 482, 412, 482, 485, 437, 206, 454, 489,
    449, 456, 438, 413, 423, 455, 423, 457, 462, 461,

    423, 239, 423, 465, 424, 484, 435, 239, 435, 485, 424, 492, 435, 239, 435, 239, 436, 239,
    255, 497, 255, 267, 436, 267, 267, 267, 281, 281, 513, 491, 484, 281, 675, 516, 295, 492,
    498, 568, 281, 295, 295, 295, 499, 495, 496, 635, 267, 580, 669, 206, 517, 501, 522, 483,
    491, 520, 502, 503, 516, 506, 500, 498, 504, 255, 509, 505, 499, 511, 495, 496, 507, 508,
    512, 512, 517, 523, 501, 522, 524, 520, 502, 503, 526, 500, 506, 504, 510, 509, 505, 527,
    535, 527, 511, 521, 507, 508, 512, 512, 536, 528,

    523, 206, 537, 524, 515, 526, 482, 412, 482, 533, 538, 239, 239, 255, 239, 535, 547, 413,
    267, 267, 534, 281, 536, 544, 267, 281, 281, 537, 550, 267, 550, 295, 545, 281, 295, 538,
    521, 295, 551, 295, 541, 542, 543, 295, 239, 534, 520, 206, 548, 564, 566, 556, 281, 556,
    570, 554, 570, 545, 255, 546, 549, 557, 552, 572, 571, 541, 542, 543, 559, 555, 520, 574,
    564, 548, 527, 566, 527, 483, 267, 536, 554, 582, 546, 549, 528, 552, 585, 583, 572, 583,
    239, 568, 555, 559, 515, 553, 574, 584, 590, 239,

    590, 594, 562, 536, 558, 267, 582, 581, 591, 563, 267, 585, 281, 281, 589, 550, 267, 550,
    595, 592, 281, 556, 281, 556, 295, 551, 615, 618, 267, 618, 570, 557, 570, 622, 625, 622,
    295, 619, 596, 295, 571, 666, 568, 623, 592, 663, 600, 621, 599, 607, 281, 615, 580, 603,
    630, 568, 630, 633, 583, 625, 583, 636, 596, 636, 648, 580, 568, 267, 584, 600, 281, 637,
    607, 590, 239, 590, 594, 603, 643, 239, 643, 568, 606, 591, 267, 621, 652, 648, 644, 660,
    667, 594, 667, 295, 612, 647, 618, 667, 618, 667,

    658, 621, 671, 659, 651, 662, 619, 655, 622, 652, 622, 664, 672, 664, 660, 630, 568, 630,
    623, 621, 682, 665, 673, 621, 673, 631, 580, 651, 679, 633, 655, 621, 636, 633, 636, 643,
    239, 643, 680, 621, 281, 647, 637, 682, 690, 644, 688, 295, 688, 647, 691, 645, 691, 664,
    671, 664, 700, 671, 700, 267, 692, 668, 703, 665, 672, 679, 281, 672, 668, 673, 621, 673,
    704, 679, 708, 680, 685, 688, 295, 688, 633, 295, 671, 680, 709, 691, 631, 691, 718, 718,
    718, 718, 672, 674, 703, 692, 710, 661, 679, 685,

    700, 671, 700, 711, 704, 720, 703, 720, 680, 681, 708, 672, 708, 728, 295, 728, 704, 689,
    703, 710, 709, 708, 709, 720, 703, 720, 711, 701, 704, 657, 611, 709, 609, 654, 704, 605,
    714, 728, 295, 728, 674, 602, 650, 706, 598, 642, 640, 588, 689, 638, 635, 629, 628, 627,
    626, 624, 621, 568, 561, 719, 719, 611, 609, 605, 602, 598, 588, 586, 578, 577, 576, 701,
    575, 573, 569, 568, 721, 565, 561, 494, 539, 521, 723, 532, 729, 531, 530, 529, 525, 480,
    494, 490, 479, 478, 721, 477, 474, 469, 392, 467,

    429, 336, 336, 334, 334, 406, 405, 404, 729, 155, 155, 175, 175, 175, 175, 175, 175, 180,
    180, 180, 180, 180, 180, 198, 198, 205, 205, 401, 205, 205, 205, 220, 394, 220, 220, 224,
    224, 224, 233, 392, 233, 233, 234, 234, 234, 238, 238, 238, 238, 238, 238, 254, 254, 295,
    254, 254, 254, 266, 266, 266, 266, 266, 266, 280, 280, 280, 280, 280, 280, 294, 294, 294,
    294, 294, 294, 391, 391, 391, 391, 391, 391, 411, 411, 411, 411, 411, 411, 439, 439, 439,
    439, 439, 439, 493, 493, 493, 493, 493, 493, 560,

    560, 560, 560, 560, 560, 567, 567, 567, 567, 567, 567, 579, 579, 579, 579, 579, 579, 587,
    587, 587, 587, 587, 587, 593, 593, 593, 593, 593, 593, 597, 597, 597, 597, 597, 597, 601,
    601, 601, 601, 601, 601, 604, 604, 604, 604, 604, 604, 608, 608, 608, 608, 608, 608, 610,
    610, 610, 610, 610, 610, 620, 620, 620, 620, 620, 620, 632, 632, 632, 632, 632, 632, 634,
    634, 634, 634, 634, 634, 639, 639, 639, 639, 639, 639, 641, 641, 641, 641, 641, 641, 646,
    646, 646, 646, 646, 646, 649, 649, 649, 649, 649,

    649, 653, 653, 653, 653, 653, 653, 656, 656, 656, 656, 656, 656, 670, 670, 670, 670, 670,
    670, 676, 676, 676, 676, 676, 676, 678, 678, 678, 678, 678, 678, 683, 683, 683, 683, 683,
    683, 686, 686, 686, 686, 686, 686, 697, 697, 697, 697, 697, 697, 702, 702, 702, 702, 702,
    702, 707, 707, 707, 707, 707, 707, 712, 712, 712, 712, 712, 712, 724, 724, 724, 724, 724,
    724, 726, 726, 726, 726, 726, 726, 732, 732, 732, 732, 732, 732, 735, 735, 735, 735, 735,
    735, 295, 295, 295, 281, 281, 281, 281, 267, 267,

    267, 267, 255, 255, 255, 255, 239, 239, 239, 239, 354, 206, 206, 206, 206, 332, 181, 330,
    329, 328, 319, 295, 295, 281, 281, 267, 267, 255, 255, 239, 239, 206, 206, 204, 203, 201,
    197, 196, 195, 181, 179, 174, 749, 23,  749, 749, 749, 749, 749, 749, 749, 749, 749, 749,
    749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749,
    749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749,
    749, 749, 749, 749, 749, 749, 749, 749, 749, 749,

    749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749};

static yyconst flex_int16_t yy_chk[3019] = {
    0,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,
    3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,

    3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,
    3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,
    3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   5,   5,   5,   5,   5,   5,
    5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,
    5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,
    5,   5,   5,   5,   5,   5,   5,   5,   5,   5,

    5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,
    5,   5,   5,   5,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,
    7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,
    7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,
    7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,
    7,   7,   7,   7,   7,   7,   9,   10,  9,   10,

    30,  9,   10,  31,  32,  37,  32,  44,  37,  45,  48,  49,  47,  58,  59,  63,  49,  44,
    45,  47,  50,  48,  50,  30,  72,  73,  31,  83,  86,  99,  86,  99,  96,  50,  107, 156,
    58,  59,  108, 116, 63,  117, 175, 224, 83,  175, 48,  72,  73,  96,  745, 189, 744, 189,
    742, 63,  189, 107, 50,  156, 224, 108, 116, 741, 117, 9,   10,  11,  11,  11,  11,  11,
    11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,
    11,  11,  11,  11,  11,  11,  11,  11,  11,  11,

    11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,
    11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,
    11,  11,  11,  11,  11,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,
    13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,
    13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,
    13,  13,  13,  13,  13,  13,  13,  13,  13,  13,

    13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  15,  15,  15,
    15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,
    15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,
    15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,
    15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  17,
    17,  17,  17,  17,  17,  17,  17,  17,  17,  17,

    17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,
    17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,
    17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,
    17,  17,  17,  17,  17,  17,  17,  17,  17,  19,  19,  19,  19,  19,  19,  19,  19,  19,
    19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,
    19,  19,  19,  19,  19,  19,  19,  19,  19,  19,

    19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,
    19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,
    19,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,
    21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,
    21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,
    21,  21,  21,  21,  21,  21,  21,  21,  21,  21,

    21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  25,  27,  25,  27,  74,  34,  27,
    34,  38,  68,  38,  68,  69,  38,  69,  82,  77,  69,  77,  79,  68,  79,  75,  69,  80,
    84,  80,  95,  88,  80,  88,  85,  90,  92,  90,  92,  740, 126, 127, 93,  75,  93,  84,
    136, 93,  341, 97,  491, 85,  102, 102, 102, 121, 121, 121, 341, 137, 87,  98,  87,  126,
    127, 74,  97,  74,  75,  136, 109, 84,  25,  27,  33,  85,  33,  34,  98,  33,  38,  68,
    137, 75,  69,  308, 146, 82,  77,  87,  147, 79,

    97,  87,  84,  157, 80,  100, 85,  95,  88,  33,  98,  33,  90,  92,  162, 33,  33,  146,
    33,  93,  100, 147, 87,  97,  165, 87,  33,  157, 491, 102, 100, 315, 121, 98,  33,  33,
    33,  87,  162, 33,  33,  739, 308, 565, 730, 100, 109, 165, 109, 565, 730, 33,  71,  71,
    315, 71,  71,  71,  71,  71,  71,  71,  71,  71,  71,  71,  71,  71,  71,  71,  71,  71,
    71,  71,  71,  71,  71,  71,  71,  71,  71,  71,  71,  71,  71,  71,  71,  71,  71,  71,
    71,  71,  71,  71,  71,  71,  71,  71,  71,  71,

    71,  71,  71,  71,  71,  71,  71,  71,  71,  71,  71,  71,  71,  71,  71,  71,  71,  71,
    71,  71,  71,  71,  71,  71,  71,  71,  104, 104, 104, 118, 119, 104, 163, 169, 173, 169,
    154, 164, 154, 163, 384, 163, 164, 164, 188, 170, 738, 199, 119, 192, 231, 170, 737, 200,
    193, 188, 193, 169, 169, 173, 192, 314, 164, 163, 163, 154, 164, 193, 316, 154, 170, 199,
    361, 119, 170, 231, 194, 200, 194, 735, 188, 194, 361, 734, 732, 192, 314, 118, 119, 118,
    154, 316, 193, 154, 384, 104, 106, 106, 106, 106,

    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 110, 110,
    110, 112, 113, 112, 113, 151, 160, 113, 160, 202, 208, 202, 112, 113, 211, 234, 212, 323,
    215, 225, 731, 230, 326, 230, 246, 247, 331, 110,

    208, 729, 260, 110, 234, 202, 202, 160, 225, 261, 211, 160, 212, 215, 323, 215, 151, 230,
    230, 326, 246, 247, 225, 331, 110, 208, 260, 110, 726, 724, 411, 160, 160, 261, 722, 160,
    719, 215, 215, 110, 411, 151, 112, 113, 115, 115, 225, 115, 115, 115, 115, 115, 115, 115,
    115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
    115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
    115, 115, 115, 115, 115, 115, 115, 115, 115, 115,

    115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
    123, 123, 123, 252, 218, 123, 218, 257, 717, 223, 226, 223, 235, 236, 716, 272, 273, 419,
    345, 712, 711, 286, 287, 302, 303, 257, 320, 226, 317, 235, 236, 318, 252, 218, 419, 345,
    322, 218, 223, 272, 273, 226, 223, 235, 236, 286, 287, 302, 303, 320, 257, 710, 317, 705,
    439, 318, 318, 252, 218, 322, 345, 218, 697, 223, 439, 226, 223, 235, 236, 123, 125, 125,
    125, 125, 125, 125, 125, 125, 125, 125, 125, 125,

    125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
    125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
    125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
    125, 125, 125, 125, 125, 125, 125, 125, 128, 129, 131, 131, 131, 133, 133, 133, 264, 229,
    133, 229, 276, 255, 290, 250, 250, 250, 327, 313, 696, 313, 337, 338, 339, 129, 342, 346,
    343, 129, 350, 264, 393, 264, 129, 349, 395, 276,

    229, 290, 399, 327, 229, 313, 313, 337, 338, 339, 250, 342, 129, 343, 346, 350, 129, 264,
    264, 393, 129, 349, 695, 395, 276, 229, 290, 399, 229, 693, 128, 129, 128, 131, 250, 255,
    133, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
    135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
    135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
    135, 135, 135, 135, 135, 135, 135, 135, 135, 135,

    135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 138, 139, 141, 141, 141, 143, 143,
    143, 251, 300, 143, 309, 356, 278, 344, 357, 362, 363, 396, 355, 689, 483, 366, 367, 372,
    139, 686, 400, 373, 139, 378, 483, 379, 389, 139, 356, 402, 300, 357, 362, 363, 251, 396,
    251, 344, 366, 367, 372, 355, 278, 139, 373, 400, 378, 139, 379, 389, 683, 139, 676, 402,
    675, 300, 669, 309, 251, 251, 344, 138, 139, 138, 141, 278, 355, 143, 145, 145, 145, 145,
    145, 145, 145, 145, 145, 145, 145, 145, 145, 145,

    145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
    145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
    145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
    145, 145, 145, 145, 145, 145, 148, 383, 149, 149, 149, 150, 152, 150, 152, 153, 172, 153,
    172, 177, 153, 177, 178, 206, 178, 206, 220, 178, 207, 233, 207, 209, 380, 209, 206, 403,
    209, 149, 217, 207, 217, 219, 209, 219, 221, 222,

    221, 222, 407, 232, 222, 232, 240, 240, 240, 242, 242, 242, 403, 359, 149, 149, 149, 241,
    241, 241, 243, 243, 243, 563, 383, 243, 407, 386, 148, 386, 148, 149, 668, 407, 150, 152,
    666, 386, 153, 172, 359, 663, 177, 662, 380, 178, 241, 421, 206, 220, 241, 207, 233, 269,
    209, 244, 244, 244, 256, 420, 256, 217, 292, 661, 219, 359, 277, 221, 222, 256, 421, 241,
    232, 427, 241, 240, 420, 269, 242, 563, 258, 269, 258, 283, 244, 258, 269, 291, 244, 243,
    427, 258, 268, 268, 268, 270, 270, 270, 292, 277,

    270, 277, 269, 282, 282, 282, 269, 283, 428, 244, 269, 283, 244, 284, 284, 284, 283, 364,
    284, 562, 291, 292, 291, 277, 277, 428, 358, 256, 296, 296, 296, 410, 283, 297, 297, 297,
    283, 298, 298, 298, 283, 299, 299, 299, 291, 291, 299, 364, 656, 258, 306, 306, 306, 370,
    422, 307, 410, 340, 310, 340, 347, 268, 297, 312, 270, 312, 358, 655, 340, 425, 364, 324,
    282, 324, 653, 651, 562, 347, 348, 422, 370, 324, 284, 469, 365, 297, 297, 297, 307, 358,
    307, 310, 312, 310, 425, 348, 312, 296, 464, 324,

    347, 365, 306, 306, 306, 370, 298, 324, 352, 351, 299, 351, 307, 307, 353, 310, 310, 312,
    348, 351, 312, 368, 371, 347, 324, 352, 365, 369, 340, 374, 324, 353, 375, 360, 360, 360,
    381, 351, 377, 376, 397, 348, 397, 360, 469, 351, 382, 464, 352, 441, 397, 385, 649, 644,
    353, 641, 639, 368, 371, 441, 497, 360, 351, 417, 426, 374, 376, 369, 351, 360, 497, 352,
    375, 382, 377, 463, 381, 353, 385, 434, 368, 371, 413, 413, 413, 417, 360, 416, 374, 426,
    369, 376, 360, 413, 418, 375, 418, 377, 382, 381,

    423, 433, 423, 385, 418, 416, 430, 430, 430, 417, 423, 434, 435, 435, 435, 437, 430, 438,
    444, 441, 445, 448, 435, 449, 450, 451, 454, 457, 463, 433, 416, 455, 638, 466, 460, 434,
    444, 533, 456, 461, 462, 465, 445, 437, 438, 634, 501, 533, 629, 484, 468, 449, 471, 413,
    433, 470, 450, 450, 466, 455, 448, 444, 451, 498, 457, 454, 445, 461, 437, 438, 456, 456,
    462, 465, 468, 472, 449, 471, 473, 470, 450, 450, 475, 448, 455, 451, 460, 457, 454, 476,
    486, 476, 461, 470, 456, 456, 462, 465, 487, 476,

    472, 485, 488, 473, 465, 475, 482, 482, 482, 484, 489, 492, 495, 499, 496, 486, 501, 482,
    500, 502, 485, 505, 487, 498, 503, 506, 507, 488, 504, 504, 504, 510, 499, 508, 511, 489,
    487, 514, 504, 512, 492, 495, 496, 515, 541, 485, 516, 534, 502, 517, 520, 509, 509, 509,
    523, 507, 523, 499, 545, 500, 503, 509, 505, 524, 523, 492, 495, 496, 512, 508, 516, 526,
    517, 502, 527, 520, 527, 482, 548, 535, 507, 536, 500, 503, 527, 505, 538, 537, 524, 537,
    543, 544, 508, 512, 510, 506, 526, 537, 542, 542,

    542, 544, 514, 535, 511, 546, 536, 534, 542, 515, 549, 538, 554, 555, 541, 550, 550, 550,
    545, 543, 552, 556, 556, 556, 559, 550, 564, 566, 596, 566, 570, 556, 570, 572, 574, 572,
    613, 566, 546, 614, 570, 627, 579, 572, 543, 624, 549, 581, 548, 555, 603, 564, 579, 552,
    580, 580, 580, 581, 583, 574, 583, 585, 546, 585, 596, 580, 593, 600, 583, 549, 607, 585,
    555, 590, 590, 590, 593, 552, 592, 592, 592, 594, 554, 590, 648, 595, 603, 596, 592, 615,
    628, 594, 628, 659, 559, 595, 618, 667, 618, 667,

    613, 620, 631, 614, 600, 617, 618, 607, 622, 603, 622, 625, 631, 625, 615, 630, 630, 630,
    622, 632, 648, 625, 633, 633, 633, 580, 630, 600, 645, 632, 607, 646, 636, 633, 636, 643,
    643, 643, 645, 647, 652, 646, 636, 648, 659, 643, 658, 658, 658, 647, 660, 594, 660, 664,
    670, 664, 672, 672, 672, 682, 660, 628, 674, 664, 670, 678, 685, 672, 667, 673, 673, 673,
    674, 680, 681, 678, 652, 688, 688, 688, 673, 690, 701, 680, 681, 691, 630, 691, 699, 718,
    699, 718, 701, 633, 702, 691, 682, 616, 706, 652,

    700, 700, 700, 685, 702, 704, 704, 704, 706, 647, 707, 700, 709, 714, 714, 714, 704, 658,
    721, 682, 707, 723, 709, 720, 720, 720, 685, 672, 721, 612, 610, 723, 608, 606, 720, 604,
    690, 728, 728, 728, 673, 601, 599, 680, 597, 591, 589, 587, 688, 586, 582, 578, 577, 576,
    575, 573, 569, 567, 560, 699, 718, 558, 557, 553, 551, 547, 540, 539, 532, 531, 530, 700,
    529, 525, 522, 521, 704, 518, 513, 493, 490, 481, 709, 480, 714, 479, 478, 477, 474, 467,
    436, 429, 406, 405, 720, 404, 401, 394, 391, 390,

    354, 336, 335, 334, 333, 330, 329, 328, 728, 750, 750, 751, 751, 751, 751, 751, 751, 752,
    752, 752, 752, 752, 752, 753, 753, 754, 754, 325, 754, 754, 754, 755, 321, 755, 755, 756,
    756, 756, 757, 319, 757, 757, 758, 758, 758, 759, 759, 759, 759, 759, 759, 760, 760, 311,
    760, 760, 760, 761, 761, 761, 761, 761, 761, 762, 762, 762, 762, 762, 762, 763, 763, 763,
    763, 763, 763, 764, 764, 764, 764, 764, 764, 765, 765, 765, 765, 765, 765, 766, 766, 766,
    766, 766, 766, 767, 767, 767, 767, 767, 767, 768,

    768, 768, 768, 768, 768, 769, 769, 769, 769, 769, 769, 770, 770, 770, 770, 770, 770, 771,
    771, 771, 771, 771, 771, 772, 772, 772, 772, 772, 772, 773, 773, 773, 773, 773, 773, 774,
    774, 774, 774, 774, 774, 775, 775, 775, 775, 775, 775, 776, 776, 776, 776, 776, 776, 777,
    777, 777, 777, 777, 777, 778, 778, 778, 778, 778, 778, 779, 779, 779, 779, 779, 779, 780,
    780, 780, 780, 780, 780, 781, 781, 781, 781, 781, 781, 782, 782, 782, 782, 782, 782, 783,
    783, 783, 783, 783, 783, 784, 784, 784, 784, 784,

    784, 785, 785, 785, 785, 785, 785, 786, 786, 786, 786, 786, 786, 787, 787, 787, 787, 787,
    787, 788, 788, 788, 788, 788, 788, 789, 789, 789, 789, 789, 789, 790, 790, 790, 790, 790,
    790, 791, 791, 791, 791, 791, 791, 792, 792, 792, 792, 792, 792, 793, 793, 793, 793, 793,
    793, 794, 794, 794, 794, 794, 794, 795, 795, 795, 795, 795, 795, 796, 796, 796, 796, 796,
    796, 797, 797, 797, 797, 797, 797, 798, 798, 798, 798, 798, 798, 799, 799, 799, 799, 799,
    799, 305, 304, 294, 293, 289, 288, 280, 279, 275,

    274, 266, 265, 263, 262, 254, 253, 249, 248, 238, 237, 216, 214, 213, 205, 182, 180, 168,
    167, 166, 161, 144, 140, 134, 130, 124, 120, 114, 111, 105, 101, 70,  67,  65,  64,  62,
    55,  54,  53,  41,  40,  36,  23,  749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749,
    749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749,
    749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749,
    749, 749, 749, 749, 749, 749, 749, 749, 749, 749,

    749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749};

static yyconst flex_int16_t yy_rule_linenum[105] = {
    0,   124, 125, 126, 127, 132, 134, 135, 136, 137, 138, 140, 141, 143, 149, 240, 264,
    270, 291, 298, 309, 314, 328, 333, 340, 363, 374, 376, 390, 404, 419, 429, 454, 460,
    465, 470, 475, 485, 493, 501, 510, 538, 559, 560, 561, 562, 564, 569, 594, 596, 598,
    637, 638, 641, 643, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663,
    664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680,
    681, 682, 683, 684, 685, 686, 687, 693, 699, 711, 737, 739, 741, 758, 774, 775,

    785, 788, 789, 791};

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT      reject_used_but_not_detected
#define yymore()    yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
/*
 * Copyright(C) 1999-2025 National Technology & Engineering Solutions
 * of Sandia, LLC (NTESS).  Under the terms of Contract DE-NA0003525 with
 * NTESS, the U.S. Government retains certain rights in this software.
 *
 * See packages/seacas/LICENSE for details
 */

#include <assert.h>
#include <fcntl.h>
#include <fstream>
#include <iostream>
#include <sstream>
#include <stack>
#include <stdio.h>
#include <string.h>
#include <unistd.h>

#include "apr_getline.h"
#include "apr_scanner.h"
#include "apr_tokenize.h"
#include "apr_util.h"
#include "aprepro.h"
#include "fmt/format.h"
#include "fmt/ostream.h"
#include "fmt/ranges.h"

#define YY_NO_UNISTD_H
/* import the parser's token type into a local typedef */
typedef SEAMS::Parser::token      token;
typedef SEAMS::Parser::token_type token_type;

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::END

namespace SEAMS {
  extern bool echo;
  void        yyerror(const char *s);
} // namespace SEAMS

namespace {
  bool begin_double_brace = false;
  bool end_double_brace   = false;
  bool string_is_ascii(const char *line, size_t len)
  {
    for (size_t i = 0; i < len; i++) {
      if (!(std::isspace(static_cast<unsigned char>(line[i])) ||
            std::isprint(static_cast<unsigned char>(line[i])))) {
        return false;
      }
    }
    return true;
  }
} // namespace

int file_must_exist = 0; /* Global used by include/conditional include */

/* Global variables used by the looping mechanism */
SEAMS::file_rec *outer_file = nullptr;
int              loop_lvl   = 0;
std::fstream    *tmp_file;
const char      *temp_f;

#if defined __NVCC__
#pragma diag_suppress code_is_unreachable
#endif

#define MAX_IF_NESTING 1024

int    if_state[MAX_IF_NESTING]    = {0};     // INITIAL
int    if_case_run[MAX_IF_NESTING] = {false}; /* Has any if or elseif condition executed */
int    if_lvl                      = 0;
int    if_skip_level               = 0;
bool   suppress_nl                 = false;
bool   switch_active               = false; // Are we in a switch
bool   switch_case_run             = false; // has there been a case which matched condition run?
bool   switch_skip_to_endcase      = false;
double switch_condition            = 0.0; // Value specified in "switch(condition)"

// For substitution history
int         curr_index = 0;
std::string history_string;
size_t      hist_start = 0;

#define YY_USER_ACTION curr_index += yyleng;

/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "SEAMSFlexLexer" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* enables the use of start condition stacks */

#define INITIAL       0
#define PARSING       1
#define GET_FILENAME  2
#define IF_SKIP       3
#define GET_VAR       4
#define VERBATIM      5
#define IF_WHILE_SKIP 6
#define GET_LOOP_VAR  7
#define LOOP          8
#define LOOP_SKIP     9
#define END_CASE_SKIP 10

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy(char *, yyconst char *, int);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen(yyconst char *);
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput(yytext, yyleng)
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf, result, max_size)                                                            \
  /* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */          \
                                                                                                   \
  /* %if-c++-only C++ definition \ */                                                              \
  if ((result = LexerInput((char *)buf, max_size)) < 0)                                            \
    YY_FATAL_ERROR("input in flex scanner failed");
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError(msg)
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
  yy_state_type yy_current_state;
  char         *yy_cp, *yy_bp;
  int           yy_act;

  if (!(yy_init)) {
    (yy_init) = 1;

#ifdef YY_USER_INIT
    YY_USER_INIT;
#endif

    if (!(yy_start))
      (yy_start) = 1; /* first start state */

    if (!yyin)
      /* %if-c-only */
      /* %endif */
      /* %if-c++-only */
      yyin = &std::cin;
    /* %endif */

    if (!yyout)
      /* %if-c-only */
      /* %endif */
      /* %if-c++-only */
      yyout = &std::cout;
    /* %endif */

    if (!YY_CURRENT_BUFFER) {
      yyensure_buffer_stack();
      YY_CURRENT_BUFFER_LVALUE = yy_create_buffer(yyin, YY_BUF_SIZE);
    }

    yy_load_buffer_state();
  }

  {
    /* %% [7.0] user's declarations go here */

    while (1) /* loops until end-of-file is reached */
    {
      /* %% [8.0] yymore()-related code goes here */
      yy_cp = (yy_c_buf_p);

      /* Support of yytext. */
      *yy_cp = (yy_hold_char);

      /* yy_bp points to the position in yy_ch_buf of the start of
       * the current run.
       */
      yy_bp = yy_cp;

      /* %% [9.0] code to set up and find next match goes here */
      yy_current_state = (yy_start);
    yy_match:
      do {
        YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
        if (yy_accept[yy_current_state]) {
          (yy_last_accepting_state) = yy_current_state;
          (yy_last_accepting_cpos)  = yy_cp;
        }
        while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
          yy_current_state = (int)yy_def[yy_current_state];
          if (yy_current_state >= 750)
            yy_c = yy_meta[(unsigned int)yy_c];
        }
        yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int)yy_c];
        ++yy_cp;
      } while (yy_base[yy_current_state] != 2944);

    yy_find_action:
      /* %% [10.0] code to find the action number goes here */
      yy_act = yy_accept[yy_current_state];
      if (yy_act == 0) { /* have to back up */
        yy_cp            = (yy_last_accepting_cpos);
        yy_current_state = (yy_last_accepting_state);
        yy_act           = yy_accept[yy_current_state];
      }

      YY_DO_BEFORE_ACTION;

      /* %% [11.0] code for yylineno update goes here */

    do_action: /* This label is used only to access EOF actions. */

      /* %% [12.0] debug code goes here */
      if (yy_flex_debug) {
        if (yy_act == 0)
          std::cerr << "--scanner backing up\n";
        else if (yy_act < 105)
          std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] << "(\"" << yytext
                    << "\")\n";
        else if (yy_act == 105)
          std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
        else if (yy_act == 106)
          std::cerr << "--(end of buffer or a NUL)\n";
        else
          std::cerr << "--EOF (start condition " << YY_START << ")\n";
      }

      switch (yy_act) { /* beginning of action switch */
                        /* %% [13.0] actions go here */
      case 0:           /* must back up */
        /* undo the effects of YY_DO_BEFORE_ACTION */
        *yy_cp           = (yy_hold_char);
        yy_cp            = (yy_last_accepting_cpos);
        yy_current_state = (yy_last_accepting_state);
        goto yy_find_action;

      case 1:
        YY_RULE_SETUP { BEGIN(INITIAL); }
        YY_BREAK
      case 2:
      case 3:
        YY_RULE_SETUP
        {
          if (echo)
            ECHO;
        }
        YY_BREAK
      case 4:
        /* rule 4 can match eol */
        YY_RULE_SETUP
        {
          if (echo)
            ECHO;
          aprepro.ap_file_list.top().lineno++;
        }
        YY_BREAK

      /* Aprepro "comment" -- skip entire line */
      case 5:
        /* rule 5 can match eol */
        YY_RULE_SETUP
        {
          yytext++;
          yytext[1] = ' ';
          if (echo)
            ECHO;
          aprepro.ap_file_list.top().lineno++;
        }
        YY_BREAK
      case 6:
        YY_RULE_SETUP { BEGIN(VERBATIM); }
        YY_BREAK
      case 7:
      case 8:
        YY_RULE_SETUP { echo = true; }
        YY_BREAK
      case 9:
      case 10:
        YY_RULE_SETUP { echo = false; }
        YY_BREAK
      case 11:
        YY_RULE_SETUP { aprepro.stateImmutable = true; }
        YY_BREAK
      case 12:
        YY_RULE_SETUP { aprepro.stateImmutable = aprepro.ap_options.immutable; }
        YY_BREAK
      case 13:
        YY_RULE_SETUP { BEGIN(GET_LOOP_VAR); }
        YY_BREAK

      case 14:
        /* rule 14 can match eol */
        YY_RULE_SETUP
        {
          aprepro.ap_file_list.top().lineno++;
          /* `yytext` includes closing `)}` and newline...  Strip these */
          char *pt    = strchr(yytext, ')');
          *pt         = '\0';
          auto tokens = tokenize(yytext, " ,\t");
          if (aprepro.ap_options.debugging) {
            fmt::print(stderr, "DEBUG LOOP: tokens = {}\n", fmt::join(tokens, ", "));
          }

          /* Determine if the first token is a symbol or an explicit number... */
          const auto &count           = tokens[0];
          bool        all_dig         = count.find_first_not_of("0123456789") == std::string::npos;
          int         loop_iterations = 0;
          if (all_dig) {
            loop_iterations = std::stoi(count);
          }
          else {
            symrec *s;
            if (!check_valid_var(tokens[0].c_str())) {
              aprepro.warning("Invalid variable name syntax '" + tokens[0] + "'");
              BEGIN(LOOP_SKIP);
            }
            else {
              s = aprepro.getsym(tokens[0]);
              if (s == nullptr ||
                  (s->type != token::SVAR && s->type != token::IMMSVAR && s->value.var == 0.)) {
                BEGIN(LOOP_SKIP);
              }
              else {
                loop_iterations = (int)s->value.var;
              }
            }
          }

          if (loop_iterations <= 0) {
            BEGIN(LOOP_SKIP);
            if (aprepro.ap_options.debugging) {
              fmt::print(stderr, "DEBUG LOOP: iteration count = {}, Skipping loop...\n",
                         loop_iterations);
            }
          }
          else {
            temp_f = get_temp_filename();
            SEAMS::file_rec new_file(temp_f, 0, true, loop_iterations);
            outer_file          = &aprepro.ap_file_list.top();
            new_file.loop_level = outer_file->loop_level + 1;

            // Get optional loop index...
            std::string sym_name;
            if (tokens.size() == 1) {
              // Default loop index variable name if not specified in loop command.
              sym_name = fmt::format("__loop_{}", new_file.loop_level);
            }
            else {
              sym_name = tokens[1];
            }
            SEAMS::symrec *li = aprepro.getsym(sym_name);
            if (li == nullptr) {
              li = aprepro.putsym(sym_name, SEAMS::Aprepro::SYMBOL_TYPE::VARIABLE, true);
            }

            // Get optional loop index initial value.  Default to 0 if not specified.
            double init = 0.0;
            if (tokens.size() >= 3) {
              init = std::stod(tokens[2]);
            }
            li->value.var = init;

            // Get optional loop index increment value.  Default to 1 if not specified.
            if (tokens.size() >= 4) {
              double increment        = std::stod(tokens[3]);
              new_file.loop_increment = increment;
            }

            new_file.loop_index = li;
            aprepro.ap_file_list.push(new_file);

            tmp_file = new std::fstream(temp_f, std::ios::out);
            loop_lvl++;
            BEGIN(LOOP);
            aprepro.isCollectingLoop = true;
            if (aprepro.ap_options.debugging) {
              fmt::print(stderr,
                         "DEBUG LOOP: iteration count = {}, loop_index variable = {}, initial "
                         "value = {}, increment = {}\n",
                         loop_iterations, sym_name, init, new_file.loop_increment);
            }
          }
        }
        YY_BREAK

      case 15:
        /* rule 15 can match eol */
        YY_RULE_SETUP
        {
          outer_file->lineno++;
          if (loop_lvl > 0)
            --loop_lvl;

          if (loop_lvl == 0) {
            BEGIN(INITIAL);
            tmp_file->close();
            delete tmp_file;

            if (!aprepro.doLoopSubstitution)
              yy_push_state(VERBATIM);

            aprepro.isCollectingLoop = false;

            yyin = aprepro.open_file(aprepro.ap_file_list.top().name, "r");
            yyFlexLexer::yypush_buffer_state(yyFlexLexer::yy_create_buffer(yyin, YY_BUF_SIZE));
            curr_index = 0;
          }
          else {
            (*tmp_file) << yytext;
          }
        }
        YY_BREAK
      case 16:
        /* rule 16 can match eol */
        YY_RULE_SETUP
        {
          loop_lvl++; /* Nested Loop */
          (*tmp_file) << yytext;
          outer_file->lineno++;
        }
        YY_BREAK
      case 17:
        /* rule 17 can match eol */
        YY_RULE_SETUP
        {
          if (aprepro.ap_options.interactive || aprepro.string_interactive()) {
            aprepro.warning("Aborting loop(s).", false);

            // Leave the looping state and remove the loop file
            BEGIN(INITIAL);
            tmp_file->close();
            delete tmp_file;

            if (aprepro.ap_file_list.top().tmp_file) {
              remove(aprepro.ap_file_list.top().name.c_str());
              aprepro.ap_file_list.pop();
            }

            loop_lvl                 = 0;
            aprepro.isCollectingLoop = false;
          }
        }
        YY_BREAK
      case 18:
        /* rule 18 can match eol */
        YY_RULE_SETUP
        {
          (*tmp_file) << yytext;
          outer_file->lineno++;
        }
        YY_BREAK

      case 19:
        /* rule 19 can match eol */
        YY_RULE_SETUP
        {
          aprepro.ap_file_list.top().lineno++;
          if (loop_lvl > 0)
            --loop_lvl;

          if (loop_lvl == 0) {
            BEGIN(INITIAL);
            aprepro.isCollectingLoop = false;
          }
        }
        YY_BREAK
      case 20:
        /* rule 20 can match eol */
        YY_RULE_SETUP
        {
          loop_lvl++; /* Nested Loop */
          aprepro.ap_file_list.top().lineno++;
        }
        YY_BREAK
      case 21:
        /* rule 21 can match eol */
        YY_RULE_SETUP
        {
          if (aprepro.ap_options.interactive || aprepro.string_interactive()) {
            aprepro.warning("Aborting loops(s).", false);

            // Leave the looping state
            BEGIN(INITIAL);

            loop_lvl                 = 0;
            aprepro.isCollectingLoop = false;
          }
        }
        YY_BREAK
      case 22:
        /* rule 22 can match eol */
        YY_RULE_SETUP { /* Do not increment line count */ ; }
        YY_BREAK

      case 23:
        /* rule 23 can match eol */
        YY_RULE_SETUP
        {
          yyless(0);
          curr_index = 0;
          BEGIN(INITIAL);
          switch_skip_to_endcase = false;
        }
        YY_BREAK
      case 24:
        /* rule 24 can match eol */
        YY_RULE_SETUP
        {
          if (!switch_active) {
            yyerror("default statement found outside switch statement.");
          }

          if (!switch_case_run) {
            switch_case_run = true;
            BEGIN(INITIAL);
            switch_skip_to_endcase = false;
            if (aprepro.ap_options.debugging)
              fprintf(stderr, "DEBUG SWITCH: 'default' code executing at line %d\n",
                      aprepro.ap_file_list.top().lineno);
          }
          else {
            if (aprepro.ap_options.debugging)
              fprintf(stderr,
                      "DEBUG SWITCH: 'default' not executing since a previous case already ran at "
                      "line %d\n",
                      aprepro.ap_file_list.top().lineno);

            /* Need to skip all code until end of case */
            BEGIN(END_CASE_SKIP);
          }
        }
        YY_BREAK
      case 25:
        /* rule 25 can match eol */
        YY_RULE_SETUP
        {
          aprepro.ap_file_list.top().lineno++;
          BEGIN(INITIAL);
          switch_active          = false;
          switch_skip_to_endcase = false;
          suppress_nl            = false;
          if (aprepro.ap_options.debugging)
            fprintf(stderr, "DEBUG SWITCH: 'endswitch' at line %d\n",
                    aprepro.ap_file_list.top().lineno);
        }
        YY_BREAK
      case 26:
        /* rule 26 can match eol */
        YY_RULE_SETUP { aprepro.ap_file_list.top().lineno++; }
        YY_BREAK
      case 27:
        /* rule 27 can match eol */
        YY_RULE_SETUP
        {
          aprepro.ap_file_list.top().lineno++;
          if (!switch_active) {
            yyerror("endswitch statement found without matching switch.");
          }
          switch_active          = false;
          switch_skip_to_endcase = false;
        }
        YY_BREAK

      /* This restores the old behavior of ifdef and ifndef
       * where they would eat up any leading whitespace on
       * a line.
       */
      case 28:
        YY_RULE_SETUP
        {
          // Used to avoid undefined variable warnings in old ifdef/ifndef construct
          aprepro.inIfdefGetvar = true;
          unput('(');
          unput('f');
          unput('e');
          unput('d');
          unput('f');
          unput('i');
          unput('_');
          unput('{');
          curr_index = 0;
        }
        YY_BREAK
      case 29:
        YY_RULE_SETUP
        {
          // Used to avoid undefined variable warnings in old ifdef/ifndef construct
          aprepro.inIfdefGetvar = true;
          unput('(');
          unput('f');
          unput('e');
          unput('d');
          unput('n');
          unput('f');
          unput('i');
          unput('_');
          unput('{');
          curr_index = 0;
        }
        YY_BREAK
      case 30:
        YY_RULE_SETUP
        {
          // This lets us strip leading optional '#' and spaces
          unput('(');
          unput('f');
          unput('i');
          unput('_');
          unput('{');
          curr_index = 0;
        }
        YY_BREAK
      case 31:
        YY_RULE_SETUP
        {
          // This lets us strip leading optional '#' and spaces
          unput('(');
          unput('f');
          unput('i');
          unput('e');
          unput('s');
          unput('l');
          unput('e');
          unput('_');
          unput('{');
          curr_index = 0;
        }
        YY_BREAK

      /* If an if was found while skipping, then eat
       * that entire if block until endif
       * found since there is no way that
       * any of the code in that if block could be executed.
       * Make sure to handle multiple levels of skipped ifs...
       *
       * NOTE: if_lvl was not incremented, so don't need to decrement when
       *       endif found.
       */
      case 32:
        /* rule 32 can match eol */
        YY_RULE_SETUP
        {
          aprepro.ap_file_list.top().lineno++;
          if (--if_skip_level == 0)
            BEGIN(IF_SKIP);
        }
        YY_BREAK
      case 33:
        /* rule 33 can match eol */
        YY_RULE_SETUP
        {
          aprepro.ap_file_list.top().lineno++;
          if_skip_level++;
        }
        YY_BREAK
      case 34:
        /* rule 34 can match eol */
        YY_RULE_SETUP
        {
          aprepro.ap_file_list.top().lineno++;
          if_skip_level++;
        }
        YY_BREAK
      case 35:
        /* rule 35 can match eol */
        YY_RULE_SETUP
        {
          aprepro.ap_file_list.top().lineno++;
          if_skip_level++;
        }
        YY_BREAK
      case 36:
        /* rule 36 can match eol */
        YY_RULE_SETUP { aprepro.ap_file_list.top().lineno++; }
        YY_BREAK

      /* IF an if, ifdef, or ifndef found while skipping, then
       * skip the entire block up and including the endif.
       * The (IF_WHILE_SKIP) start condition handles this skipping.
       */
      case 37:
        YY_RULE_SETUP
        {
          if (aprepro.ap_options.debugging)
            fprintf(stderr, "DEBUG IF: 'ifdef'  found while skipping at line %d\n",
                    aprepro.ap_file_list.top().lineno);
          if_skip_level = 1;
          BEGIN(IF_WHILE_SKIP);
        }
        YY_BREAK
      case 38:
        YY_RULE_SETUP
        {
          if (aprepro.ap_options.debugging)
            fprintf(stderr, "DEBUG IF: 'if'  found while skipping at line %d\n",
                    aprepro.ap_file_list.top().lineno);
          if_skip_level = 1;
          BEGIN(IF_WHILE_SKIP);
        }
        YY_BREAK
      case 39:
        YY_RULE_SETUP
        {
          if (aprepro.ap_options.debugging)
            fprintf(stderr, "DEBUG IF: 'ifndef'  found while skipping at line %d\n",
                    aprepro.ap_file_list.top().lineno);
          if_skip_level = 1;
          BEGIN(IF_WHILE_SKIP);
        }
        YY_BREAK

      case 40:
        /* rule 40 can match eol */
        YY_RULE_SETUP
        {
          aprepro.ap_file_list.top().lineno++;
          if (aprepro.ap_options.debugging)
            fprintf(stderr, "DEBUG IF: 'else'   at level = %d at line %d\n", if_lvl,
                    aprepro.ap_file_list.top().lineno);
          if (YY_START == VERBATIM) {
            if (echo)
              ECHO;
          }
          else if (if_state[if_lvl] == IF_SKIP) {
            if (!if_case_run[if_lvl]) {
              BEGIN(INITIAL);
              if_state[if_lvl]    = INITIAL;
              if_case_run[if_lvl] = true;
            }
            else {
              BEGIN(IF_SKIP);
              if_state[if_lvl] = IF_SKIP;
            }
          }
          else if (if_state[if_lvl] == INITIAL) {
            BEGIN(IF_SKIP);
            if_state[if_lvl] = IF_SKIP;
          }

          /* If neither is true, this is a nested
             if that should be skipped */
        }
        YY_BREAK

      case 41:
        /* rule 41 can match eol */
        YY_RULE_SETUP
        {
          /* If any previous 'block' of this if has executed, then
           * just skip this block; otherwise see if condition is
           * true and execute this block
           */
          if (aprepro.ap_options.debugging)
            fprintf(stderr, "DEBUG IF: 'elseif'   at level = %d at line %d\n", if_lvl,
                    aprepro.ap_file_list.top().lineno);

          if (if_case_run[if_lvl]) { /* A previous else/elseif has run */
            aprepro.ap_file_list.top().lineno++;
            /* Already in IF_SKIP, so don't need to change state */
          }
          else {
            /* Need to check the elseif condition; push back and parse */
            yyless(0);
            curr_index = 0;
            BEGIN(INITIAL);
            if_state[if_lvl] = INITIAL;
          }
        }
        YY_BREAK
      case 42:
      case 43:
      case 44:
      case 45:
        YY_RULE_SETUP { ; }
        YY_BREAK
      case 46:
        /* rule 46 can match eol */
        YY_RULE_SETUP { aprepro.ap_file_list.top().lineno++; }
        YY_BREAK

      case 47:
        /* rule 47 can match eol */
        YY_RULE_SETUP
        {

          if (YY_START == VERBATIM) {
            if (echo)
              ECHO;
          }
          else {
            if (if_state[if_lvl] == IF_SKIP || if_state[if_lvl] == INITIAL) {
              BEGIN(INITIAL);
              suppress_nl = false;
            }
            /* If neither is true, this is a nested
               if that should be skipped */
            if (aprepro.ap_options.debugging)
              printf("DEBUG IF: 'endif'  at level = %d at line %d\n", if_lvl,
                     aprepro.ap_file_list.top().lineno);
            if (--if_lvl < 0) {
              if_lvl = 0;
              yyerror("Improperly Nested ifdef/ifndef statements");
            }
            /* Ignore endif if not skipping */
          }
          aprepro.ap_file_list.top().lineno++;
        }
        YY_BREAK
      case 48:
        YY_RULE_SETUP
        {
          BEGIN(GET_FILENAME);
          file_must_exist = true;
        }
        YY_BREAK
      case 49:
        YY_RULE_SETUP
        {
          BEGIN(GET_FILENAME);
          file_must_exist = false;
        }
        YY_BREAK
      case 50:
        /* rule 50 can match eol */
        YY_RULE_SETUP
        {
          aprepro.ap_file_list.top().lineno++;
          BEGIN(INITIAL);
          {
            symrec *s;
            int     quoted = 0;
            char   *pt     = strchr(yytext, ')');
            *pt            = '\0';
            /* Check to see if surrounded by double quote */
            if ((pt = strchr(yytext, '"')) != nullptr) {
              yytext++;
              quoted = 1;
            }
            if ((pt = strrchr(yytext, '"')) != nullptr) {
              *pt    = '\0';
              quoted = 1;
            }

            if (quoted == 0) {
              /* See if this is an aprepro variable referring to a name */
              s = aprepro.getsym(yytext);
              if (s == nullptr || (s->type != token::SVAR && s->type != token::IMMSVAR)) {
                pt = yytext;
              }
              else {
                pt = (char *)s->value.svar.c_str();
              }
            }
            else {
              pt = yytext;
            }

            bool added = add_include_file(pt, file_must_exist);

            if (added && !aprepro.doIncludeSubstitution)
              yy_push_state(VERBATIM);

            aprepro.ap_file_list.top().lineno++;
          }
        }
        YY_BREAK
      case 51:
      case 52:
        YY_RULE_SETUP
        {
          sscanf(yytext, "%lf", &yylval->val);
          return (token::NUM);
        }
        YY_BREAK
      case 53:
        YY_RULE_SETUP; // Empty rule
        YY_BREAK
      case 54:
        YY_RULE_SETUP
        {
          symrec *s;
          s = aprepro.getsym(yytext);
          if (s == nullptr)
            s = aprepro.putsym(yytext, SEAMS::Aprepro::SYMBOL_TYPE::UNDEFINED_VARIABLE, false);
          yylval->tptr = s;
          return ((token::yytokentype)s->type);
        }
        YY_BREAK
      case 55:
        YY_RULE_SETUP
        return (token::EQUAL);
        YY_BREAK
      case 56:
        YY_RULE_SETUP
        return (token::EQ_PLUS);
        YY_BREAK
      case 57:
        YY_RULE_SETUP
        return (token::EQ_MINUS);
        YY_BREAK
      case 58:
        YY_RULE_SETUP
        return (token::EQ_TIME);
        YY_BREAK
      case 59:
        YY_RULE_SETUP
        return (token::EQ_DIV);
        YY_BREAK
      case 60:
        YY_RULE_SETUP
        return (token::EQ_POW);
        YY_BREAK
      case 61:
        YY_RULE_SETUP
        return (token::EQ_POW);
        YY_BREAK
      case 62:
        YY_RULE_SETUP
        return (token::INC);
        YY_BREAK
      case 63:
        YY_RULE_SETUP
        return (token::DEC);
        YY_BREAK
      case 64:
        YY_RULE_SETUP
        return (token::PLU);
        YY_BREAK
      case 65:
        YY_RULE_SETUP
        return (token::SUB);
        YY_BREAK
      case 66:
        YY_RULE_SETUP
        return (token::TIM);
        YY_BREAK
      case 67:
        YY_RULE_SETUP
        return (token::TIM); /* ~ is same as multiply */
        YY_BREAK
      case 68:
        YY_RULE_SETUP
        return (token::CONCAT); /* String concatenation */
        YY_BREAK
      case 69:
        YY_RULE_SETUP
        return (token::DIV);
        YY_BREAK
      case 70:
        YY_RULE_SETUP
        return (token::MOD);
        YY_BREAK
      case 71:
        YY_RULE_SETUP
        return (token::POW);
        YY_BREAK
      case 72:
        YY_RULE_SETUP
        return (token::POW);
        YY_BREAK
      case 73:
        /* rule 73 can match eol */
        YY_RULE_SETUP
        aprepro.ap_file_list.top().lineno++;
        YY_BREAK
      case 74:
        YY_RULE_SETUP
        return (token::LPAR);
        YY_BREAK
      case 75:
        YY_RULE_SETUP
        return (token::RPAR);
        YY_BREAK
      case 76:
        YY_RULE_SETUP
        return (token::COMMA);
        YY_BREAK
      case 77:
        YY_RULE_SETUP
        return (token::SEMI);
        YY_BREAK
      case 78:
        YY_RULE_SETUP
        return (token::COLON);
        YY_BREAK
      case 79:
        YY_RULE_SETUP
        return (token::QUEST);
        YY_BREAK
      case 80:
        YY_RULE_SETUP
        return (token::LT);
        YY_BREAK
      case 81:
        YY_RULE_SETUP
        return (token::GT);
        YY_BREAK
      case 82:
        YY_RULE_SETUP
        return (token::LE);
        YY_BREAK
      case 83:
        YY_RULE_SETUP
        return (token::GE);
        YY_BREAK
      case 84:
        YY_RULE_SETUP
        return (token::EQ);
        YY_BREAK
      case 85:
        YY_RULE_SETUP
        return (token::NE);
        YY_BREAK
      case 86:
        YY_RULE_SETUP
        return (token::LAND);
        YY_BREAK
      case 87:
        YY_RULE_SETUP
        return (token::LOR);
        YY_BREAK
      case 88:
        YY_RULE_SETUP
        return (token::NOT);
        YY_BREAK
      case 89:
        YY_RULE_SETUP
        return (token::LBRACK);
        YY_BREAK
      case 90:
        YY_RULE_SETUP
        return (token::RBRACK);
        YY_BREAK
      case 91:
        /* rule 91 can match eol */
        YY_RULE_SETUP
        {
          char *pt = strrchr(yytext, '"');
          *pt      = '\0';
          new_string(yytext + 1, &yylval->string);
          return token::QSTRING;
        }
        YY_BREAK
      case 92:
        /* rule 92 can match eol */
        YY_RULE_SETUP
        {
          char *pt = strrchr(yytext, '\'');
          *pt      = '\0';
          new_string(yytext + 1, &yylval->string);
          return token::QSTRING;
        }
        YY_BREAK
      case 93:
        YY_RULE_SETUP
        {
          // Add to the history string
          save_history_string();

          if (switch_skip_to_endcase)
            BEGIN(END_CASE_SKIP);
          else
            BEGIN(if_state[if_lvl]);
          return (token::RBRACE);
        }
        YY_BREAK
      case 94:
        YY_RULE_SETUP
        {
          if (begin_double_brace) {
            end_double_brace = true;
          }
          else {
            yyerror("Found an unexpected double end brace ('}}').\n\t"
                    "It can only end an expression started with a double brace ('{{').\n\tCheck "
                    "syntax.");
          }

          // Add to the history string
          save_history_string();

          if (switch_skip_to_endcase)
            BEGIN(END_CASE_SKIP);
          else
            BEGIN(if_state[if_lvl]);
          unput('}');
          unput('O');
          unput('H');
          unput('C');
          unput('E');
          unput('{');
          return (token::RBRACE);
        }
        YY_BREAK
      case 95:
        YY_RULE_SETUP
        {
          if (echo)
            LexerOutput("{", 1);
        }
        YY_BREAK
      case 96:
        YY_RULE_SETUP
        {
          if (echo)
            LexerOutput("}", 1);
        }
        YY_BREAK
      case 97:
        YY_RULE_SETUP
        {
          // Check if we need to save the substitution history first.
          if (aprepro.ap_options.keep_history && (aprepro.ap_file_list.top().name != "_string_")) {
            if (curr_index > yyleng)
              hist_start = curr_index - yyleng;
            else
              hist_start = 0;
          }

          BEGIN(PARSING);
          echo               = false;
          begin_double_brace = true;
          return (token::LBRACE);
        }
        YY_BREAK
      case 98:
        YY_RULE_SETUP
        {
          // Check if we need to save the substitution history first.
          if (aprepro.ap_options.keep_history && (aprepro.ap_file_list.top().name != "_string_")) {
            if (curr_index > yyleng)
              hist_start = curr_index - yyleng;
            else
              hist_start = 0;
          }

          BEGIN(PARSING);

          return (token::LBRACE);
        }
        YY_BREAK
      case 99:
      case 100:
        YY_RULE_SETUP
        {
          if (aprepro.ap_options.end_on_exit) {
            if (echo)
              ECHO;
            return ((token::yytokentype)-1);
          }
          else if (echo)
            ECHO;
        }
        YY_BREAK
      case 101:
        YY_RULE_SETUP
        {
          if (echo)
            ECHO;
        }
        YY_BREAK
      case 102:
      case 103:
        YY_RULE_SETUP
        {
          if (echo && if_state[if_lvl] != IF_SKIP)
            ECHO;
        }
        YY_BREAK
      case 104:
        /* rule 104 can match eol */
        YY_RULE_SETUP
        {
          if (echo && !suppress_nl)
            ECHO;
          suppress_nl = false;
          if (end_double_brace) {
            echo               = true;
            begin_double_brace = false;
            end_double_brace   = false;
          }
          aprepro.ap_file_list.top().lineno++;
        }
        YY_BREAK
      case 105:
        YY_RULE_SETUP
        ECHO;
        YY_BREAK
      case YY_STATE_EOF(INITIAL):
      case YY_STATE_EOF(PARSING):
      case YY_STATE_EOF(GET_FILENAME):
      case YY_STATE_EOF(IF_SKIP):
      case YY_STATE_EOF(GET_VAR):
      case YY_STATE_EOF(VERBATIM):
      case YY_STATE_EOF(IF_WHILE_SKIP):
      case YY_STATE_EOF(GET_LOOP_VAR):
      case YY_STATE_EOF(LOOP):
      case YY_STATE_EOF(LOOP_SKIP):
      case YY_STATE_EOF(END_CASE_SKIP): yyterminate();

      case YY_END_OF_BUFFER: {
        /* Amount of text matched not including the EOB char. */
        int yy_amount_of_matched_text = (int)(yy_cp - (yytext_ptr)) - 1;

        /* Undo the effects of YY_DO_BEFORE_ACTION. */
        *yy_cp = (yy_hold_char);
        YY_RESTORE_YY_MORE_OFFSET

        if (YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW) {
          /* We're scanning a new file or input source.  It's
           * possible that this happened because the user
           * just pointed yyin at a new source and called
           * yylex().  If so, then we have to assure
           * consistency between YY_CURRENT_BUFFER and our
           * globals.  Here is the right place to do so, because
           * this is the first action (other than possibly a
           * back-up) that will match for the new input source.
           */
          (yy_n_chars)                               = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
          YY_CURRENT_BUFFER_LVALUE->yy_input_file    = yyin;
          YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
        }

        /* Note that here we test for yy_c_buf_p "<=" to the position
         * of the first EOB in the buffer, since yy_c_buf_p will
         * already have been incremented past the NUL character
         * (since all states make transitions on EOB to the
         * end-of-buffer state).  Contrast this with the test
         * in input().
         */
        if ((yy_c_buf_p) <=
            &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)]) { /* This was really a NUL. */
          yy_state_type yy_next_state;

          (yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

          yy_current_state = yy_get_previous_state();

          /* Okay, we're now positioned to make the NUL
           * transition.  We couldn't have
           * yy_get_previous_state() go ahead and do it
           * for us because it doesn't know how to deal
           * with the possibility of jamming (and we don't
           * want to build jamming into it because then it
           * will run more slowly).
           */

          yy_next_state = yy_try_NUL_trans(yy_current_state);

          yy_bp = (yytext_ptr) + YY_MORE_ADJ;

          if (yy_next_state) {
            /* Consume the NUL. */
            yy_cp            = ++(yy_c_buf_p);
            yy_current_state = yy_next_state;
            goto yy_match;
          }

          else {
            /* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
            yy_cp = (yy_c_buf_p);
            goto yy_find_action;
          }
        }

        else
          switch (yy_get_next_buffer()) {
          case EOB_ACT_END_OF_FILE: {
            (yy_did_buffer_switch_on_eof) = 0;

            if (yywrap()) {
              /* Note: because we've taken care in
               * yy_get_next_buffer() to have set up
               * yytext, we can now set up
               * yy_c_buf_p so that if some total
               * hoser (like flex itself) wants to
               * call the scanner after we return the
               * YY_NULL, it'll still work - another
               * YY_NULL will get returned.
               */
              (yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

              yy_act = YY_STATE_EOF(YY_START);
              goto do_action;
            }

            else {
              if (!(yy_did_buffer_switch_on_eof))
                YY_NEW_FILE;
            }
            break;
          }

          case EOB_ACT_CONTINUE_SCAN:
            (yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

            yy_current_state = yy_get_previous_state();

            yy_cp = (yy_c_buf_p);
            yy_bp = (yytext_ptr) + YY_MORE_ADJ;
            goto yy_match;

          case EOB_ACT_LAST_MATCH:
            (yy_c_buf_p) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

            yy_current_state = yy_get_previous_state();

            yy_cp = (yy_c_buf_p);
            yy_bp = (yytext_ptr) + YY_MORE_ADJ;
            goto yy_find_action;
          }
        break;
      }

      default: YY_FATAL_ERROR("fatal flex scanner internal error--no action found");
      } /* end of action switch */
    } /* end of scanning one token */
  } /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer(std::istream *arg_yyin, std::ostream *arg_yyout)
{
  yyin          = arg_yyin;
  yyout         = arg_yyout;
  yy_c_buf_p    = 0;
  yy_init       = 0;
  yy_start      = 0;
  yy_flex_debug = 0;
  yylineno      = 1; // this will only get updated if %option yylineno

  yy_did_buffer_switch_on_eof = 0;

  yy_looking_for_trail_begin = 0;
  yy_more_flag               = 0;
  yy_more_len                = 0;
  yy_more_offset = yy_prev_more_offset = 0;

  yy_start_stack_ptr = yy_start_stack_depth = 0;
  yy_start_stack                            = NULL;

  yy_buffer_stack     = 0;
  yy_buffer_stack_top = 0;
  yy_buffer_stack_max = 0;

  yy_state_buf = 0;
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
  delete[] yy_state_buf;
  SEAMSfree(yy_start_stack);
  yy_delete_buffer(YY_CURRENT_BUFFER);
  SEAMSfree(yy_buffer_stack);
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams(std::istream *new_in, std::ostream *new_out)
{
  if (new_in) {
    yy_delete_buffer(YY_CURRENT_BUFFER);
    yy_switch_to_buffer(yy_create_buffer(new_in, YY_BUF_SIZE));
  }

  if (new_out)
    yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput(char *buf, int /* max_size */)
#else
int yyFlexLexer::LexerInput(char *buf, int max_size)
#endif
{
  if (yyin->eof() || yyin->fail())
    return 0;

#ifdef YY_INTERACTIVE
  yyin->get(buf[0]);

  if (yyin->eof())
    return 0;

  if (yyin->bad())
    return -1;

  return 1;

#else
  (void)yyin->read(buf, max_size);

  if (yyin->bad())
    return -1;
  else
    return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput(const char *buf, int size) { (void)yyout->write(buf, size); }
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
  char *dest   = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
  char *source = (yytext_ptr);
  int   number_to_move, i;
  int   ret_val;

  if ((yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1])
    YY_FATAL_ERROR("fatal flex scanner internal error--end of buffer missed");

  if (YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer ==
      0) { /* Don't try to fill the buffer, so this is an EOF. */
    if ((yy_c_buf_p) - (yytext_ptr)-YY_MORE_ADJ == 1) {
      /* We matched a single character, the EOB, so
       * treat this as a final EOF.
       */
      return EOB_ACT_END_OF_FILE;
    }

    else {
      /* We matched some text prior to the EOB, first
       * process it.
       */
      return EOB_ACT_LAST_MATCH;
    }
  }

  /* Try to read more data. */

  /* First move last chars to start of buffer. */
  number_to_move = (int)((yy_c_buf_p) - (yytext_ptr)) - 1;

  for (i = 0; i < number_to_move; ++i)
    *(dest++) = *(source++);

  if (YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING)
    /* don't do the read, it's not guaranteed to return an EOF,
     * just force an EOF
     */
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

  else {
    yy_size_t num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

    while (num_to_read <= 0) { /* Not enough room in the buffer - grow it. */

      /* just a shorter name for the current buffer */
      YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

      int yy_c_buf_p_offset = (int)((yy_c_buf_p)-b->yy_ch_buf);

      if (b->yy_is_our_buffer) {
        yy_size_t new_size = b->yy_buf_size * 2;

        if (new_size <= 0)
          b->yy_buf_size += b->yy_buf_size / 8;
        else
          b->yy_buf_size *= 2;

        b->yy_ch_buf = (char *)
            /* Include room in for 2 EOB chars. */
            SEAMSrealloc((void *)b->yy_ch_buf, b->yy_buf_size + 2);
      }
      else
        /* Can't grow it, we don't own it. */
        b->yy_ch_buf = 0;

      if (!b->yy_ch_buf)
        YY_FATAL_ERROR("fatal error - scanner input buffer overflow");

      (yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

      num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;
    }

    if (num_to_read > YY_READ_BUF_SIZE)
      num_to_read = YY_READ_BUF_SIZE;

    /* Read in more data. */
    YY_INPUT((&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]), (yy_n_chars), num_to_read);

    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
  }

  if ((yy_n_chars) == 0) {
    if (number_to_move == YY_MORE_ADJ) {
      ret_val = EOB_ACT_END_OF_FILE;
      yyrestart(yyin);
    }

    else {
      ret_val                                    = EOB_ACT_LAST_MATCH;
      YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_EOF_PENDING;
    }
  }

  else
    ret_val = EOB_ACT_CONTINUE_SCAN;

  if ((yy_size_t)((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
    /* Extend the array by 50%, plus the number we really need. */
    yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
    YY_CURRENT_BUFFER_LVALUE->yy_ch_buf =
        (char *)SEAMSrealloc((void *)YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, new_size);
    if (!YY_CURRENT_BUFFER_LVALUE->yy_ch_buf)
      YY_FATAL_ERROR("out of dynamic memory in yy_get_next_buffer()");
  }

  (yy_n_chars) += number_to_move;
  YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)]     = YY_END_OF_BUFFER_CHAR;
  YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

  (yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

  return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
  yy_state_type yy_current_state;
  char         *yy_cp;

  /* %% [15.0] code to get the start state into yy_current_state goes here */
  yy_current_state = (yy_start);

  for (yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp) {
    /* %% [16.0] code to find the next state goes here */
    YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
    if (yy_accept[yy_current_state]) {
      (yy_last_accepting_state) = yy_current_state;
      (yy_last_accepting_cpos)  = yy_cp;
    }
    while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
      yy_current_state = (int)yy_def[yy_current_state];
      if (yy_current_state >= 750)
        yy_c = yy_meta[(unsigned int)yy_c];
    }
    yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int)yy_c];
  }

  return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
yy_state_type yyFlexLexer::yy_try_NUL_trans(yy_state_type yy_current_state)
/* %endif */
{
  int yy_is_jam;
  /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
  char *yy_cp = (yy_c_buf_p);

  YY_CHAR yy_c = 1;
  if (yy_accept[yy_current_state]) {
    (yy_last_accepting_state) = yy_current_state;
    (yy_last_accepting_cpos)  = yy_cp;
  }
  while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
    yy_current_state = (int)yy_def[yy_current_state];
    if (yy_current_state >= 750)
      yy_c = yy_meta[(unsigned int)yy_c];
  }
  yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int)yy_c];
  yy_is_jam        = (yy_current_state == 749);

  return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyunput(int c, char *yy_bp)
/* %endif */
{
  char *yy_cp;

  yy_cp = (yy_c_buf_p);

  /* undo effects of setting up yytext */
  *yy_cp = (yy_hold_char);

  if (yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2) { /* need to shift things up to make room */
                                                         /* +2 for EOB chars. */
    yy_size_t number_to_move = (yy_n_chars) + 2;
    char *dest   = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
    char *source = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

    while (source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf)
      *--dest = *--source;

    yy_cp += (int)(dest - source);
    yy_bp += (int)(dest - source);
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

    if (yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2)
      YY_FATAL_ERROR("flex scanner push-back overflow");
  }

  *--yy_cp = (char)c;

  /* %% [18.0] update yylineno here */

  (yytext_ptr)   = yy_bp;
  (yy_hold_char) = *yy_cp;
  (yy_c_buf_p)   = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yyinput()
/* %endif */
{
  int c;

  *(yy_c_buf_p) = (yy_hold_char);

  if (*(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR) {
    /* yy_c_buf_p now points to the character we want to return.
     * If this occurs *before* the EOB characters, then it's a
     * valid NUL; if not, then we've hit the end of the buffer.
     */
    if ((yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)])
      /* This was really a NUL. */
      *(yy_c_buf_p) = '\0';

    else { /* need more input */
      yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
      ++(yy_c_buf_p);

      switch (yy_get_next_buffer()) {
      case EOB_ACT_LAST_MATCH:
        /* This happens because yy_g_n_b()
         * sees that we've accumulated a
         * token and flags that we need to
         * try matching the token before
         * proceeding.  But for input(),
         * there's no matching to consider.
         * So convert the EOB_ACT_LAST_MATCH
         * to EOB_ACT_END_OF_FILE.
         */

        /* Reset buffer status. */
        yyrestart(yyin);

        /*FALLTHROUGH*/

      case EOB_ACT_END_OF_FILE: {
        if (yywrap())
          return EOF;

        if (!(yy_did_buffer_switch_on_eof))
          YY_NEW_FILE;
#ifdef __cplusplus
        return yyinput();
#else
        return input();
#endif
      }

      case EOB_ACT_CONTINUE_SCAN: (yy_c_buf_p) = (yytext_ptr) + offset; break;
      }
    }
  }

  c              = *(unsigned char *)(yy_c_buf_p); /* cast for 8-bit char's */
  *(yy_c_buf_p)  = '\0';                           /* preserve yytext */
  (yy_hold_char) = *++(yy_c_buf_p);

  /* %% [19.0] update BOL and yylineno */

  return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 *
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyrestart(std::istream *input_file)
/* %endif */
{

  if (!YY_CURRENT_BUFFER) {
    yyensure_buffer_stack();
    YY_CURRENT_BUFFER_LVALUE = yy_create_buffer(yyin, YY_BUF_SIZE);
  }

  yy_init_buffer(YY_CURRENT_BUFFER, input_file);
  yy_load_buffer_state();
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 *
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yy_switch_to_buffer(YY_BUFFER_STATE new_buffer)
/* %endif */
{

  /* TODO. We should be able to replace this entire function body
   * with
   *		yypop_buffer_state();
   *		yypush_buffer_state(new_buffer);
   */
  yyensure_buffer_stack();
  if (YY_CURRENT_BUFFER == new_buffer)
    return;

  if (YY_CURRENT_BUFFER) {
    /* Flush out information for old buffer. */
    *(yy_c_buf_p)                        = (yy_hold_char);
    YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
  }

  YY_CURRENT_BUFFER_LVALUE = new_buffer;
  yy_load_buffer_state();

  /* We don't actually know whether we did this switch during
   * EOF (yywrap()) processing, but the only time this flag
   * is looked at is after yywrap() is called, so it's safe
   * to go ahead and always set it.
   */
  (yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
  (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
  (yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
  yyin                        = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
  (yy_hold_char)              = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 *
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
YY_BUFFER_STATE yyFlexLexer::yy_create_buffer(std::istream *file, int size)
/* %endif */
{
  YY_BUFFER_STATE b;

  b = (YY_BUFFER_STATE)SEAMSalloc(sizeof(struct yy_buffer_state));
  if (!b)
    YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

  b->yy_buf_size = size;

  /* yy_ch_buf has to be 2 characters longer than the size given because
   * we need to put in 2 end-of-buffer characters.
   */
  b->yy_ch_buf = (char *)SEAMSalloc(b->yy_buf_size + 2);
  if (!b->yy_ch_buf)
    YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

  b->yy_is_our_buffer = 1;

  yy_init_buffer(b, file);

  return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 *
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yy_delete_buffer(YY_BUFFER_STATE b)
/* %endif */
{

  if (!b)
    return;

  if (b == YY_CURRENT_BUFFER) /* Not sure if we should pop here. */
    YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE)0;

  if (b->yy_is_our_buffer)
    SEAMSfree((void *)b->yy_ch_buf);

  SEAMSfree((void *)b);
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yy_init_buffer(YY_BUFFER_STATE b, std::istream *file)
/* %endif */

{
  int oerrno = errno;

  yy_flush_buffer(b);

  b->yy_input_file  = file;
  b->yy_fill_buffer = 1;

  /* If b is the current buffer, then yy_init_buffer was _probably_
   * called from yyrestart() or through yy_get_next_buffer.
   * In that case, we don't want to reset the lineno or column.
   */
  if (b != YY_CURRENT_BUFFER) {
    b->yy_bs_lineno = 1;
    b->yy_bs_column = 0;
  }

  /* %if-c-only */
  /* %endif */
  /* %if-c++-only */
  b->yy_is_interactive = 0;
  /* %endif */
  errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 *
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yy_flush_buffer(YY_BUFFER_STATE b)
/* %endif */
{
  if (!b)
    return;

  b->yy_n_chars = 0;

  /* We always need two end-of-buffer characters.  The first causes
   * a transition to the end-of-buffer state.  The second causes
   * a jam in that state.
   */
  b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
  b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

  b->yy_buf_pos = &b->yy_ch_buf[0];

  b->yy_at_bol        = 1;
  b->yy_buffer_status = YY_BUFFER_NEW;

  if (b == YY_CURRENT_BUFFER)
    yy_load_buffer_state();
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state(YY_BUFFER_STATE new_buffer)
/* %endif */
{
  if (new_buffer == NULL)
    return;

  yyensure_buffer_stack();

  /* This block is copied from yy_switch_to_buffer. */
  if (YY_CURRENT_BUFFER) {
    /* Flush out information for old buffer. */
    *(yy_c_buf_p)                        = (yy_hold_char);
    YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
  }

  /* Only push if top exists. Otherwise, replace top. */
  if (YY_CURRENT_BUFFER)
    (yy_buffer_stack_top)++;
  YY_CURRENT_BUFFER_LVALUE = new_buffer;

  /* copied from yy_switch_to_buffer. */
  yy_load_buffer_state();
  (yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state(void)
/* %endif */
{
  if (!YY_CURRENT_BUFFER)
    return;

  yy_delete_buffer(YY_CURRENT_BUFFER);
  YY_CURRENT_BUFFER_LVALUE = NULL;
  if ((yy_buffer_stack_top) > 0)
    --(yy_buffer_stack_top);

  if (YY_CURRENT_BUFFER) {
    yy_load_buffer_state();
    (yy_did_buffer_switch_on_eof) = 1;
  }
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
  yy_size_t num_to_alloc;

  if (!(yy_buffer_stack)) {

    /* First allocation is just for 2 elements, since we don't know if this
     * scanner will even need a stack. We use 2 instead of 1 to avoid an
     * immediate realloc on the next call.
     */
    num_to_alloc = 1;
    (yy_buffer_stack) =
        (struct yy_buffer_state **)SEAMSalloc(num_to_alloc * sizeof(struct yy_buffer_state *));
    if (!(yy_buffer_stack))
      YY_FATAL_ERROR("out of dynamic memory in yyensure_buffer_stack()");

    memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state *));

    (yy_buffer_stack_max) = num_to_alloc;
    (yy_buffer_stack_top) = 0;
    return;
  }

  if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1) {

    /* Increase the buffer to prepare for a possible push. */
    int grow_size = 8 /* arbitrary grow size */;

    num_to_alloc      = (yy_buffer_stack_max) + grow_size;
    (yy_buffer_stack) = (struct yy_buffer_state **)SEAMSrealloc(
        (yy_buffer_stack), num_to_alloc * sizeof(struct yy_buffer_state *));
    if (!(yy_buffer_stack))
      YY_FATAL_ERROR("out of dynamic memory in yyensure_buffer_stack()");

    /* zero only the new slots.*/
    memset((yy_buffer_stack) + (yy_buffer_stack_max), 0,
           grow_size * sizeof(struct yy_buffer_state *));
    (yy_buffer_stack_max) = num_to_alloc;
  }
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yy_push_state(int new_state)
/* %endif */
{
  if ((yy_start_stack_ptr) >= (yy_start_stack_depth)) {
    yy_size_t new_size;

    (yy_start_stack_depth) += YY_START_STACK_INCR;
    new_size = (yy_start_stack_depth) * sizeof(int);

    if (!(yy_start_stack))
      (yy_start_stack) = (int *)SEAMSalloc(new_size);

    else
      (yy_start_stack) = (int *)SEAMSrealloc((void *)(yy_start_stack), new_size);

    if (!(yy_start_stack))
      YY_FATAL_ERROR("out of memory expanding start-condition stack");
  }

  (yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

  BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yy_pop_state()
/* %endif */
{
  if (--(yy_start_stack_ptr) < 0)
    YY_FATAL_ERROR("start-condition stack underflow");

  BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_top_state()
/* %endif */
{
  return (yy_start_stack)[(yy_start_stack_ptr)-1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError(yyconst char msg[])
{
  std::cerr << msg << std::endl;
  exit(YY_EXIT_FAILURE);
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n)                                                                                  \
  do {                                                                                             \
    /* Undo effects of setting up yytext. */                                                       \
    int yyless_macro_arg = (n);                                                                    \
    YY_LESS_LINENO(yyless_macro_arg);                                                              \
    yytext[yyleng] = (yy_hold_char);                                                               \
    (yy_c_buf_p)   = yytext + yyless_macro_arg;                                                    \
    (yy_hold_char) = *(yy_c_buf_p);                                                                \
    *(yy_c_buf_p)  = '\0';                                                                         \
    yyleng         = yyless_macro_arg;                                                             \
  } while (0)

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy(char *s1, yyconst char *s2, int n)
{
  int i;
  for (i = 0; i < n; ++i)
    s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen(yyconst char *s)
{
  int n;
  for (n = 0; s[n]; ++n)
    ;

  return n;
}
#endif

void *SEAMSalloc(yy_size_t size) { return (void *)malloc(size); }

void *SEAMSrealloc(void *ptr, yy_size_t size)
{
  /* The cast to (char *) in the following accommodates both
   * implementations that use char* generic pointers, and those
   * that use void* generic pointers.  It works with the latter
   * because both ANSI C and C++ allow castless assignment from
   * any pointer type to void*, and deal with argument conversions
   * as though doing an assignment.
   */
  return (void *)realloc((char *)ptr, size);
}

void SEAMSfree(void *ptr) { free((char *)ptr); /* see SEAMSrealloc() for (char *) cast */ }

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */

namespace SEAMS {

  Scanner::Scanner(Aprepro &aprepro_yyarg, std::istream *in, std::ostream *out)
      : SEAMSFlexLexer(in, out), aprepro(aprepro_yyarg)
  {
    aprepro.outputStream.push(out);
  }

  Scanner::~Scanner()
  {
    while (aprepro.ap_file_list.size() > 1) {
      const auto &kk = aprepro.ap_file_list.top();
      if (kk.name != "STDIN") {
        yyFlexLexer::yy_load_buffer_state();
        delete yyin;
        yyin = nullptr;
      }
      aprepro.ap_file_list.pop();
      yyFlexLexer::yypop_buffer_state();
    };
  }

  bool Scanner::add_include_file(const std::string &filename, bool must_exist)
  {
    std::fstream *yytmp = nullptr;
    if (must_exist)
      yytmp = aprepro.open_file(filename, "r");
    else
      yytmp = aprepro.check_open_file(filename, "r");

    if (yytmp) {
      if (yyin && !yy_init) {
        yyFlexLexer::yypush_buffer_state(yyFlexLexer::yy_create_buffer(yyin, YY_BUF_SIZE));
      }

      yyin = yytmp;
      aprepro.info("Included File: '" + filename + "'", true);

      SEAMS::file_rec new_file(filename.c_str(), 0, false, 0);
      aprepro.ap_file_list.push(new_file);

      yyFlexLexer::yypush_buffer_state(yyFlexLexer::yy_create_buffer(yytmp, YY_BUF_SIZE));
      curr_index = 0;
    }
    return yytmp != nullptr;
  }

  void Scanner::LexerOutput(const char *buf, int size)
  {
    // Do this before writing so that we have the correct index in the
    // output stream.
    if (aprepro.ap_options.keep_history) {
      aprepro.add_history(history_string, buf);
      history_string.clear();
      hist_start = 0;
    }

    aprepro.outputStream.top()->write(buf, size);
    if (aprepro.ap_options.interactive && aprepro.outputStream.size() == 1) {
      // In interactive mode, output to stdout in addition to the
      // output stream, unless user has redirected output...
      std::cout << buf;
    }
  }

  int Scanner::LexerInput(char *buf, int max_size)
  {
    if (yyin->eof() || yyin->fail()) {
      return 0;
    }

    if (aprepro.ap_options.interactive && yyin == &std::cin && isatty(0) != 0 && isatty(1) != 0) {
      char *line = SEAMS::getline_int(nullptr);

      if (strlen(line) == 0) {
        return 0;
      }

      if (!string_is_ascii(line, strlen(line))) {
        aprepro.warning("input line contains non-ASCII (probably UTF-8) characters which might be "
                        "parsed incorrectly.");
      }

      SEAMS::gl_histadd(line);

      if (strlen(line) > (size_t)max_size - 2) {
        yyerror("input line is too long");
        return 0;
      }

      strcpy(buf, line);
      strcat(buf, "\n");

      return strlen(buf);
    }
    else {
      (void)yyin->read(buf, max_size);

      if (yyin->bad()) {
        return -1;
      }
      else {
        if (!string_is_ascii(buf, yyin->gcount())) {
          aprepro.warning("input file contains non-ASCII (probably UTF-8) characters which will "
                          "might be parsed incorrectly.");
        }
        return yyin->gcount();
      }
    }
  }

  int Scanner::yywrap()
  {
    // Clear the history string.
    history_string.clear();
    hist_start = 0;
    curr_index = 0;

    // If we are using the string interactive method, we want to return to
    // our original state if parsing was cutoff prematurely.
    if (aprepro.string_interactive() && YY_START == PARSING) {
      if (switch_skip_to_endcase) {
        BEGIN(END_CASE_SKIP);
      }
      else {
        BEGIN(if_state[if_lvl]);
      }
    }

    if (aprepro.ap_file_list.size() <= 1) { /* End of main file, not in nested include */
      return (1);
    }
    else if (aprepro.string_interactive() && loop_lvl) {
      return (1);
    }
    else if (aprepro.isCollectingLoop) {
      yyerror("End-of-file detected inside loop. Check loop syntax. {endloop} must be on line by "
              "itself.");
      return (1);
    }
    else {
      /* We are in an included or looping file */
      if (aprepro.ap_file_list.top().tmp_file) {
        if (aprepro.ap_options.debugging) {
          std::cerr << "DEBUG LOOP: Loop count = " << aprepro.ap_file_list.top().loop_count << "\n";
        }
        if (--aprepro.ap_file_list.top().loop_count <= 0) {
          // On Windows, you can't remove the temp file until all the references to the
          // file object have been released, so we will delete it here.
          delete yyin;
          yyin = nullptr;

          if (aprepro.ap_file_list.top().name != "_string_") {
            if (!aprepro.ap_options.debugging) {
              remove(aprepro.ap_file_list.top().name.c_str()); /* Delete file if temporary */
            }
            if (!aprepro.doLoopSubstitution) {
              yy_pop_state();
            }
          }

          aprepro.ap_file_list.pop();
          yyFlexLexer::yypop_buffer_state();
        }
        else {
          // Do not pop ap_file_list; we are rereading that file...
          delete yyin;
          yyin = nullptr;
          yyFlexLexer::yypop_buffer_state();
          yyin = aprepro.open_file(aprepro.ap_file_list.top().name, "r");
          yyFlexLexer::yypush_buffer_state(yyFlexLexer::yy_create_buffer(yyin, YY_BUF_SIZE));
          aprepro.ap_file_list.top().lineno = 0;

          if (aprepro.ap_file_list.top().loop_index != nullptr) {
            aprepro.ap_file_list.top().loop_index->value.var +=
                aprepro.ap_file_list.top().loop_increment;
          }
        }
      }
      else {
        delete yyin;
        yyin = nullptr;
        aprepro.ap_file_list.pop();
        yyFlexLexer::yypop_buffer_state();

        if (aprepro.ap_file_list.top().name == "standard input") {
          yyin = &std::cin;
        }

        /* Turn echoing back on at end of included files. */
        echo = true;

        // If we are not doing aprepro substitutions for the included file, but
        // just collecting lines, pop the state from VERBATIM back to what it
        // was previously.
        if (!aprepro.doIncludeSubstitution) {
          yy_pop_state();
        }

        /* Set immutable mode back to global immutable
         * state at end of included file*/
        aprepro.stateImmutable = aprepro.ap_options.immutable;
      }

      // Reset the current character index.
      curr_index = 0;
      if (yyin != nullptr) {
        curr_index = yyin->tellg();
      }

      return (0);
    }
  }

  /* Print error message to standard error and return.  Note: internally
   *   'lineno' starts at zero.  To avoid confusion, we add 1 to value
   *   when it is output.
   */

  void Scanner::yyerror(const char *s) { aprepro.error(s); }

  char *Scanner::execute(char string[])
  {
    /* Push the contents of 'string' onto the stack to be reread.
     * 'string' will be surrounded by {} so it must be a valid expression.
     */

    /*
     * NOTE: The closing } has not yet been scanned in the call to execute();
     *       therefore, we read it ourselves using input(), then we push:
     *       '}{' + our string + '}'
     */
    int i;
    while ((i = yyFlexLexer::yyinput()) != '}' && i != EOF)
      curr_index++; /* eat up values */

    // Increment curr_index to account for the '}' and save history
    curr_index++;
    save_history_string();

    /* Allocate space for string + '}' + '{' + end_of_string */
    std::string new_string;
    new_string += "}{";
    new_string += string;
    new_string += "}";

    aprepro.ap_file_list.push(SEAMS::file_rec("_string_", 0, true, -1));

    auto ins = new std::istringstream(new_string); // Declare an input string stream.
    yyFlexLexer::yypush_buffer_state(yyFlexLexer::yy_create_buffer(ins, new_string.size()));
    return (nullptr);
  }

  /* Push the contents of 'string' onto the stack to be reread.
   * 'string' will not be surrounded by {}.
   */

  char *Scanner::rescan(char *string)
  {
    int i;
    /*
     * NOTE: The closing } has not yet been scanned in the call to rescan();
     *       therefore, we read it ourselves using input(), then we push our
     *       string and then put the closing } back on the stack last
     *       (to be read first),
     */
    while ((i = yyFlexLexer::yyinput()) != '}' && i != EOF)
      curr_index++; /* eat up values */

    // Increment curr_index to account for the '}' and save history
    curr_index++;
    save_history_string();

    {
      aprepro.ap_file_list.push(SEAMS::file_rec("_string_", 0, true, -1));
      std::string new_string("}");
      new_string += string;

      auto ins = new std::istringstream(new_string); // Declare an input string stream.
      yyFlexLexer::yypush_buffer_state(yyFlexLexer::yy_create_buffer(ins, new_string.size()));
    }
    return (nullptr);
  }

  char *Scanner::import_handler(char *string)
  {
    /*
     * NOTE: The closing } has not yet been scanned in the call to rescan();
     *       therefore, we read it ourselves using input().
     */
    int i = 0;
    while ((i = yyFlexLexer::yyinput()) != '}' && i != EOF)
      curr_index++; /* eat up values */

    add_include_file(string, true);
    std::string info_string = std::string("Imported File: '") + string + "'";
    aprepro.info(info_string, true);

    if (!aprepro.doIncludeSubstitution) {
      yy_push_state(VERBATIM);
    }

    /*
     * Now we need to push back the closing } so it is the first thing read.
     * We no longer have the initial file stream (is is pushed down on stack)
     * so we need to add a new file stream consisting of just a single character.
     * Wasteful, but best I can come up with at this time.
     */
    aprepro.ap_file_list.push(SEAMS::file_rec("_string_", 0, true, -1));
    std::string new_string("}");
    auto        ins = new std::istringstream(new_string); // Declare an input string stream.
    yyFlexLexer::yypush_buffer_state(yyFlexLexer::yy_create_buffer(ins, new_string.size()));

    if (aprepro.ap_options.debugging) {
      std::cerr << "DEBUG IMPORT: " << string << "\n";
    }
    return (nullptr);
  }

  char *Scanner::if_handler(double x)
  {
    if_lvl++;
    if (if_lvl >= MAX_IF_NESTING) {
      yyerror("Too many nested if statements");
    }
    else {
      if (x == 0) {
        if_state[if_lvl]    = IF_SKIP;
        if_case_run[if_lvl] = false;
      }
      else {
        suppress_nl         = true;
        if_state[if_lvl]    = INITIAL;
        if_case_run[if_lvl] = true;
      }
      if (aprepro.ap_options.debugging) {
        std::cerr << "DEBUG IF: If level " << if_lvl << " " << if_state[if_lvl] << "\n";
      }
    }
    return (nullptr);
  }

  char *Scanner::elseif_handler(double x)
  {
    if (x == 0 || if_case_run[if_lvl]) {
      if_state[if_lvl] = IF_SKIP;
    }
    else {
      suppress_nl         = true;
      if_state[if_lvl]    = INITIAL;
      if_case_run[if_lvl] = true;
    }
    if (aprepro.ap_options.debugging) {
      std::cerr << "DEBUG IF: elseif at level " << if_lvl << " " << if_state[if_lvl] << "\n";
    }
    return (nullptr);
  }

  char *Scanner::switch_handler(double x)
  {
    // save that we are in a switch statement
    // save the value of 'x' for use in deciding which case to execute
    if (switch_active) {
      yyerror("switch statement found while switch already active. Nested switch not supported.");
    }

    switch_active          = true;
    switch_case_run        = false;
    switch_condition       = x;
    switch_skip_to_endcase = true; /* Skip everything until first case */
    suppress_nl            = true;

    if (aprepro.ap_options.debugging) {
      std::cerr << "DEBUG SWITCH: 'switch' with condition = " << switch_condition << " at line "
                << aprepro.ap_file_list.top().lineno << "\n";
    }
    return (nullptr);
  }

  char *Scanner::case_handler(double x)
  {
    // make sure we are in a switch statement
    // if 'x' matches the value saved in the switch statement
    // and no other case has been executed, then
    // execute the code in the case and set a flag indicating
    // the switch has run;
    // if 'x' does not match the value saved, then skip to endcase
    suppress_nl = true;

    if (!switch_active) {
      yyerror("case statement found outside switch statement.");
    }

    if (!switch_case_run && x == switch_condition) {
      switch_case_run = true;
      if (aprepro.ap_options.debugging) {
        fprintf(stderr,
                "DEBUG SWITCH: 'case' condition = %g matches switch condition = %g at line %d\n", x,
                switch_condition, aprepro.ap_file_list.top().lineno);
      }
    }
    else {
      if (aprepro.ap_options.debugging) {
        fprintf(stderr,
                "DEBUG SWITCH: 'case' condition = %g does not match switch condition = %g "
                "(or case already matched) at line %d\n",
                x, switch_condition, aprepro.ap_file_list.top().lineno);
      }

      // Need to skip all code until end of case
      switch_skip_to_endcase = true;
    }
    return (nullptr);
  }

  void Scanner::save_history_string()
  {
    if (!aprepro.ap_options.keep_history) {
      return;
    }

    // Don't do it if the file is the one used by execute and rescan.
    if (aprepro.ap_file_list.top().name == "_string_" ||
        aprepro.ap_file_list.top().name == "standard input") {
      return;
    }

    size_t hist_end = curr_index;
    size_t len      = hist_end - hist_start;

    if (len <= 0)
      return;

    // Clear any possible end-of-stream if e.g., reading from a istringstream.
    std::ios::iostate state = yyin->rdstate();
    size_t            loc   = yyin->tellg();
    yyin->clear();

    // Go back in the stream to where we started keeping history.
    yyin->seekg(hist_start);
    if (!yyin->good()) {
      yyerror("Stream state bad in `save_history_string` seekg");
      return;
    }

    // Read everything up to this point again and save it.
    auto tmp = new char[len + 1];
    yyin->read(tmp, len);
    if (!yyin->good()) {
      yyerror("Stream state bad in `save_history_string` read");
      return;
    }
    tmp[len] = '\0';

    history_string = tmp;
    delete[] tmp;
    hist_start = 0;

    // restore stream state
    yyin->seekg(loc);
    yyin->setstate(state);
  }
} // namespace SEAMS

/* This implementation of SEAMSFlexLexer::yylex() is required to fill the
 * vtable of the class SEAMSFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */

#ifdef yylex
#undef yylex
#endif
int SEAMSFlexLexer::yylex()
{
  std::cerr << "in SEAMSFlexLexer::yylex() !" << '\n';
  return 0;
}

/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */

int SEAMSFlexLexer::yywrap() { return 1; }
